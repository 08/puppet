#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parsedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id81e5fd5119', 'grammar.ra', 737
require 'puppet/parser/functions'

attr_reader :file
attr_accessor :files

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = AST::ASTArray.new(
            :children => args
        )
    end

    return result
end

def file=(file)
    unless FileTest.exists?(file)
        file = file + ".pp"
        unless FileTest.exists?(file)
            raise Puppet::Error, "Could not find file %s" % file
        end
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::ParsedFile.new(file)
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
    #if Puppet[:debug]
    #    @yydebug = true
    #end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def reparse?
    @files.detect { |file|
        file.changed?
    }
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id81e5fd5119

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 44, :_reduce_1,
 1, 45, :_reduce_none,
 2, 45, :_reduce_3,
 1, 46, :_reduce_none,
 1, 46, :_reduce_none,
 1, 46, :_reduce_none,
 1, 46, :_reduce_none,
 1, 46, :_reduce_none,
 1, 46, :_reduce_none,
 1, 46, :_reduce_none,
 1, 46, :_reduce_none,
 4, 51, :_reduce_12,
 2, 51, :_reduce_13,
 1, 55, :_reduce_none,
 3, 55, :_reduce_15,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 5, 47, :_reduce_18,
 5, 47, :_reduce_19,
 5, 47, :_reduce_20,
 4, 64, :_reduce_21,
 1, 59, :_reduce_none,
 3, 59, :_reduce_23,
 0, 60, :_reduce_none,
 1, 60, :_reduce_none,
 1, 57, :_reduce_26,
 1, 63, :_reduce_27,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 3, 48, :_reduce_34,
 0, 61, :_reduce_35,
 1, 61, :_reduce_36,
 3, 61, :_reduce_37,
 3, 70, :_reduce_38,
 1, 71, :_reduce_none,
 3, 71, :_reduce_40,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 4, 75, :_reduce_51,
 1, 66, :_reduce_52,
 1, 66, :_reduce_53,
 1, 73, :_reduce_54,
 4, 74, :_reduce_55,
 5, 49, :_reduce_56,
 1, 76, :_reduce_none,
 2, 76, :_reduce_58,
 5, 77, :_reduce_59,
 4, 77, :_reduce_60,
 1, 78, :_reduce_none,
 3, 78, :_reduce_62,
 3, 67, :_reduce_63,
 1, 80, :_reduce_none,
 3, 80, :_reduce_65,
 1, 82, :_reduce_none,
 3, 82, :_reduce_67,
 3, 81, :_reduce_68,
 1, 79, :_reduce_none,
 1, 79, :_reduce_none,
 1, 79, :_reduce_none,
 1, 79, :_reduce_none,
 1, 79, :_reduce_none,
 1, 79, :_reduce_none,
 1, 79, :_reduce_75,
 2, 50, :_reduce_76,
 6, 52, :_reduce_77,
 5, 52, :_reduce_78,
 6, 53, :_reduce_79,
 5, 53, :_reduce_80,
 6, 54, :_reduce_81,
 5, 54, :_reduce_82,
 1, 85, :_reduce_none,
 2, 85, :_reduce_84,
 1, 86, :_reduce_85,
 1, 86, :_reduce_86,
 0, 87, :_reduce_87,
 1, 83, :_reduce_none,
 3, 83, :_reduce_89,
 3, 83, :_reduce_90,
 1, 88, :_reduce_none,
 3, 88, :_reduce_92,
 3, 89, :_reduce_93,
 1, 89, :_reduce_94,
 1, 84, :_reduce_none,
 2, 84, :_reduce_96,
 1, 58, :_reduce_97,
 3, 68, :_reduce_98,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 0, 62, :_reduce_none,
 1, 62, :_reduce_102 ]

racc_reduce_n = 103

racc_shift_n = 170

racc_action_table = [
    32,    27,    28,   146,    51,    32,    27,    28,    58,    91,
   161,    87,   106,   107,    91,   149,    80,    32,    27,    28,
    25,    39,    32,    27,    28,    87,    39,   145,   -69,     7,
    46,    39,    85,     3,     7,    46,    50,    40,     3,     7,
    44,    51,    40,    39,     7,    44,   122,    46,    39,   123,
     3,     7,    46,    39,    40,     3,     7,    44,    39,    40,
    93,     7,    44,    32,    27,    28,     7,    85,    32,    27,
    28,    39,   135,    50,    97,    49,    27,    28,   134,     7,
    32,    27,    28,   -70,    91,    32,    27,    28,   125,    39,
   127,    98,   -70,    46,    39,   -73,     3,     7,    46,    82,
    40,     3,    65,    44,   130,    40,    39,   131,    44,    87,
    46,    39,   103,     3,     7,    46,    97,    40,     3,     7,
    44,   136,    40,   137,    94,    44,    32,    27,    28,   -74,
   104,    32,    27,    28,   106,   107,   -72,    81,   144,    93,
    79,   -72,   -71,   152,    27,    28,    74,    97,     7,    27,
    28,    59,    39,   148,    49,    48,    46,    39,   -69,     3,
     7,    46,   162,    40,     3,     7,    44,    47,    40,    39,
    29,    44,   -71,    46,    39,    25,     3,     7,    46,    23,
    40,     3,     7,    44,   141,    40,    27,    28,    44,   nil,
   nil,    27,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    27,    28,   nil,   114,   nil,    27,    28,
   nil,    39,   nil,   nil,   nil,    46,    39,   nil,     3,     7,
    46,   nil,    40,     3,     7,    44,   nil,    40,    39,   nil,
    44,   169,    46,    39,   nil,     3,     7,    46,   nil,    40,
     3,     7,    44,   nil,    40,   nil,   151,    44,   nil,     6,
     9,   nil,    13,    15,   nil,    19,   nil,   nil,   nil,     3,
     7,   158,    11,   nil,     6,     9,    20,    13,    15,   nil,
    19,   nil,   nil,   nil,     3,     7,   164,    11,   nil,     6,
     9,    20,    13,    15,   nil,    19,   nil,   nil,   nil,     3,
     7,   165,    11,   nil,     6,     9,    20,    13,    15,   nil,
    19,   nil,   nil,   nil,     3,     7,   168,    11,   nil,     6,
     9,    20,    13,    15,   nil,    19,   nil,   nil,   nil,     3,
     7,   139,    11,   nil,     6,     9,    20,    13,    15,   nil,
    19,   nil,   nil,   nil,     3,     7,   154,    11,   nil,     6,
     9,    20,    13,    15,   nil,    19,   nil,   nil,   nil,     3,
     7,   nil,    11,   nil,     6,     9,    20,    13,    15,   nil,
    19,   nil,   nil,   nil,     3,     7,   nil,    11,   nil,     6,
     9,    20,    13,    15,   nil,    19,   nil,   nil,   nil,     3,
     7,   nil,    11,   nil,     6,     9,    20,    13,    15,   nil,
    19,   nil,   nil,   nil,     3,     7,   nil,    11,   nil,   nil,
   nil,    20 ]

racc_action_check = [
    47,    47,    47,   118,    19,   105,   105,   105,    20,   121,
   143,    98,   143,   143,    54,   121,    35,    80,    80,    80,
    35,    20,    32,    32,    32,    49,    47,   118,    35,    20,
    47,   105,    48,    47,    47,   105,    19,    47,   105,   105,
    47,    52,   105,    80,    74,   105,    84,    80,    32,    85,
    80,    80,    32,    91,    80,    32,    32,    80,    82,    32,
    87,    91,    32,    94,    94,    94,    82,    52,    25,    25,
    25,    58,    99,    52,    88,    43,     6,     6,    99,    58,
    11,    11,    11,    43,    92,   136,   136,   136,    89,    94,
    92,    73,    70,    94,    25,    45,    94,    94,    25,    44,
    94,    25,    25,    94,    95,    25,    11,    96,    25,    97,
    11,   136,    75,    11,    11,   136,    68,    11,   136,   136,
    11,   101,   136,   102,    67,   136,    93,    93,    93,    41,
    78,   141,   141,   141,    78,    78,    37,    36,   116,    65,
    33,    64,    30,   124,    81,    81,    29,   133,   135,   120,
   120,    23,    93,   120,    17,    15,    93,   141,    63,    93,
    93,   141,   145,    93,   141,   141,    93,    13,   141,    81,
     9,   141,    60,    81,   120,     4,    81,    81,   120,     1,
    81,   120,   120,    81,   110,   120,   146,   146,   120,   nil,
   nil,   114,   114,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    79,    79,   nil,    79,   nil,   160,   160,
   nil,   146,   nil,   nil,   nil,   146,   114,   nil,   146,   146,
   114,   nil,   146,   114,   114,   146,   nil,   114,    79,   nil,
   114,   167,    79,   160,   nil,    79,    79,   160,   nil,    79,
   160,   160,    79,   nil,   160,   nil,   122,   160,   nil,   167,
   167,   nil,   167,   167,   nil,   167,   nil,   nil,   nil,   167,
   167,   138,   167,   nil,   122,   122,   167,   122,   122,   nil,
   122,   nil,   nil,   nil,   122,   122,   150,   122,   nil,   138,
   138,   122,   138,   138,   nil,   138,   nil,   nil,   nil,   138,
   138,   153,   138,   nil,   150,   150,   138,   150,   150,   nil,
   150,   nil,   nil,   nil,   150,   150,   162,   150,   nil,   153,
   153,   150,   153,   153,   nil,   153,   nil,   nil,   nil,   153,
   153,   103,   153,   nil,   162,   162,   153,   162,   162,   nil,
   162,   nil,   nil,   nil,   162,   162,   125,   162,   nil,   103,
   103,   162,   103,   103,   nil,   103,   nil,   nil,   nil,   103,
   103,   nil,   103,   nil,   125,   125,   103,   125,   125,   nil,
   125,   nil,   nil,   nil,   125,   125,   nil,   125,   nil,     2,
     2,   125,     2,     2,   nil,     2,   nil,   nil,   nil,     2,
     2,   nil,     2,   nil,     0,     0,     2,     0,     0,   nil,
     0,   nil,   nil,   nil,     0,     0,   nil,     0,   nil,   nil,
   nil,     0 ]

racc_action_pointer = [
   359,   179,   344,   nil,   169,   nil,    73,   nil,   nil,   134,
   nil,    78,   nil,   154,   nil,   119,   nil,   148,   nil,     0,
    -7,   nil,   nil,   151,   nil,    66,   nil,   nil,   nil,   131,
   128,   nil,    20,   126,   nil,    14,   131,   122,   nil,   nil,
   nil,   115,   nil,    69,    84,    81,   nil,    -2,     2,   -11,
   nil,   nil,    37,   nil,     4,   nil,   nil,   nil,    43,   nil,
   158,   nil,   nil,   144,   127,   130,   nil,    87,   106,   nil,
    78,   nil,   nil,    57,     8,   106,   nil,   nil,   125,   200,
    15,   141,    30,   nil,    40,    13,   nil,    51,    64,    82,
   nil,    25,    74,   124,    61,    97,   100,    73,   -25,    62,
   nil,   108,   107,   314,   nil,     3,   nil,   nil,   nil,   nil,
   175,   nil,   nil,   nil,   188,   nil,   133,   nil,    -7,   nil,
   146,    -1,   239,   nil,   136,   329,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   137,   nil,   112,    83,   nil,   254,   nil,
   nil,   129,   nil,     3,   nil,   156,   183,   nil,   nil,   nil,
   269,   nil,   nil,   284,   nil,   nil,   nil,   nil,   nil,   nil,
   205,   nil,   299,   nil,   nil,   nil,   nil,   224,   nil,   nil ]

racc_action_default = [
  -103,  -103,    -1,   -27,  -103,    -2,  -103,   -26,    -4,  -103,
    -5,  -103,    -6,  -103,    -7,  -103,    -8,  -103,    -9,  -103,
  -103,   -10,   -11,  -103,    -3,   -35,   -76,   -52,   -53,   -87,
   -41,   -45,  -103,  -103,   -48,   -42,  -103,   -47,   -46,   -97,
   -75,   -44,   -49,   -43,  -103,   -50,   -54,  -103,   -87,   -35,
   -85,   -86,   -87,   -83,   -13,   -14,   -16,   -17,  -103,   170,
   -28,   -31,   -33,   -29,   -32,   -26,   -36,   -24,  -101,   -74,
   -30,   -73,   -22,  -103,   -87,  -103,   -88,   -39,  -103,  -103,
  -103,  -103,  -103,   -34,  -103,  -103,   -95,  -103,  -101,  -103,
   -84,  -103,  -103,  -103,   -25,  -103,  -103,  -102,   -35,  -103,
   -91,   -94,  -103,  -103,   -98,  -103,   -99,  -100,   -71,   -69,
  -103,   -72,   -63,   -64,  -103,   -70,  -103,   -57,  -103,   -61,
  -103,  -103,  -103,   -96,  -103,  -103,   -15,   -12,   -38,   -23,
   -18,   -19,   -37,  -101,   -90,  -103,  -103,   -89,  -103,   -78,
   -40,  -103,   -66,  -103,   -55,  -103,  -103,   -58,   -56,   -51,
  -103,   -80,   -20,  -103,   -82,   -21,   -92,   -93,   -77,   -68,
  -103,   -65,  -103,   -62,   -79,   -81,   -67,  -103,   -60,   -59 ]

racc_goto_table = [
    24,     2,    26,    35,   105,    96,    68,   113,    76,   132,
   117,    53,    56,   110,    78,   119,   112,    63,    61,    54,
    38,    60,    71,    72,    35,   124,    62,    84,   120,   143,
    88,    89,   100,    75,    95,    52,    67,   126,    99,    35,
     1,    38,   142,   nil,    90,   nil,   nil,   nil,   110,   147,
    56,   nil,   nil,   102,   119,   nil,    38,    92,   nil,   nil,
    57,   nil,   nil,   nil,   nil,    64,   101,   nil,   nil,   160,
   155,   109,    35,   109,    56,   108,    71,   108,    71,   133,
   163,   121,   nil,    56,   nil,    35,    63,    61,   166,    38,
    60,    71,   129,   156,   110,    62,   nil,    35,    57,    43,
   nil,   nil,    38,   nil,   138,   nil,   109,   nil,   nil,   nil,
   108,    71,   109,    70,    38,   nil,   108,    71,    69,   111,
    43,   111,    57,   150,   nil,   nil,   153,   101,    35,   nil,
   nil,    57,   nil,    35,    64,    43,    24,    36,   109,   nil,
   nil,   nil,   108,    71,   nil,    38,   nil,   nil,    24,   nil,
    38,    24,   109,   nil,   111,   nil,   108,    71,    77,   nil,
   111,   nil,   nil,   167,   nil,    24,   nil,   115,    43,   115,
   nil,   nil,    69,    83,    69,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    70,   nil,   nil,   nil,   111,    69,   nil,   nil,
   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,
   111,   nil,   115,   nil,   nil,   nil,   116,    69,   115,   nil,
   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,   nil,   128,
   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,    43,
   nil,   140,   nil,   nil,   115,   nil,   nil,   nil,   nil,    69,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   115,   nil,
   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   157,   nil,   nil,   nil,   nil,   159 ]

racc_goto_check = [
     3,     2,    23,    14,    29,    19,    18,    38,    44,    27,
    34,    43,    14,    36,    28,    36,    37,    14,    24,    12,
     4,    23,    32,    21,    14,    19,    25,    41,    33,    39,
    18,    41,    46,    40,    17,    42,    16,    13,    45,    14,
     1,     4,    38,   nil,    43,   nil,   nil,   nil,    36,    34,
    14,   nil,   nil,    44,    36,   nil,     4,    12,   nil,   nil,
    15,   nil,   nil,   nil,   nil,    15,    14,   nil,   nil,    29,
    19,    14,    14,    14,    14,    23,    32,    23,    32,    18,
    36,    12,   nil,    14,   nil,    14,    14,    24,    38,     4,
    23,    32,    21,    46,    36,    25,   nil,    14,    15,    20,
   nil,   nil,     4,   nil,     2,   nil,    14,   nil,   nil,   nil,
    23,    32,    14,    20,     4,   nil,    23,    32,    30,    15,
    20,    15,    15,     2,   nil,   nil,     2,    14,    14,   nil,
   nil,    15,   nil,    14,    15,    20,     3,    26,    14,   nil,
   nil,   nil,    23,    32,   nil,     4,   nil,   nil,     3,   nil,
     4,     3,    14,   nil,    15,   nil,    23,    32,    26,   nil,
    15,   nil,   nil,     2,   nil,     3,   nil,    20,    20,    20,
   nil,   nil,    30,    26,    30,   nil,   nil,   nil,   nil,   nil,
   nil,    20,    20,   nil,   nil,   nil,    15,    30,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,    20,   nil,   nil,   nil,    26,    30,    20,   nil,
   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,    20,
   nil,    26,   nil,   nil,    20,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    40,     1,    -2,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -1,   -54,    -8,    40,    11,   -33,   -19,   -63,
    88,    -2,   nil,    -4,    -7,     1,   126,   -88,   -18,   -74,
    93,   nil,    -3,   -53,   -71,   nil,   -66,   -63,   -72,   -85,
     4,   -21,    16,    -8,   -21,   -36,   -42 ]

racc_goto_default = [
   nil,   nil,   nil,     5,     8,    10,    12,    14,    16,    18,
    21,    22,   nil,    55,     4,    37,   nil,   nil,   nil,   nil,
    17,   nil,    73,    30,    31,    34,   nil,    66,   nil,   nil,
    41,    42,    45,   nil,   nil,   118,    33,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    86,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :QMARK => 14,
 :LPAREN => 15,
 :RPAREN => 16,
 :ISEQUAL => 17,
 :GREATEREQUAL => 18,
 :GREATERTHAN => 19,
 :LESSTHAN => 20,
 :LESSEQUAL => 21,
 :NOTEQUAL => 22,
 :IF => 23,
 :ELSE => 24,
 :IMPORT => 25,
 :DEFINE => 26,
 :ELSIF => 27,
 :VARIABLE => 28,
 :CLASS => 29,
 :INHERITS => 30,
 :NODE => 31,
 :BOOLEAN => 32,
 :DOT => 33,
 :COLON => 34,
 :TYPE => 35,
 :NAME => 36,
 :SEMIC => 37,
 :CASE => 38,
 :DEFAULT => 39,
 :INCLUDE => 40,
 :TAG => 41,
 :FUNCTION => 42 }

racc_use_result_var = true

racc_nt_base = 43

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'LESSEQUAL',
'NOTEQUAL',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'DOT',
'COLON',
'TYPE',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'INCLUDE',
'TAG',
'FUNCTION',
'$start',
'program',
'statements',
'statement',
'object',
'assignment',
'casestatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'classnames',
'classname',
'name',
'variable',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'quotedtext',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'funcrvalue',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'hostnames',
'hostname',
'nothing',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 25
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end
   result
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'grammar.ra', 39
  def _reduce_3( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

module_eval <<'.,.,', 'grammar.ra', 60
  def _reduce_12( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 70
  def _reduce_13( val, _values, result )
    args = aryfy(val[1])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

 # reduce 14 omitted

module_eval <<'.,.,', 'grammar.ra', 89
  def _reduce_15( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 123
  def _reduce_18( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.instance_of?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 137
  def _reduce_19( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type
    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 149
  def _reduce_20( val, _values, result )
    # a template setting for a type
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 157
  def _reduce_21( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 22 omitted

module_eval <<'.,.,', 'grammar.ra', 171
  def _reduce_23( val, _values, result )
    if val[0].instance_of?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 24 omitted

 # reduce 25 omitted

module_eval <<'.,.,', 'grammar.ra', 182
  def _reduce_26( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 190
  def _reduce_27( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

module_eval <<'.,.,', 'grammar.ra', 213
  def _reduce_34( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 222
  def _reduce_35( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 222
  def _reduce_36( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 235
  def _reduce_37( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 250
  def _reduce_38( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 39 omitted

module_eval <<'.,.,', 'grammar.ra', 263
  def _reduce_40( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 41 omitted

 # reduce 42 omitted

 # reduce 43 omitted

 # reduce 44 omitted

 # reduce 45 omitted

 # reduce 46 omitted

 # reduce 47 omitted

 # reduce 48 omitted

 # reduce 49 omitted

 # reduce 50 omitted

module_eval <<'.,.,', 'grammar.ra', 286
  def _reduce_51( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :rvalue
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 294
  def _reduce_52( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 300
  def _reduce_53( val, _values, result )
    result = AST::FlatString.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 308
  def _reduce_54( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 318
  def _reduce_55( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 335
  def _reduce_56( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => options,
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 57 omitted

module_eval <<'.,.,', 'grammar.ra', 349
  def _reduce_58( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 359
  def _reduce_59( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 371
  def _reduce_60( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 385
  def _reduce_62( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 395
  def _reduce_63( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :values => val[2]
    )
   result
  end
.,.,

 # reduce 64 omitted

module_eval <<'.,.,', 'grammar.ra', 397
  def _reduce_65( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 66 omitted

module_eval <<'.,.,', 'grammar.ra', 412
  def _reduce_67( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 422
  def _reduce_68( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 69 omitted

 # reduce 70 omitted

 # reduce 71 omitted

 # reduce 72 omitted

 # reduce 73 omitted

 # reduce 74 omitted

module_eval <<'.,.,', 'grammar.ra', 436
  def _reduce_75( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 498
  def _reduce_76( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = AST::ASTArray.new(
        :file => @lexer.file,
        :line => @lexer.line
    )
    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end
        files = Dir.glob(pat)
        if files.size == 0
            files = Dir.glob(pat + ".pp")
            if files.size == 0
                raise Puppet::ImportError.new("No file(s) found for import " + 
                                              "of '#{pat}'")
            end
        end
        files.each { |file|
            parser = Puppet::Parser::Parser.new()
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)

            unless file =~ /^#{File::SEPARATOR}/
                file = File.join(dir, file)
            end
            begin
                parser.file = file
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
#                result = AST::ASTArray.new(
#                    :file => @lexer.file,
#                    :line => @lexer.line
#                )
                next
            end
            # push the results into the main result array
            #result.push parser.parse
            parser.parse.each do |child|
                result.push child
            end
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 509
  def _reduce_77( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 522
  def _reduce_78( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 539
  def _reduce_79( val, _values, result )
        #:args => val[2],
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 556
  def _reduce_80( val, _values, result )
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 577
  def _reduce_81( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :names => val[1],
        :keyword => val[0],
        :code => val[4]
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 600
  def _reduce_82( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :names => val[1],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

 # reduce 83 omitted

module_eval <<'.,.,', 'grammar.ra', 614
  def _reduce_84( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0]
        result.push val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 622
  def _reduce_85( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 628
  def _reduce_86( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 636
  def _reduce_87( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 88 omitted

module_eval <<'.,.,', 'grammar.ra', 641
  def _reduce_89( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 652
  def _reduce_90( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 91 omitted

module_eval <<'.,.,', 'grammar.ra', 666
  def _reduce_92( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 674
  def _reduce_93( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 681
  def _reduce_94( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 95 omitted

module_eval <<'.,.,', 'grammar.ra', 690
  def _reduce_96( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 699
  def _reduce_97( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 711
  def _reduce_98( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 99 omitted

 # reduce 100 omitted

 # reduce 101 omitted

module_eval <<'.,.,', 'grammar.ra', 716
  def _reduce_102( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
