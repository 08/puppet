#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    # this exception class already has a :stack accessor
    class ParseError < Puppet::Error
        attr_accessor :line, :file
    end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..idad2595a6e0', 'grammar.ra', 651
attr_writer :stack
attr_reader :file

def file=(file)
    if self.stack.include?(file)
        raise Puppet::ImportError.new("Import loop detected")
    else
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    if Puppet[:debug]
        @yydebut = true
    end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "an error was found"

    if Puppet[:debug]
        puts stack.inspect
        puts stack
    end
    if @lexer.file
        error += (" in '%s'" % @lexer.file)
    end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.stack = caller
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        except.stack ||= except.stack
        if Puppet[:debug]
            puts except.stack
        end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        except.stack ||= caller
        if Puppet[:debug]
            puts except.stack
        end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.stack = caller
        if Puppet[:debug]
            puts caller
        end
        raise error
    end
end

def stack
    if defined? @stack and ! @stack.nil?
        if @lexer.file
            return [@stack,@lexer.file].flatten
        else
            return @stack
        end
    else
        if @lexer.file
            return [@lexer.file]
        else
            return []
        end
    end
end

def string=(string)
    @lexer.string = string
end
..end grammar.ra modeval..idad2595a6e0

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 40, :_reduce_1,
 1, 41, :_reduce_none,
 2, 41, :_reduce_3,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 5, 43, :_reduce_10,
 5, 43, :_reduce_11,
 5, 43, :_reduce_12,
 3, 55, :_reduce_13,
 1, 50, :_reduce_none,
 3, 50, :_reduce_15,
 0, 51, :_reduce_none,
 1, 51, :_reduce_none,
 1, 49, :_reduce_18,
 1, 54, :_reduce_19,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 3, 44, :_reduce_25,
 0, 52, :_reduce_26,
 1, 52, :_reduce_27,
 3, 52, :_reduce_28,
 3, 62, :_reduce_29,
 1, 63, :_reduce_none,
 3, 63, :_reduce_31,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 57, :_reduce_41,
 1, 65, :_reduce_42,
 4, 66, :_reduce_43,
 5, 45, :_reduce_44,
 1, 67, :_reduce_none,
 2, 67, :_reduce_46,
 5, 68, :_reduce_47,
 1, 69, :_reduce_none,
 3, 69, :_reduce_49,
 3, 58, :_reduce_50,
 1, 71, :_reduce_none,
 3, 71, :_reduce_52,
 1, 73, :_reduce_none,
 3, 73, :_reduce_54,
 3, 72, :_reduce_55,
 1, 70, :_reduce_56,
 1, 70, :_reduce_57,
 1, 70, :_reduce_58,
 1, 70, :_reduce_59,
 2, 46, :_reduce_60,
 6, 47, :_reduce_61,
 7, 48, :_reduce_62,
 0, 76, :_reduce_63,
 1, 74, :_reduce_none,
 3, 74, :_reduce_65,
 3, 74, :_reduce_66,
 1, 77, :_reduce_none,
 3, 77, :_reduce_68,
 3, 78, :_reduce_69,
 1, 78, :_reduce_70,
 1, 75, :_reduce_none,
 2, 75, :_reduce_72,
 1, 59, :_reduce_73,
 3, 60, :_reduce_74,
 1, 64, :_reduce_none,
 1, 64, :_reduce_none,
 0, 53, :_reduce_none,
 1, 53, :_reduce_78 ]

racc_reduce_n = 79

racc_shift_n = 134

racc_action_table = [
    76,   110,    79,    98,    48,    76,    89,    76,    91,    97,
   108,    70,    76,    93,    76,    71,    72,    88,   124,    76,
    71,    72,    91,    22,    24,   109,    88,    47,    22,    24,
    36,    74,    75,    22,    24,    78,    74,    75,    74,    75,
    78,    99,    78,    74,    75,    74,    75,    78,    27,    78,
    74,    75,    31,    27,    78,     2,     5,    31,    27,   100,
     2,     5,    31,    22,    24,     2,     5,     5,    22,    24,
    22,    24,    63,    22,    24,   103,    62,   106,    41,    22,
    24,    40,    63,    46,    22,    24,    87,   114,    27,    22,
    24,    63,   116,    27,    46,    27,    53,    31,    27,    31,
     2,     5,     2,     5,    27,   133,     5,   118,    31,    27,
   122,     2,     5,    31,    27,   119,     2,     5,    31,     5,
    41,     2,     5,     4,     7,   132,    11,    13,     4,     7,
    40,    11,    13,     2,     5,    38,     9,    69,     2,     5,
   126,     9,    37,     4,     7,   128,    11,    13,     4,     7,
    36,    11,    13,     2,     5,    35,     9,    20,     2,     5,
    63,     9,     4,     7,    19,    11,    13,     4,     7,   117,
    11,    13,     2,     5,   nil,     9,   nil,     2,     5,   nil,
     9,     4,     7,   nil,    11,    13,     4,     7,   nil,    11,
    13,     2,     5,   nil,     9,   nil,     2,     5,   nil,     9 ]

racc_action_check = [
    46,    85,    46,    65,    30,    48,    58,    83,    60,    65,
    83,    45,   110,    61,   125,    45,    45,    63,   105,    79,
   105,   105,    64,   103,   103,    85,    53,    29,     9,     9,
    29,    46,    46,    73,    73,    46,    48,    48,    83,    83,
    48,    67,    83,   110,   110,   125,   125,   110,   103,   125,
    79,    79,   103,     9,    79,   103,   103,     9,    73,    68,
     9,     9,    73,    36,    36,    73,    73,    41,    99,    99,
    22,    22,    40,    89,    89,    77,    38,    82,    37,    35,
    35,    34,    87,    55,    88,    88,    51,    90,    36,    47,
    47,    91,    92,    99,    26,    22,    36,    99,    89,    22,
    99,    99,    22,    22,    35,   131,    89,    94,    35,    88,
   101,    35,    35,    88,    47,    96,    88,    88,    47,    98,
    20,    47,    47,   131,   131,   129,   131,   131,   101,   101,
    17,   101,   101,   131,   131,    14,   131,    42,   101,   101,
   109,   101,    13,   129,   129,   111,   129,   129,   118,   118,
    12,   118,   118,   129,   129,    11,   129,     7,   118,   118,
   128,   118,    69,    69,     4,    69,    69,    15,    15,    93,
    15,    15,    69,    69,   nil,    69,   nil,    15,    15,   nil,
    15,   126,   126,   nil,   126,   126,     0,     0,   nil,     0,
     0,   126,   126,   nil,   126,   nil,     0,     0,   nil,     0 ]

racc_action_pointer = [
   162,   nil,   nil,   nil,   161,   nil,   nil,   122,   nil,    26,
   nil,   143,   145,   107,   135,   143,   nil,   125,   nil,   nil,
   106,   nil,    68,   nil,   nil,   nil,    81,   nil,   nil,    25,
    -1,   nil,   nil,   nil,    76,    77,    61,    64,    76,   nil,
    37,    32,   132,   nil,   nil,     7,    -3,    87,     2,   nil,
   nil,    53,   nil,    18,   nil,    70,   nil,   nil,   -30,   nil,
    -1,   -16,   nil,     9,    13,    -6,   nil,    29,    44,   138,
   nil,   nil,   nil,    31,   nil,   nil,   nil,    67,   nil,    16,
   nil,   nil,    73,     4,   nil,    -8,   nil,    47,    82,    71,
    81,    56,    86,   134,   102,   nil,   109,   nil,    84,    66,
   nil,   104,   nil,    21,   nil,    12,   nil,   nil,   nil,   135,
     9,   136,   nil,   nil,   nil,   nil,   nil,   nil,   124,   nil,
   nil,   nil,   nil,   nil,   nil,    11,   157,   nil,   125,   119,
   nil,    99,   nil,   nil ]

racc_action_default = [
   -79,    -5,   -19,    -6,   -79,   -18,    -7,   -79,    -8,   -79,
    -9,   -79,   -79,   -79,   -79,    -1,    -2,   -79,    -4,   -60,
   -63,   -40,   -79,   -32,   -41,   -36,   -38,   -73,   -39,   -33,
   -79,   -42,   -37,   -35,   -34,   -79,   -26,   -63,   -79,    -3,
   -26,   -63,   -79,   -64,   -30,   -79,   -79,   -79,   -79,   -25,
   -14,   -79,   -20,   -18,   -22,   -23,   -24,   -21,   -16,   -27,
   -77,   -63,   134,   -79,   -77,   -79,   -67,   -70,   -79,   -79,
   -74,   -75,   -76,   -79,   -57,   -56,   -58,   -79,   -59,   -79,
   -50,   -51,   -79,   -79,   -45,   -79,   -48,   -26,   -79,   -17,
   -79,   -78,   -79,   -79,   -79,   -71,   -79,   -66,   -79,   -79,
   -65,   -79,   -31,   -79,   -53,   -79,   -43,   -46,   -44,   -79,
   -79,   -13,   -29,   -15,   -10,   -28,   -11,   -72,   -79,   -12,
   -68,   -69,   -61,   -55,   -52,   -79,   -79,   -49,   -79,   -79,
   -54,   -79,   -62,   -47 ]

racc_goto_table = [
    15,    39,    29,    73,    32,    81,    50,    30,    86,    34,
    66,    52,    54,   115,    84,    29,    68,    32,   105,    56,
    44,    55,    34,    80,    42,    58,    90,    60,    29,    57,
    32,    64,    45,    49,    67,    34,    95,    94,   104,    83,
    29,    61,    32,    86,    92,    82,    65,    34,    96,   107,
   115,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   113,
   nil,   nil,   nil,   125,    52,    54,    29,   120,    32,   101,
   127,   102,    56,    34,    55,   nil,   nil,   nil,   111,   nil,
   nil,    29,    57,    32,   130,   nil,   112,    39,    34,   nil,
   nil,    67,    29,   nil,    32,   nil,    29,   121,    32,    34,
   nil,   123,   nil,    34,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    39,   nil,    39,   129,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   131 ]

racc_goto_check = [
     2,     3,    10,    25,     4,    33,    16,    22,    31,    15,
    39,    18,    19,    23,    29,    10,    37,     4,    34,    21,
    22,    20,    15,    32,    35,    11,    12,    13,    10,    10,
     4,    13,    24,    22,    10,    15,    37,    36,    33,    28,
    10,    35,     4,    31,    14,    22,    38,    15,    14,    29,
    23,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,
   nil,   nil,   nil,    25,    18,    19,    10,    39,     4,     2,
    31,    22,    21,    15,    20,   nil,   nil,   nil,    13,   nil,
   nil,    10,    10,     4,    33,   nil,    22,     3,    15,   nil,
   nil,    10,    10,   nil,     4,   nil,    10,    22,     4,    15,
   nil,    22,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,    51,     0,   -14,    -5,   nil,   nil,   nil,   nil,   nil,
    -7,   -11,   -32,    -9,   -16,     0,   -30,   nil,   -25,   -24,
   -15,   -17,    -2,   -78,    10,   -42,   nil,   nil,    -9,   -34,
   nil,   -40,   -23,   -41,   -61,     4,   -24,   -25,     5,   -31 ]

racc_goto_default = [
   nil,   nil,   nil,    16,    18,     1,     3,     6,     8,    10,
    12,   nil,   nil,   nil,   nil,    17,   nil,    51,    23,    25,
    26,    28,   nil,    59,   nil,   nil,    33,    21,   nil,   nil,
    85,    77,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :QTEXT => 3,
 :RBRACK => 4,
 :LBRACE => 5,
 :RBRACE => 6,
 :SYMBOL => 7,
 :FARROW => 8,
 :COMMA => 9,
 :TRUE => 10,
 :FALSE => 11,
 :EQUALS => 12,
 :QMARK => 13,
 :LPAREN => 14,
 :RPAREN => 15,
 :ISEQUAL => 16,
 :GREATEREQUAL => 17,
 :GREATERTHAN => 18,
 :LESSTHAN => 19,
 :LESSEQUAL => 20,
 :NOTEQUAL => 21,
 :IF => 22,
 :ELSE => 23,
 :IMPORT => 24,
 :DEFINE => 25,
 :ELSIF => 26,
 :VARIABLE => 27,
 :CLASS => 28,
 :INHERITS => 29,
 :NODE => 30,
 :BOOLEAN => 31,
 :DOT => 32,
 :COLON => 33,
 :TYPE => 34,
 :NAME => 35,
 :SEMIC => 36,
 :CASE => 37,
 :DEFAULT => 38 }

racc_use_result_var = true

racc_nt_base = 39

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'QTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'LESSEQUAL',
'NOTEQUAL',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'DOT',
'COLON',
'TYPE',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'$start',
'program',
'statements',
'statement',
'object',
'assignment',
'casestatement',
'import',
'definition',
'hostclass',
'name',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'quotedtext',
'selector',
'variable',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'nothing',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 40
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end

    # this is mainly so we can test the parser separately from the
    # interpreter
    if Puppet[:parseonly]
        begin
            if Puppet[:debug]
                puts result.tree(0)
            end
        rescue NoMethodError => detail
            Puppet.err detail
            #exit(78)
        end
        #require 'puppet/parser/interpreter'
        #result = Puppet::Server.new(result)
    end
   result
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'grammar.ra', 54
  def _reduce_3( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

module_eval <<'.,.,', 'grammar.ra', 93
  def _reduce_10( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.is_a?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.is_a?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 116
  def _reduce_11( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type

    # make a unique name for bookkeeping purposes
    name = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => [val[0].value, "-", val[0].object_id].join('')
    )

    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => name,
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 129
  def _reduce_12( val, _values, result )
    # a template setting for a type
    if val[0].is_a?(AST::ASTArray)
        Puppet.notice "invalid type"
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 137
  def _reduce_13( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 14 omitted

module_eval <<'.,.,', 'grammar.ra', 151
  def _reduce_15( val, _values, result )
    if val[0].is_a?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 162
  def _reduce_18( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 170
  def _reduce_19( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 20 omitted

 # reduce 21 omitted

 # reduce 22 omitted

 # reduce 23 omitted

 # reduce 24 omitted

module_eval <<'.,.,', 'grammar.ra', 192
  def _reduce_25( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 201
  def _reduce_26( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 201
  def _reduce_27( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 214
  def _reduce_28( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 229
  def _reduce_29( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 30 omitted

module_eval <<'.,.,', 'grammar.ra', 242
  def _reduce_31( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 32 omitted

 # reduce 33 omitted

 # reduce 34 omitted

 # reduce 35 omitted

 # reduce 36 omitted

 # reduce 37 omitted

 # reduce 38 omitted

 # reduce 39 omitted

 # reduce 40 omitted

module_eval <<'.,.,', 'grammar.ra', 260
  def _reduce_41( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 268
  def _reduce_42( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 278
  def _reduce_43( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 295
  def _reduce_44( val, _values, result )
    options = val[3]
    unless options.is_a?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => val[3],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 45 omitted

module_eval <<'.,.,', 'grammar.ra', 309
  def _reduce_46( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 319
  def _reduce_47( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

 # reduce 48 omitted

module_eval <<'.,.,', 'grammar.ra', 333
  def _reduce_49( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 434
  def _reduce_50( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 51 omitted

module_eval <<'.,.,', 'grammar.ra', 436
  def _reduce_52( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 53 omitted

module_eval <<'.,.,', 'grammar.ra', 451
  def _reduce_54( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 461
  def _reduce_55( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 469
  def _reduce_56( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_57( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 483
  def _reduce_58( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 490
  def _reduce_59( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 515
  def _reduce_60( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    path = @lexer.file.sub(%r{[^/]+$},val[1])
    parser = Puppet::Parser::Parser.new()
    parser.stack = self.stack
    Puppet.debug("importing %s" % path)
    noimport = false
    begin
        parser.file = path
    rescue Puppet::ImportError
        Puppet.warning("Importing %s would result in an import loop" % path)
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line
        )
        noimport = true
    end
    unless noimport
        result = parser.parse
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 525
  def _reduce_61( val, _values, result )
    result = AST::CompDef.new(
        :name => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 536
  def _reduce_62( val, _values, result )
    result = AST::ClassDef.new(
        :name => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :parentclass => val[3],
        :file => @lexer.file,
        :line => @lexer.line,
        :code => val[5]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 551
  def _reduce_63( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 64 omitted

module_eval <<'.,.,', 'grammar.ra', 556
  def _reduce_65( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 567
  def _reduce_66( val, _values, result )
    if val[1].is_a?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0]]
        )
    end
   result
  end
.,.,

 # reduce 67 omitted

module_eval <<'.,.,', 'grammar.ra', 581
  def _reduce_68( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 589
  def _reduce_69( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 596
  def _reduce_70( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 605
  def _reduce_72( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 614
  def _reduce_73( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 623
  def _reduce_74( val, _values, result )
    if val[1].is_a?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new
        result.push val[1]
    end
   result
  end
.,.,

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

module_eval <<'.,.,', 'grammar.ra', 628
  def _reduce_78( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
