#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parsedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..idbeb2462db7', 'grammar.ra', 772
require 'puppet/parser/functions'

attr_reader :file
attr_accessor :files

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = AST::ASTArray.new(
            :children => args
        )
    end

    return result
end

def file=(file)
    unless FileTest.exists?(file)
        unless file =~ /\.pp$/
            file = file + ".pp"
        end
        unless FileTest.exists?(file)
            raise Puppet::Error, "Could not find file %s" % file
        end
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::ParsedFile.new(file)
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
    #if Puppet[:debug]
    #    @yydebug = true
    #end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def reparse?
    @files.detect { |file|
        file.changed?
    }
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..idbeb2462db7

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 45, :_reduce_1,
 1, 46, :_reduce_none,
 2, 46, :_reduce_3,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 4, 54, :_reduce_14,
 2, 54, :_reduce_15,
 1, 58, :_reduce_none,
 3, 58, :_reduce_17,
 1, 59, :_reduce_none,
 1, 59, :_reduce_none,
 5, 48, :_reduce_20,
 5, 48, :_reduce_21,
 5, 48, :_reduce_22,
 2, 49, :_reduce_23,
 3, 50, :_reduce_24,
 4, 67, :_reduce_25,
 1, 62, :_reduce_none,
 3, 62, :_reduce_27,
 0, 63, :_reduce_none,
 1, 63, :_reduce_none,
 1, 60, :_reduce_30,
 1, 66, :_reduce_31,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 1, 68, :_reduce_none,
 3, 51, :_reduce_38,
 0, 64, :_reduce_39,
 1, 64, :_reduce_40,
 3, 64, :_reduce_41,
 3, 73, :_reduce_42,
 1, 74, :_reduce_none,
 3, 74, :_reduce_44,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 4, 78, :_reduce_55,
 1, 69, :_reduce_56,
 1, 69, :_reduce_57,
 1, 76, :_reduce_58,
 4, 77, :_reduce_59,
 5, 52, :_reduce_60,
 1, 79, :_reduce_none,
 2, 79, :_reduce_62,
 5, 80, :_reduce_63,
 4, 80, :_reduce_64,
 1, 81, :_reduce_none,
 3, 81, :_reduce_66,
 3, 70, :_reduce_67,
 1, 83, :_reduce_none,
 3, 83, :_reduce_69,
 1, 85, :_reduce_none,
 3, 85, :_reduce_71,
 3, 84, :_reduce_72,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_79,
 2, 53, :_reduce_80,
 6, 55, :_reduce_81,
 5, 55, :_reduce_82,
 6, 56, :_reduce_83,
 5, 56, :_reduce_84,
 6, 57, :_reduce_85,
 5, 57, :_reduce_86,
 1, 88, :_reduce_none,
 2, 88, :_reduce_88,
 1, 89, :_reduce_89,
 1, 89, :_reduce_90,
 0, 90, :_reduce_91,
 1, 86, :_reduce_none,
 3, 86, :_reduce_93,
 3, 86, :_reduce_94,
 1, 91, :_reduce_none,
 3, 91, :_reduce_96,
 3, 92, :_reduce_97,
 1, 92, :_reduce_98,
 1, 87, :_reduce_none,
 2, 87, :_reduce_100,
 1, 61, :_reduce_101,
 3, 71, :_reduce_102,
 1, 75, :_reduce_none,
 1, 75, :_reduce_none,
 0, 65, :_reduce_none,
 1, 65, :_reduce_106 ]

racc_reduce_n = 107

racc_shift_n = 177

racc_action_table = [
    36,    30,    31,    64,   152,    43,    36,    30,    31,   145,
    50,    43,    26,     9,   126,    36,    30,    31,   -75,     9,
   -74,    36,    30,    31,    64,    96,    43,   100,   151,   -73,
    48,   133,    43,     5,     9,    63,    48,    44,    47,     5,
     9,    43,   -76,    44,    47,    48,    51,    43,     5,     9,
    94,    48,    44,    47,     5,     9,    63,    56,    44,    47,
    36,    30,    31,    43,    30,    31,    36,    30,    31,   127,
    43,     9,   101,    96,   140,    36,    30,    31,     9,   153,
   139,    36,    30,    31,   108,   130,    43,   131,   109,   111,
    48,   107,    43,     5,    83,     9,    48,    44,    47,     5,
     9,    43,   134,    44,    47,    48,    77,    43,     5,     9,
    65,    48,    44,    47,     5,     9,     5,     9,    44,    47,
    36,    30,    31,   137,   138,   101,    36,    30,    31,    75,
   141,   -76,   166,    50,   109,   111,    30,    31,    76,   -74,
   100,   -73,    30,    31,    74,   117,    43,   -75,   -77,    96,
    48,    65,    43,     5,     9,    50,    48,    44,    47,     5,
     9,    43,   156,    44,    47,    48,   159,    43,     5,     9,
   157,    48,    44,    47,     5,     9,    30,    31,    44,    47,
    70,    68,    30,    31,     8,    11,     9,    16,    18,    65,
    23,    30,    31,    94,     5,     9,    53,    13,   -78,    19,
    21,    43,   168,    52,   101,    48,    32,    43,     5,     9,
    91,    48,    44,    47,     5,     9,    43,    27,    44,    47,
    48,    30,    31,     5,     9,   150,    26,    44,    47,     8,
    11,   148,    16,    18,   nil,    23,   nil,   nil,   nil,     5,
     9,   176,    13,   nil,    19,    21,    43,   nil,   nil,   nil,
    48,   nil,   nil,     5,     9,   nil,   nil,    44,    47,     8,
    11,   161,    16,    18,   nil,    23,   nil,   nil,   nil,     5,
     9,   nil,    13,   nil,    19,    21,   nil,   nil,   172,     8,
    11,   nil,    16,    18,   nil,    23,   nil,   nil,   nil,     5,
     9,   nil,    13,   nil,    19,    21,     8,    11,   171,    16,
    18,   nil,    23,   nil,   nil,   nil,     5,     9,   nil,    13,
   nil,    19,    21,   nil,   nil,   175,     8,    11,   nil,    16,
    18,   nil,    23,   nil,   nil,   nil,     5,     9,   nil,    13,
   nil,    19,    21,     8,    11,   143,    16,    18,   nil,    23,
   nil,   nil,   nil,     5,     9,   nil,    13,   nil,    19,    21,
   nil,   nil,   164,     8,    11,   nil,    16,    18,   nil,    23,
   nil,   nil,   nil,     5,     9,   nil,    13,   nil,    19,    21,
     8,    11,   nil,    16,    18,   nil,    23,   nil,   nil,   nil,
     5,     9,   nil,    13,   nil,    19,    21,     8,    11,   nil,
    16,    18,   nil,    23,   nil,   nil,   nil,     5,     9,   nil,
    13,   nil,    19,    21 ]

racc_action_check = [
   127,   127,   127,    23,   123,    56,    52,    52,    52,   115,
    14,    96,    34,    56,    81,    36,    36,    36,    82,    96,
    34,    75,    75,    75,    61,    97,   127,    83,   123,    86,
   127,    97,    52,   127,   127,    23,    52,   127,   127,    52,
    52,    36,    87,    52,    52,    36,    14,    75,    36,    36,
    61,    75,    36,    36,    75,    75,    61,    19,    75,    75,
    50,    50,    50,    77,     8,     8,   141,   141,   141,    88,
    19,    77,    89,   125,   104,    13,    13,    13,    19,   125,
   104,   110,   110,   110,    73,    94,    50,    95,    73,    73,
    50,    71,   141,    50,    50,    70,   141,    50,    50,   141,
   141,    13,    99,   141,   141,    13,    47,   110,    13,    13,
   101,   110,    13,    13,   110,   110,    21,    21,   110,   110,
   100,   100,   100,   102,   103,    67,   145,   145,   145,    42,
   106,    46,   147,    42,   147,   147,   152,   152,    45,    78,
    65,    42,    74,    74,    40,    74,   100,    37,    35,    54,
   100,   126,   145,   100,   100,    60,   145,   100,   100,   145,
   145,   152,   128,   145,   145,   152,   131,    74,   152,   152,
   129,    74,   152,   152,    74,    74,   117,   117,    74,    74,
    32,    27,    76,    76,   131,   131,   140,   131,   131,    26,
   131,   167,   167,    53,   131,   131,    18,   131,    49,   131,
   131,   117,   151,    16,   154,   117,    11,    76,   117,   117,
    51,    76,   117,   117,    76,    76,   167,     4,    76,    76,
   167,   121,   121,   167,   167,   121,     1,   167,   167,     7,
     7,   120,     7,     7,   nil,     7,   nil,   nil,   nil,     7,
     7,   174,     7,   nil,     7,     7,   121,   nil,   nil,   nil,
   121,   nil,   nil,   121,   121,   nil,   nil,   121,   121,   174,
   174,   134,   174,   174,   nil,   174,   nil,   nil,   nil,   174,
   174,   nil,   174,   nil,   174,   174,   nil,   nil,   160,   134,
   134,   nil,   134,   134,   nil,   134,   nil,   nil,   nil,   134,
   134,   nil,   134,   nil,   134,   134,   160,   160,   158,   160,
   160,   nil,   160,   nil,   nil,   nil,   160,   160,   nil,   160,
   nil,   160,   160,   nil,   nil,   168,   158,   158,   nil,   158,
   158,   nil,   158,   nil,   nil,   nil,   158,   158,   nil,   158,
   nil,   158,   158,   168,   168,   107,   168,   168,   nil,   168,
   nil,   nil,   nil,   168,   168,   nil,   168,   nil,   168,   168,
   nil,   nil,   142,   107,   107,   nil,   107,   107,   nil,   107,
   nil,   nil,   nil,   107,   107,   nil,   107,   nil,   107,   107,
   142,   142,   nil,   142,   142,   nil,   142,   nil,   nil,   nil,
   142,   142,   nil,   142,   nil,   142,   142,     0,     0,   nil,
     0,     0,   nil,     0,   nil,   nil,   nil,     0,     0,   nil,
     0,   nil,     0,     0 ]

racc_action_pointer = [
   362,   220,   nil,   nil,   217,   nil,   nil,   204,    61,   nil,
   nil,   170,   nil,    73,     4,   nil,   190,   nil,   160,    42,
   nil,    81,   nil,    -1,   nil,   nil,   153,   181,   nil,   nil,
   nil,   nil,   165,   nil,     6,   134,    13,   133,   nil,   nil,
   130,   nil,   127,   nil,   nil,   132,   117,    91,   nil,   184,
    58,   167,     4,   163,   139,   nil,   -23,   nil,   nil,   nil,
   149,    20,   nil,   nil,   nil,   131,   nil,   115,   nil,   nil,
    59,    85,   nil,    79,   139,    19,   179,    35,   125,   nil,
   nil,   -20,     4,    18,   nil,   nil,    15,    28,    32,    62,
   nil,   nil,   nil,   nil,    49,    81,   -17,    15,   nil,    96,
   118,    74,   116,   108,    64,   nil,   117,   328,   nil,   nil,
    79,   nil,   nil,   nil,   nil,     0,   nil,   173,   nil,   nil,
   226,   218,   nil,    -6,   nil,    63,   115,    -2,   155,   163,
   nil,   159,   nil,   nil,   254,   nil,   nil,   nil,   nil,   nil,
   150,    64,   345,   nil,   nil,   124,   nil,   125,   nil,   nil,
   nil,   196,   133,   nil,   194,   nil,   nil,   nil,   291,   nil,
   271,   nil,   nil,   nil,   nil,   nil,   nil,   188,   308,   nil,
   nil,   nil,   nil,   nil,   234,   nil,   nil ]

racc_action_default = [
  -107,  -107,   -11,   -12,  -107,   -31,   -13,    -1,  -107,   -30,
    -2,  -107,    -4,  -107,  -107,    -5,  -107,    -6,  -107,  -107,
    -7,  -107,    -8,  -107,    -9,   -10,   -39,  -107,    -3,   -80,
   -56,   -57,   -91,   -53,   -47,   -54,  -107,   -45,   -50,   -49,
  -107,   -52,   -46,  -101,   -79,  -107,   -51,  -107,   -58,   -48,
   -39,  -107,  -107,   -91,   -15,   -16,  -107,   -18,   -19,   -23,
  -107,   -91,   -87,   -89,   -90,  -107,   -40,  -105,   177,   -92,
   -91,  -107,   -43,  -107,  -107,  -107,  -107,  -107,   -34,   -77,
   -26,  -107,   -32,   -30,   -35,   -37,   -33,   -36,   -28,  -105,
   -78,   -24,   -38,   -99,  -107,  -107,  -107,  -107,   -88,  -107,
  -107,  -106,  -107,  -107,  -107,   -95,   -98,  -107,  -102,  -103,
  -107,  -104,   -74,   -75,   -73,  -107,   -76,  -107,   -67,   -68,
  -107,  -107,   -61,  -107,   -65,  -107,   -39,   -29,  -107,  -107,
  -100,  -107,   -17,   -14,  -107,   -42,   -41,   -22,   -93,   -94,
  -107,  -107,  -107,   -82,   -44,  -107,   -70,  -107,   -59,   -62,
   -60,  -107,  -107,   -55,  -105,   -27,   -20,   -21,  -107,   -84,
  -107,   -86,   -96,   -97,   -81,   -72,   -69,  -107,  -107,   -66,
   -25,   -83,   -85,   -71,  -107,   -64,   -63 ]

racc_goto_table = [
     7,    29,    28,   110,    67,   105,    62,   102,   119,    85,
    84,    34,    80,    95,   122,    69,    38,   136,   115,    42,
   124,    99,    73,   118,    59,    57,    54,    60,    89,   129,
   121,    45,   147,    71,    34,   128,    61,    88,   132,    38,
   104,     4,    42,    82,    98,   nil,   nil,   nil,    78,   nil,
    34,   146,   nil,   103,    72,    38,    86,   nil,    42,   149,
   nil,   115,    57,    97,   nil,   124,   nil,   113,   nil,   113,
    92,   nil,   112,    34,   112,   162,   106,   167,    38,   nil,
   114,    42,   114,    57,   125,   nil,    85,    84,   nil,   155,
   nil,   nil,   nil,   120,   170,   nil,   169,   nil,    34,    58,
    79,   173,    57,    38,   154,   nil,    42,   142,    34,   nil,
   113,   115,   nil,    38,   113,   112,    42,   nil,   135,   112,
    82,   nil,   nil,   114,    79,    78,    79,   114,   144,   nil,
    87,   158,   nil,    86,   160,   nil,    58,    28,    90,    34,
   nil,   nil,   nil,    34,    38,   113,   106,    42,    38,   nil,
   112,    42,   nil,    28,   116,    28,   116,    58,   114,   163,
   113,   nil,    90,   165,    90,   112,   nil,    79,   174,    28,
   nil,    79,   nil,   114,   nil,   nil,    58,    79,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   116,   nil,   nil,
   nil,   116,    79,   nil,   nil,    90,   nil,    87,   nil,    90,
   nil,   nil,   nil,   nil,   nil,    90,   nil,    79,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   116,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    90,   nil,   nil,   nil,   nil,   nil,   nil,   116,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    90 ]

racc_goto_check = [
     2,    25,     3,    31,    20,    48,    45,    21,    40,    27,
    26,    22,    23,    43,    36,    46,     4,    29,    38,    16,
    38,    43,    30,    39,     4,    16,    14,    16,    20,    21,
    35,    28,    41,    42,    22,    19,    44,    18,    15,     4,
    47,     1,    16,    25,    45,   nil,   nil,   nil,    22,   nil,
    22,    40,   nil,    46,    28,     4,    16,   nil,    16,    36,
   nil,    38,    16,    14,   nil,    38,   nil,    25,   nil,    25,
    28,   nil,    22,    22,    22,    48,    16,    31,     4,   nil,
    16,    16,    16,    16,    14,   nil,    27,    26,   nil,    23,
   nil,   nil,   nil,    28,    21,   nil,    38,   nil,    22,    17,
    34,    40,    16,     4,    20,   nil,    16,     2,    22,   nil,
    25,    38,   nil,     4,    25,    22,    16,   nil,    28,    22,
    25,   nil,   nil,    16,    34,    22,    34,    16,    28,   nil,
    17,     2,   nil,    16,     2,   nil,    17,     3,    32,    22,
   nil,   nil,   nil,    22,     4,    25,    16,    16,     4,   nil,
    22,    16,   nil,     3,    17,     3,    17,    17,    16,    28,
    25,   nil,    32,    28,    32,    22,   nil,    34,     2,     3,
   nil,    34,   nil,    16,   nil,   nil,    17,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,
   nil,    17,    34,   nil,   nil,    32,   nil,    17,   nil,    32,
   nil,   nil,   nil,   nil,   nil,    32,   nil,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    41,     0,    -5,     3,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     7,   -58,     6,    80,   -13,   -53,
   -22,   -60,    -2,   -38,   nil,    -7,   -40,   -41,    18,   -84,
   -14,   -70,    88,   nil,    50,   -46,   -62,   nil,   -56,   -51,
   -66,   -85,     1,   -40,    13,   -17,   -17,   -30,   -65 ]

racc_goto_default = [
   nil,   nil,   nil,    10,    12,    15,    17,    20,    22,    24,
    25,     2,     3,     6,   nil,    55,    14,    46,   nil,   nil,
   nil,   nil,     1,   nil,    81,    37,    39,    41,   nil,    66,
   nil,   nil,    49,    33,    35,   nil,   nil,   123,    40,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    93,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :QMARK => 14,
 :LPAREN => 15,
 :RPAREN => 16,
 :ISEQUAL => 17,
 :GREATEREQUAL => 18,
 :GREATERTHAN => 19,
 :LESSTHAN => 20,
 :LESSEQUAL => 21,
 :NOTEQUAL => 22,
 :IF => 23,
 :ELSE => 24,
 :IMPORT => 25,
 :DEFINE => 26,
 :ELSIF => 27,
 :VARIABLE => 28,
 :CLASS => 29,
 :INHERITS => 30,
 :NODE => 31,
 :BOOLEAN => 32,
 :DOT => 33,
 :COLON => 34,
 :TYPE => 35,
 :NAME => 36,
 :SEMIC => 37,
 :CASE => 38,
 :DEFAULT => 39,
 :FUNCTION => 40,
 :AT => 41,
 :LCOLLECT => 42,
 :RCOLLECT => 43 }

racc_use_result_var = true

racc_nt_base = 44

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'LESSEQUAL',
'NOTEQUAL',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'DOT',
'COLON',
'TYPE',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'FUNCTION',
'AT',
'LCOLLECT',
'RCOLLECT',
'$start',
'program',
'statements',
'statement',
'object',
'collectable',
'collection',
'assignment',
'casestatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'classnames',
'classname',
'name',
'variable',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'quotedtext',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'funcrvalue',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'hostnames',
'hostname',
'nothing',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 25
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end
   result
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'grammar.ra', 39
  def _reduce_3( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

module_eval <<'.,.,', 'grammar.ra', 62
  def _reduce_14( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 72
  def _reduce_15( val, _values, result )
    args = aryfy(val[1])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

 # reduce 16 omitted

module_eval <<'.,.,', 'grammar.ra', 91
  def _reduce_17( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 18 omitted

 # reduce 19 omitted

module_eval <<'.,.,', 'grammar.ra', 125
  def _reduce_20( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.instance_of?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 139
  def _reduce_21( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type
    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 151
  def _reduce_22( val, _values, result )
    # a template setting for a type
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 174
  def _reduce_23( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end

    if val[1].is_a? AST::TypeDefaults
        raise Puppet::ParseError, "Defaults are not collectable"
    end

    # Just mark our objects as collectable and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.collectable = true
        end
    else
        val[1].collectable = true
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 187
  def _reduce_24( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end
    result = AST::Collection.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 195
  def _reduce_25( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 26 omitted

module_eval <<'.,.,', 'grammar.ra', 209
  def _reduce_27( val, _values, result )
    if val[0].instance_of?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 28 omitted

 # reduce 29 omitted

module_eval <<'.,.,', 'grammar.ra', 220
  def _reduce_30( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 228
  def _reduce_31( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 32 omitted

 # reduce 33 omitted

 # reduce 34 omitted

 # reduce 35 omitted

 # reduce 36 omitted

 # reduce 37 omitted

module_eval <<'.,.,', 'grammar.ra', 251
  def _reduce_38( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 260
  def _reduce_39( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 260
  def _reduce_40( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 273
  def _reduce_41( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 288
  def _reduce_42( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 43 omitted

module_eval <<'.,.,', 'grammar.ra', 301
  def _reduce_44( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 45 omitted

 # reduce 46 omitted

 # reduce 47 omitted

 # reduce 48 omitted

 # reduce 49 omitted

 # reduce 50 omitted

 # reduce 51 omitted

 # reduce 52 omitted

 # reduce 53 omitted

 # reduce 54 omitted

module_eval <<'.,.,', 'grammar.ra', 324
  def _reduce_55( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :rvalue
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 332
  def _reduce_56( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 338
  def _reduce_57( val, _values, result )
    result = AST::FlatString.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_58( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 356
  def _reduce_59( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 373
  def _reduce_60( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => options,
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 387
  def _reduce_62( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 397
  def _reduce_63( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 409
  def _reduce_64( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

 # reduce 65 omitted

module_eval <<'.,.,', 'grammar.ra', 423
  def _reduce_66( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 433
  def _reduce_67( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :values => val[2]
    )
   result
  end
.,.,

 # reduce 68 omitted

module_eval <<'.,.,', 'grammar.ra', 435
  def _reduce_69( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 70 omitted

module_eval <<'.,.,', 'grammar.ra', 450
  def _reduce_71( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 460
  def _reduce_72( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 73 omitted

 # reduce 74 omitted

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

 # reduce 78 omitted

module_eval <<'.,.,', 'grammar.ra', 474
  def _reduce_79( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 533
  def _reduce_80( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = AST::ASTArray.new(
        :file => @lexer.file,
        :line => @lexer.line
    )

    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end
        files = Dir.glob(pat)
        if files.size == 0
            files = Dir.glob(pat + ".pp")
            if files.size == 0
                raise Puppet::ImportError.new("No file(s) found for import " + 
                                              "of '#{pat}'")
            end
        end

        files.each { |file|
            parser = Puppet::Parser::Parser.new()
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)

            unless file =~ /^#{File::SEPARATOR}/
                file = File.join(dir, file)
            end
            begin
                parser.file = file
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                next
            end
            # push the results into the main result array
            parser.parse.each do |child|
                result.push child
            end
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 544
  def _reduce_81( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 557
  def _reduce_82( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 574
  def _reduce_83( val, _values, result )
        #:args => val[2],
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_84( val, _values, result )
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 612
  def _reduce_85( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :names => val[1],
        :keyword => val[0],
        :code => val[4]
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 635
  def _reduce_86( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :names => val[1],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

 # reduce 87 omitted

module_eval <<'.,.,', 'grammar.ra', 649
  def _reduce_88( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0]
        result.push val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 657
  def _reduce_89( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 663
  def _reduce_90( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 671
  def _reduce_91( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 92 omitted

module_eval <<'.,.,', 'grammar.ra', 676
  def _reduce_93( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 687
  def _reduce_94( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 95 omitted

module_eval <<'.,.,', 'grammar.ra', 701
  def _reduce_96( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 709
  def _reduce_97( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 716
  def _reduce_98( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 99 omitted

module_eval <<'.,.,', 'grammar.ra', 725
  def _reduce_100( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 734
  def _reduce_101( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 746
  def _reduce_102( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 103 omitted

 # reduce 104 omitted

 # reduce 105 omitted

module_eval <<'.,.,', 'grammar.ra', 751
  def _reduce_106( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
