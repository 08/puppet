#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parsedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..ide98fa59463', 'grammar.ra', 734
attr_reader :file
attr_accessor :files

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = AST::ASTArray.new(
            :children => args
        )
    end

    return result
end

def file=(file)
    unless FileTest.exists?(file)
        raise Puppet::Error, "Could not find file %s" % file
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::ParsedFile.new(file)
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
    #if Puppet[:debug]
    #    @yydebug = true
    #end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def reparse?
    @files.detect { |file|
        file.changed?
    }
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..ide98fa59463

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 42, :_reduce_1,
 1, 43, :_reduce_none,
 2, 43, :_reduce_3,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 2, 49, :_reduce_12,
 1, 53, :_reduce_none,
 3, 53, :_reduce_14,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 5, 45, :_reduce_17,
 5, 45, :_reduce_18,
 5, 45, :_reduce_19,
 4, 62, :_reduce_20,
 1, 57, :_reduce_none,
 3, 57, :_reduce_22,
 0, 58, :_reduce_none,
 1, 58, :_reduce_none,
 1, 55, :_reduce_25,
 1, 61, :_reduce_26,
 1, 63, :_reduce_none,
 1, 63, :_reduce_none,
 1, 63, :_reduce_none,
 1, 63, :_reduce_none,
 1, 63, :_reduce_none,
 1, 63, :_reduce_none,
 3, 46, :_reduce_33,
 0, 59, :_reduce_34,
 1, 59, :_reduce_35,
 3, 59, :_reduce_36,
 3, 68, :_reduce_37,
 1, 69, :_reduce_none,
 3, 69, :_reduce_39,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 64, :_reduce_49,
 1, 64, :_reduce_50,
 1, 71, :_reduce_51,
 4, 72, :_reduce_52,
 5, 47, :_reduce_53,
 1, 73, :_reduce_none,
 2, 73, :_reduce_55,
 5, 74, :_reduce_56,
 4, 74, :_reduce_57,
 1, 75, :_reduce_none,
 3, 75, :_reduce_59,
 3, 65, :_reduce_60,
 1, 77, :_reduce_none,
 3, 77, :_reduce_62,
 1, 79, :_reduce_none,
 3, 79, :_reduce_64,
 3, 78, :_reduce_65,
 1, 76, :_reduce_66,
 1, 76, :_reduce_67,
 1, 76, :_reduce_none,
 1, 76, :_reduce_none,
 1, 76, :_reduce_70,
 1, 76, :_reduce_none,
 2, 48, :_reduce_72,
 6, 50, :_reduce_73,
 5, 50, :_reduce_74,
 6, 51, :_reduce_75,
 5, 51, :_reduce_76,
 6, 52, :_reduce_77,
 5, 52, :_reduce_78,
 1, 82, :_reduce_none,
 2, 82, :_reduce_80,
 1, 83, :_reduce_81,
 1, 83, :_reduce_82,
 0, 84, :_reduce_83,
 1, 80, :_reduce_none,
 3, 80, :_reduce_85,
 3, 80, :_reduce_86,
 1, 85, :_reduce_none,
 3, 85, :_reduce_88,
 3, 86, :_reduce_89,
 1, 86, :_reduce_90,
 1, 81, :_reduce_none,
 2, 81, :_reduce_92,
 1, 56, :_reduce_93,
 3, 66, :_reduce_94,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 0, 60, :_reduce_none,
 1, 60, :_reduce_98 ]

racc_reduce_n = 99

racc_shift_n = 163

racc_action_table = [
    33,    24,    25,   138,    91,    33,    24,    25,   133,   -66,
    33,    24,    25,   -71,   132,    33,    24,    25,    85,    53,
    33,    24,    25,    84,    37,    80,    37,   137,    78,    53,
    43,    37,     7,    34,    35,    43,    37,    38,    34,    35,
    43,    37,    38,    34,    35,    43,    37,    38,    34,    35,
    43,    52,    38,    34,    35,    84,    91,    38,    33,    24,
    25,    52,   110,    33,    24,    25,   111,   112,    33,    24,
    25,    93,    74,    33,    24,    25,    23,    37,    33,    24,
    25,    24,    25,   118,    37,     7,   119,    95,    43,    37,
   121,    34,    63,    43,    37,    38,    34,    35,    43,    37,
    38,    34,    35,    43,    37,    38,    34,    35,    43,   122,
    38,    34,    35,    24,    25,    38,   -68,    46,    24,    25,
   125,    80,   135,    24,    25,    80,   115,     7,    24,    25,
   130,   131,   -68,    24,    25,   134,   -66,   155,    37,   111,
   112,   -67,    43,    37,   -69,   102,   103,    43,    37,    38,
   102,   103,    43,    37,    38,   102,   103,    43,    37,    38,
   102,   103,    43,    75,    38,   102,   103,    24,    25,    38,
   142,     6,     9,   143,    13,    16,    94,    20,    72,    93,
    56,     4,     7,   144,    11,    93,    17,     7,   152,    47,
    90,    46,    37,    45,    27,   -69,    43,    23,    88,   102,
   103,     6,     9,    38,    13,    16,   146,    20,   nil,   nil,
   nil,     4,     7,   nil,    11,   nil,    17,   nil,   nil,   nil,
   nil,   nil,   159,   nil,     6,     9,   nil,    13,    16,   nil,
    20,   nil,   nil,   nil,     4,     7,   nil,    11,   158,    17,
     6,     9,   nil,    13,    16,   nil,    20,   nil,   nil,   nil,
     4,     7,   nil,    11,   128,    17,     6,     9,   nil,    13,
    16,   nil,    20,   nil,   nil,   nil,     4,     7,   nil,    11,
   149,    17,     6,     9,   nil,    13,    16,   nil,    20,   nil,
   nil,   nil,     4,     7,   nil,    11,   157,    17,     6,     9,
   nil,    13,    16,   nil,    20,   nil,   nil,   nil,     4,     7,
   nil,    11,   162,    17,     6,     9,   nil,    13,    16,   nil,
    20,   nil,   nil,   nil,     4,     7,   nil,    11,   nil,    17,
     6,     9,   nil,    13,    16,   nil,    20,   nil,   nil,   nil,
     4,     7,   nil,    11,   nil,    17,     6,     9,   nil,    13,
    16,   nil,    20,   nil,   nil,   nil,     4,     7,   nil,    11,
   nil,    17 ]

racc_action_check = [
    74,    74,    74,   107,    63,   109,   109,   109,    98,    63,
    33,    33,    33,    36,    98,    45,    45,    45,    50,    20,
    11,    11,    11,    47,    85,    46,    74,   107,    42,    54,
    74,   109,    85,    74,    74,   109,    33,    74,   109,   109,
    33,    45,   109,    33,    33,    45,    11,    33,    45,    45,
    11,    20,    45,    11,    11,    54,    80,    11,    23,    23,
    23,    54,    77,   142,   142,   142,    77,    77,    91,    91,
    91,    81,    29,    90,    90,    90,    29,    17,   130,   130,
   130,     6,     6,    82,    23,    17,    84,    71,    23,   142,
    86,    23,    23,   142,    91,    23,   142,   142,    91,    90,
   142,    91,    91,    90,   130,    91,    90,    90,   130,    89,
    90,   130,   130,   138,   138,   130,    41,    40,   104,   104,
    92,    93,   104,    78,    78,    94,    78,    72,    75,    75,
    96,    97,    69,   154,   154,   100,    35,   141,   138,   141,
   141,    34,   138,   104,    31,   138,   138,   104,    78,   138,
   104,   104,    78,    75,   104,    78,    78,    75,   154,    78,
    75,    75,   154,    30,    75,   154,   154,   115,   115,   154,
   116,    22,    22,   117,    22,    22,    68,    22,    27,   127,
    21,    22,    22,   118,    22,    64,    22,   133,   137,    16,
    62,    14,   115,    13,     9,    60,   115,     1,    56,   115,
   115,   118,   118,   115,   118,   118,   121,   118,   nil,   nil,
   nil,   118,   118,   nil,   118,   nil,   118,   nil,   nil,   nil,
   nil,   nil,   152,   nil,   121,   121,   nil,   121,   121,   nil,
   121,   nil,   nil,   nil,   121,   121,   nil,   121,   147,   121,
   152,   152,   nil,   152,   152,   nil,   152,   nil,   nil,   nil,
   152,   152,   nil,   152,    95,   152,   147,   147,   nil,   147,
   147,   nil,   147,   nil,   nil,   nil,   147,   147,   nil,   147,
   129,   147,    95,    95,   nil,    95,    95,   nil,    95,   nil,
   nil,   nil,    95,    95,   nil,    95,   145,    95,   129,   129,
   nil,   129,   129,   nil,   129,   nil,   nil,   nil,   129,   129,
   nil,   129,   160,   129,   145,   145,   nil,   145,   145,   nil,
   145,   nil,   nil,   nil,   145,   145,   nil,   145,   nil,   145,
   160,   160,   nil,   160,   160,   nil,   160,   nil,   nil,   nil,
   160,   160,   nil,   160,   nil,   160,     0,     0,   nil,     0,
     0,   nil,     0,   nil,   nil,   nil,     0,     0,   nil,     0,
   nil,     0 ]

racc_action_pointer = [
   311,   191,   nil,   nil,   nil,   nil,    78,   nil,   nil,   158,
   nil,    18,   nil,   180,   185,   nil,   153,    49,   nil,   nil,
    15,   180,   146,    56,   nil,   nil,   nil,   163,   nil,    70,
   157,   130,   nil,     8,   127,   122,    -1,   nil,   nil,   nil,
   111,   102,    14,   nil,   nil,    13,   -11,    -7,   nil,   nil,
     8,   nil,   nil,   nil,    25,   nil,   198,   nil,   nil,   nil,
   181,   nil,   153,    -5,   175,   nil,   nil,   nil,   142,   118,
   nil,    81,    91,   nil,    -2,   125,   nil,    57,   120,   nil,
    47,    61,    77,   nil,    50,    -4,    84,   nil,   nil,   102,
    71,    66,   113,    85,    89,   247,   117,   115,    -2,   nil,
   130,   nil,   nil,   nil,   115,   nil,   nil,    -7,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   164,   161,   166,   176,   nil,
   nil,   199,   nil,   nil,   nil,   nil,   nil,   169,   nil,   263,
    76,   nil,   nil,   151,   nil,   nil,   nil,   182,   110,   nil,
   nil,   130,    61,   nil,   nil,   279,   nil,   231,   nil,   nil,
   nil,   nil,   215,   nil,   130,   nil,   nil,   nil,   nil,   nil,
   295,   nil,   nil ]

racc_action_default = [
   -99,   -99,    -2,    -4,   -26,    -5,   -99,   -25,    -6,   -99,
    -7,   -99,    -8,   -99,   -99,    -9,   -99,   -99,   -10,   -11,
   -99,   -99,    -1,   -34,   -49,   -50,   -72,   -83,   -47,   -41,
   -99,   -46,   -45,   -99,   -26,   -25,   -43,   -93,   -70,   -48,
   -42,   -40,   -99,   -51,   -44,   -99,   -34,   -83,   -15,   -16,
   -12,   -13,   -81,   -82,   -83,   -79,   -99,    -3,   -32,   -28,
   -31,   -35,   -23,   -25,   -97,   -71,   -29,   -21,   -99,   -27,
   -30,   -99,   -83,   -84,   -99,   -99,   -38,   -99,   -99,   -33,
   -99,   -97,   -99,   -91,   -99,   -99,   -99,   -80,   163,   -99,
   -24,   -99,   -99,   -98,   -34,   -99,   -90,   -99,   -99,   -87,
   -99,   -69,   -67,   -66,   -99,   -54,   -68,   -99,   -58,   -99,
   -94,   -95,   -96,   -60,   -61,   -99,   -99,   -99,   -99,   -92,
   -14,   -99,   -17,   -22,   -37,   -18,   -36,   -97,   -74,   -99,
   -99,   -85,   -86,   -99,   -52,   -53,   -55,   -99,   -99,   -39,
   -63,   -99,   -99,   -19,   -76,   -99,   -78,   -99,   -20,   -73,
   -89,   -88,   -99,   -59,   -99,   -62,   -65,   -75,   -77,   -57,
   -99,   -64,   -56 ]

racc_goto_table = [
    22,    26,    57,    32,    70,   114,    64,    49,    51,   108,
    73,    58,   116,    60,    55,    67,    92,   105,    69,   141,
   109,    62,   113,    82,    50,    32,    99,    77,    40,    81,
    86,    71,   104,   117,    54,    89,   126,    32,   108,    98,
    66,    21,   140,   nil,   nil,   nil,   136,   nil,    87,   116,
    40,   nil,    30,   nil,   nil,    97,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,    65,   101,    32,   nil,   101,   nil,
   106,    70,   153,   106,    76,    49,   120,   127,    58,   148,
    60,   161,   123,    32,   154,    69,    79,   151,   116,   nil,
    29,    40,   nil,   nil,   101,   129,    48,   nil,   nil,   106,
   nil,    32,    59,   nil,   nil,   101,   nil,    66,    40,    57,
   106,   nil,    29,   nil,   nil,   100,    65,   nil,   145,    65,
   nil,   147,    32,   nil,    29,    57,    40,    57,   101,   nil,
   nil,    65,   124,   106,    32,   nil,   nil,   nil,   nil,   nil,
    57,   nil,   nil,   nil,   101,    65,   nil,    40,   nil,   106,
   139,    96,   160,    29,   nil,   nil,    65,   nil,   nil,    40,
   nil,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,    59,
    29,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,
   nil,   nil,   nil,   156,   nil,   nil,   nil,   nil,    29,   nil,
   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,
   nil,   nil,    96,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29 ]

racc_goto_check = [
     2,    23,     3,     4,    24,    37,    18,    15,    13,    35,
    43,    25,    35,    15,    42,    21,    19,    33,    23,    38,
    29,    16,    36,    40,    12,     4,    45,    28,    20,    18,
    40,    39,    32,    19,    41,    17,    27,     4,    35,    44,
    20,     1,    37,   nil,   nil,   nil,    33,   nil,    42,    35,
    20,   nil,    26,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,   nil,    20,   nil,    30,    15,     4,   nil,    15,   nil,
    23,    24,    35,    23,    26,    15,    13,    18,    25,    19,
    15,    37,    21,     4,    29,    23,    26,    45,    35,   nil,
    14,    20,   nil,   nil,    15,     2,    14,   nil,   nil,    23,
   nil,     4,    14,   nil,   nil,    15,   nil,    20,    20,     3,
    23,   nil,    14,   nil,   nil,    26,    30,   nil,     2,    30,
   nil,     2,     4,   nil,    14,     3,    20,     3,    15,   nil,
   nil,    30,    26,    23,     4,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,    15,    30,   nil,    20,   nil,    23,
    26,    14,     2,    14,   nil,   nil,    30,   nil,   nil,    20,
   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,   nil,    14,
    14,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,    14,   nil,
   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    14 ]

racc_goto_pointer = [
   nil,    41,     0,   -20,    -8,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     7,    -9,    79,   -10,    -2,   -27,   -17,   -48,
    17,    -8,   nil,    -5,   -19,   -12,    41,   -57,    -6,   -57,
    41,   nil,   -43,   -58,   nil,   -66,   -56,   -73,   -96,     4,
   -24,    14,    -6,   -17,   -33,   -46 ]

racc_goto_default = [
   nil,   nil,   nil,     2,     3,     5,     8,    10,    12,    15,
    18,    19,   nil,   nil,     1,    31,   nil,   nil,   nil,   nil,
    14,   nil,    68,    41,    44,    28,   nil,    61,   nil,   nil,
    36,    39,   nil,   nil,   107,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    83,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :QMARK => 14,
 :LPAREN => 15,
 :RPAREN => 16,
 :ISEQUAL => 17,
 :GREATEREQUAL => 18,
 :GREATERTHAN => 19,
 :LESSTHAN => 20,
 :LESSEQUAL => 21,
 :NOTEQUAL => 22,
 :IF => 23,
 :ELSE => 24,
 :IMPORT => 25,
 :DEFINE => 26,
 :ELSIF => 27,
 :VARIABLE => 28,
 :CLASS => 29,
 :INHERITS => 30,
 :NODE => 31,
 :BOOLEAN => 32,
 :DOT => 33,
 :COLON => 34,
 :TYPE => 35,
 :NAME => 36,
 :SEMIC => 37,
 :CASE => 38,
 :DEFAULT => 39,
 :INCLUDE => 40 }

racc_use_result_var = true

racc_nt_base = 41

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'LESSEQUAL',
'NOTEQUAL',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'DOT',
'COLON',
'TYPE',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'INCLUDE',
'$start',
'program',
'statements',
'statement',
'object',
'assignment',
'casestatement',
'import',
'include',
'definition',
'hostclass',
'nodedef',
'classnames',
'classname',
'name',
'variable',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'quotedtext',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'hostnames',
'hostname',
'nothing',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 40
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end

    # this is mainly so we can test the parser separately from the
    # interpreter
#    if Puppet[:parseonly]
#        begin
#            if Puppet[:debug]
#                puts result.tree(0)
#            end
#        rescue NoMethodError => detail
#            Puppet.err detail
#            #exit(78)
#        end
#        #require 'puppet/parser/interpreter'
#        #result = Puppet::Server.new(result)
#    end
   result
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'grammar.ra', 54
  def _reduce_3( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

module_eval <<'.,.,', 'grammar.ra', 91
  def _reduce_12( val, _values, result )
    classnames = aryfy(val[1])

    klasses = []
    
    # Now just iterate over each of the class names and create a new
    # object instance.  FIXME This should probably eventually include
    # some kind of checking that the asked-for class is a defined class.
    classnames.each { |classname|
        emptyary = AST::ASTArray.new(:children => [])
        klasses << AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => classname,
            :params => emptyary
        )
    }
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => klasses
    )
   result
  end
.,.,

 # reduce 13 omitted

module_eval <<'.,.,', 'grammar.ra', 98
  def _reduce_14( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 15 omitted

 # reduce 16 omitted

module_eval <<'.,.,', 'grammar.ra', 132
  def _reduce_17( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.instance_of?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 146
  def _reduce_18( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type
    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 158
  def _reduce_19( val, _values, result )
    # a template setting for a type
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 166
  def _reduce_20( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 21 omitted

module_eval <<'.,.,', 'grammar.ra', 180
  def _reduce_22( val, _values, result )
    if val[0].instance_of?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 23 omitted

 # reduce 24 omitted

module_eval <<'.,.,', 'grammar.ra', 191
  def _reduce_25( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 199
  def _reduce_26( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 27 omitted

 # reduce 28 omitted

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

module_eval <<'.,.,', 'grammar.ra', 222
  def _reduce_33( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 231
  def _reduce_34( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 231
  def _reduce_35( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 244
  def _reduce_36( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 259
  def _reduce_37( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 38 omitted

module_eval <<'.,.,', 'grammar.ra', 272
  def _reduce_39( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 40 omitted

 # reduce 41 omitted

 # reduce 42 omitted

 # reduce 43 omitted

 # reduce 44 omitted

 # reduce 45 omitted

 # reduce 46 omitted

 # reduce 47 omitted

 # reduce 48 omitted

module_eval <<'.,.,', 'grammar.ra', 290
  def _reduce_49( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 296
  def _reduce_50( val, _values, result )
    result = AST::FlatString.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 304
  def _reduce_51( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 314
  def _reduce_52( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 331
  def _reduce_53( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => options,
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 54 omitted

module_eval <<'.,.,', 'grammar.ra', 345
  def _reduce_55( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 355
  def _reduce_56( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 367
  def _reduce_57( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

 # reduce 58 omitted

module_eval <<'.,.,', 'grammar.ra', 381
  def _reduce_59( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 391
  def _reduce_60( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :values => val[2]
    )
   result
  end
.,.,

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 393
  def _reduce_62( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 63 omitted

module_eval <<'.,.,', 'grammar.ra', 408
  def _reduce_64( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 418
  def _reduce_65( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 426
  def _reduce_66( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 433
  def _reduce_67( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 68 omitted

 # reduce 69 omitted

module_eval <<'.,.,', 'grammar.ra', 442
  def _reduce_70( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 495
  def _reduce_72( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = AST::ASTArray.new(
        :file => @lexer.file,
        :line => @lexer.line
    )
    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end         
        files = Dir.glob(pat)
        if files.size == 0
            raise Puppet::ImportError.new("No file(s) found for import " + 
                                          "of '#{pat}'")
        end
        files.each { |file|
            parser = Puppet::Parser::Parser.new()
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)
            begin
                parser.file = File.join(dir, file)
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                result = AST::ASTArray.new(
                    :file => @lexer.file,
                    :line => @lexer.line
                )
                next
            end
            # push the results into the main result array
            result.push parser.parse
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 506
  def _reduce_73( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 519
  def _reduce_74( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 536
  def _reduce_75( val, _values, result )
        #:args => val[2],
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 553
  def _reduce_76( val, _values, result )
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 574
  def _reduce_77( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :names => val[1],
        :keyword => val[0],
        :code => val[4]
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_78( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :names => val[1],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

 # reduce 79 omitted

module_eval <<'.,.,', 'grammar.ra', 611
  def _reduce_80( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0]
        result.push val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 619
  def _reduce_81( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 625
  def _reduce_82( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 633
  def _reduce_83( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 84 omitted

module_eval <<'.,.,', 'grammar.ra', 638
  def _reduce_85( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 649
  def _reduce_86( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 87 omitted

module_eval <<'.,.,', 'grammar.ra', 663
  def _reduce_88( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 671
  def _reduce_89( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 678
  def _reduce_90( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 91 omitted

module_eval <<'.,.,', 'grammar.ra', 687
  def _reduce_92( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 696
  def _reduce_93( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 708
  def _reduce_94( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 95 omitted

 # reduce 96 omitted

 # reduce 97 omitted

module_eval <<'.,.,', 'grammar.ra', 713
  def _reduce_98( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
