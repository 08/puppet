#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parsedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..idb478f6db18', 'grammar.ra', 745
attr_reader :file
attr_accessor :files

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = AST::ASTArray.new(
            :children => args
        )
    end

    return result
end

def file=(file)
    unless FileTest.exists?(file)
        raise Puppet::Error, "Could not find file %s" % file
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::ParsedFile.new(file)
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
    #if Puppet[:debug]
    #    @yydebug = true
    #end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def reparse?
    @files.detect { |file|
        file.changed?
    }
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..idb478f6db18

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 43, :_reduce_1,
 1, 44, :_reduce_none,
 2, 44, :_reduce_3,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 1, 45, :_reduce_none,
 2, 50, :_reduce_13,
 2, 51, :_reduce_14,
 1, 55, :_reduce_none,
 3, 55, :_reduce_16,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 5, 46, :_reduce_19,
 5, 46, :_reduce_20,
 5, 46, :_reduce_21,
 4, 64, :_reduce_22,
 1, 59, :_reduce_none,
 3, 59, :_reduce_24,
 0, 60, :_reduce_none,
 1, 60, :_reduce_none,
 1, 57, :_reduce_27,
 1, 63, :_reduce_28,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 1, 65, :_reduce_none,
 3, 47, :_reduce_35,
 0, 61, :_reduce_36,
 1, 61, :_reduce_37,
 3, 61, :_reduce_38,
 3, 70, :_reduce_39,
 1, 71, :_reduce_none,
 3, 71, :_reduce_41,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 66, :_reduce_51,
 1, 66, :_reduce_52,
 1, 73, :_reduce_53,
 4, 74, :_reduce_54,
 5, 48, :_reduce_55,
 1, 75, :_reduce_none,
 2, 75, :_reduce_57,
 5, 76, :_reduce_58,
 4, 76, :_reduce_59,
 1, 77, :_reduce_none,
 3, 77, :_reduce_61,
 3, 67, :_reduce_62,
 1, 79, :_reduce_none,
 3, 79, :_reduce_64,
 1, 81, :_reduce_none,
 3, 81, :_reduce_66,
 3, 80, :_reduce_67,
 1, 78, :_reduce_68,
 1, 78, :_reduce_69,
 1, 78, :_reduce_none,
 1, 78, :_reduce_none,
 1, 78, :_reduce_72,
 1, 78, :_reduce_none,
 2, 49, :_reduce_74,
 6, 52, :_reduce_75,
 5, 52, :_reduce_76,
 6, 53, :_reduce_77,
 5, 53, :_reduce_78,
 6, 54, :_reduce_79,
 5, 54, :_reduce_80,
 1, 84, :_reduce_none,
 2, 84, :_reduce_82,
 1, 85, :_reduce_83,
 1, 85, :_reduce_84,
 0, 86, :_reduce_85,
 1, 82, :_reduce_none,
 3, 82, :_reduce_87,
 3, 82, :_reduce_88,
 1, 87, :_reduce_none,
 3, 87, :_reduce_90,
 3, 88, :_reduce_91,
 1, 88, :_reduce_92,
 1, 83, :_reduce_none,
 2, 83, :_reduce_94,
 1, 58, :_reduce_95,
 3, 68, :_reduce_96,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 0, 62, :_reduce_none,
 1, 62, :_reduce_100 ]

racc_reduce_n = 101

racc_shift_n = 166

racc_action_table = [
    34,    28,    29,   143,    92,    34,    28,    29,   134,   -68,
    34,    28,    29,    87,   133,    34,    28,    29,   102,    57,
    34,    28,    29,    86,    42,    84,    42,   142,    54,    57,
    47,    42,     7,    37,    41,    47,    42,    43,    37,    41,
    47,    42,    43,    37,    41,    47,    42,    43,    37,    41,
    47,    56,    43,    37,    66,    84,   -73,    43,    34,    28,
    29,    56,   111,    34,    28,    29,   113,   114,    34,    28,
    29,   120,    80,    34,    28,    29,    26,    42,    34,    28,
    29,   121,    42,    97,    42,     7,    28,    29,    47,    42,
     7,    37,    41,    47,    42,    43,    37,    41,    47,    42,
    43,    37,    41,    47,    42,    43,    37,    41,    47,    92,
    43,    37,    41,    28,    29,    43,   110,    96,    28,    29,
   124,   -68,   -71,    28,    29,   127,   128,    87,    28,    29,
     7,   131,   132,    28,    29,    96,    81,   157,    42,   113,
   114,   137,    47,    42,    93,   105,   108,    47,    42,    43,
   105,   108,    47,    42,    43,   105,   108,    47,    42,    43,
   105,   108,    47,   -69,    43,   105,   108,    28,    29,    43,
   141,   144,    77,   -70,     6,     9,    74,    13,    15,   148,
    21,    60,    96,   147,     3,     7,   -71,    11,     7,    16,
    19,    54,    42,   -70,    91,   158,    47,    49,    48,   105,
   108,     6,     9,    43,    13,    15,   165,    21,    30,    87,
    26,     3,     7,    86,    11,   nil,    16,    19,   nil,   nil,
   nil,   nil,   nil,   150,     6,     9,   nil,    13,    15,   nil,
    21,   nil,   nil,   nil,     3,     7,   nil,    11,   nil,    16,
    19,     6,     9,   164,    13,    15,   nil,    21,   nil,   nil,
   nil,     3,     7,   nil,    11,   nil,    16,    19,   nil,   nil,
   136,     6,     9,   nil,    13,    15,   nil,    21,   nil,   nil,
   nil,     3,     7,   nil,    11,   nil,    16,    19,     6,     9,
   154,    13,    15,   nil,    21,   nil,   nil,   nil,     3,     7,
   nil,    11,   nil,    16,    19,   nil,   nil,   161,     6,     9,
   nil,    13,    15,   nil,    21,   nil,   nil,   nil,     3,     7,
   nil,    11,   nil,    16,    19,     6,     9,   160,    13,    15,
   nil,    21,   nil,   nil,   nil,     3,     7,   nil,    11,   nil,
    16,    19,   nil,   nil,   nil,     6,     9,   nil,    13,    15,
   nil,    21,   nil,   nil,   nil,     3,     7,   nil,    11,   nil,
    16,    19,     6,     9,   nil,    13,    15,   nil,    21,   nil,
   nil,   nil,     3,     7,   nil,    11,   nil,    16,    19 ]

racc_action_check = [
   137,   137,   137,   116,    66,    48,    48,    48,   101,    66,
    80,    80,    80,    97,   101,    34,    34,    34,    75,    21,
    26,    26,    26,    50,    86,    49,   137,   116,    46,    58,
   137,    48,    86,   137,   137,    48,    80,   137,    48,    48,
    80,    34,    48,    80,    80,    34,    26,    80,    34,    34,
    26,    21,    34,    26,    26,    58,    44,    26,    11,    11,
    11,    58,    79,    92,    92,    92,    79,    79,   112,   112,
   112,    83,    38,   131,   131,   131,    38,    16,    93,    93,
    93,    84,    19,    73,    11,    16,     6,     6,    11,    92,
    19,    11,    11,    92,   112,    11,    92,    92,   112,   131,
    92,   112,   112,   131,    93,   112,   131,   131,    93,    87,
   131,    93,    93,    77,    77,    93,    77,    88,   110,   110,
    89,    41,    40,   143,   143,    94,    95,    96,    81,    81,
    74,    99,   100,   156,   156,    69,    39,   139,    77,   139,
   139,   104,    77,   110,    68,    77,    77,   110,   143,    77,
   110,   110,   143,    81,   110,   143,   143,    81,   156,   143,
    81,    81,   156,    37,    81,   156,   156,   118,   118,   156,
   115,   118,    32,    31,     1,     1,    30,     1,     1,   123,
     1,    24,   130,   120,     1,     1,    65,     1,   134,     1,
     1,    18,   118,    61,    60,   142,   118,    15,    13,   118,
   118,   120,   120,   118,   120,   120,   163,   120,     9,    54,
     4,   120,   120,    55,   120,   nil,   120,   120,   nil,   nil,
   nil,   nil,   nil,   124,   163,   163,   nil,   163,   163,   nil,
   163,   nil,   nil,   nil,   163,   163,   nil,   163,   nil,   163,
   163,   124,   124,   158,   124,   124,   nil,   124,   nil,   nil,
   nil,   124,   124,   nil,   124,   nil,   124,   124,   nil,   nil,
   102,   158,   158,   nil,   158,   158,   nil,   158,   nil,   nil,
   nil,   158,   158,   nil,   158,   nil,   158,   158,   102,   102,
   135,   102,   102,   nil,   102,   nil,   nil,   nil,   102,   102,
   nil,   102,   nil,   102,   102,   nil,   nil,   149,   135,   135,
   nil,   135,   135,   nil,   135,   nil,   nil,   nil,   135,   135,
   nil,   135,   nil,   135,   135,   149,   149,   146,   149,   149,
   nil,   149,   nil,   nil,   nil,   149,   149,   nil,   149,   nil,
   149,   149,   nil,   nil,   nil,   146,   146,   nil,   146,   146,
   nil,   146,   nil,   nil,   nil,   146,   146,   nil,   146,   nil,
   146,   146,     0,     0,   nil,     0,     0,   nil,     0,   nil,
   nil,   nil,     0,     0,   nil,     0,   nil,     0,     0 ]

racc_action_pointer = [
   327,   149,   nil,   nil,   204,   nil,    83,   nil,   nil,   172,
   nil,    56,   nil,   185,   nil,   161,    49,   nil,   185,    54,
   nil,    15,   nil,   nil,   181,   nil,    18,   nil,   nil,   nil,
   161,   159,   158,   nil,    13,   nil,   nil,   149,    70,   130,
   108,   107,   nil,   nil,    42,   nil,    22,   nil,     3,    -5,
    13,   nil,   nil,   nil,   173,   203,   nil,   nil,    25,   nil,
   194,   179,   nil,   nil,   nil,   172,    -5,   nil,   107,   125,
   nil,   nil,   nil,    49,    94,    12,   nil,   110,   nil,    57,
     8,   125,   nil,    65,    45,   nil,    -4,   100,   107,   114,
   nil,   nil,    61,    76,   118,   119,    91,   -23,   nil,   118,
   116,    -2,   253,   nil,   132,   nil,   nil,   nil,   nil,   nil,
   115,   nil,    66,   nil,   nil,   165,    -7,   nil,   164,   nil,
   176,   nil,   nil,   172,   216,   nil,   nil,   nil,   nil,   nil,
   172,    71,   nil,   nil,   152,   273,   nil,    -2,   nil,   130,
   nil,   nil,   189,   120,   nil,   nil,   310,   nil,   nil,   290,
   nil,   nil,   nil,   nil,   nil,   nil,   130,   nil,   236,   nil,
   nil,   nil,   nil,   199,   nil,   nil ]

racc_action_default = [
  -101,    -1,    -2,   -28,  -101,    -4,  -101,   -27,    -5,  -101,
    -6,  -101,    -7,  -101,    -8,  -101,  -101,    -9,  -101,  -101,
   -10,  -101,   -11,   -12,  -101,    -3,   -36,   -74,   -51,   -52,
   -85,   -42,  -101,   -46,  -101,   -49,   -47,   -28,   -43,  -101,
   -48,   -27,   -95,   -72,   -45,   -50,   -44,   -53,  -101,   -85,
   -13,   -15,   -17,   -18,   -36,   -14,   -83,   -84,   -85,   -81,
  -101,   -29,   -32,   -34,   -30,   -33,   -27,   -37,   -25,   -99,
   -73,   -31,   -23,  -101,   -85,  -101,   -86,  -101,   -40,  -101,
  -101,  -101,   -35,  -101,  -101,   -93,  -101,  -101,   -99,  -101,
   -82,   166,  -101,   -26,  -101,  -101,  -100,   -36,   -89,   -92,
  -101,  -101,  -101,   -70,  -101,   -69,   -62,   -71,   -68,   -63,
  -101,   -96,  -101,   -97,   -98,  -101,  -101,   -60,  -101,   -56,
  -101,   -94,   -16,  -101,  -101,   -39,   -24,   -19,   -20,   -38,
   -99,  -101,   -87,   -88,  -101,  -101,   -76,  -101,   -65,  -101,
   -41,   -54,  -101,  -101,   -55,   -57,  -101,   -78,   -21,  -101,
   -80,   -22,   -91,   -90,   -75,   -67,  -101,   -64,  -101,   -61,
   -77,   -79,   -66,  -101,   -59,   -58 ]

racc_goto_table = [
    25,     1,    27,    39,    95,   119,    53,    70,    69,    53,
   112,    62,    38,   109,    59,   129,    65,    52,    72,    63,
    52,    83,    61,   123,    76,   122,    78,    64,    98,    46,
    89,    50,   106,   118,    55,    38,    88,   139,    75,    68,
    82,    58,   145,    94,    71,    79,   138,   101,    24,    38,
   nil,    90,    46,   nil,   nil,   nil,   nil,   nil,    70,    36,
   nil,   nil,    70,   nil,   nil,   151,    46,   107,   100,   nil,
   156,   107,   115,   103,    70,    99,    53,   103,    62,   130,
   nil,    38,    36,    65,   125,   126,    63,    52,   153,    61,
   nil,    70,   162,    38,    64,   nil,    36,   nil,    46,    70,
   107,   nil,   nil,   135,   140,   nil,   103,   nil,   107,   nil,
    46,    71,   nil,    38,   103,   nil,   nil,   nil,   nil,   nil,
   nil,   146,   nil,   152,    70,   149,   nil,   nil,    36,   155,
    46,   nil,    38,   107,    25,    99,   nil,    70,    38,   103,
    36,   nil,   nil,   104,   nil,    25,   107,   117,    25,    46,
   nil,   nil,   103,   nil,   nil,    46,   nil,   nil,   nil,   163,
    36,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   104,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   117,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   159,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   104 ]

racc_goto_check = [
     3,     2,    24,    27,    20,    34,    16,    31,    19,    16,
    30,    25,    15,    38,    43,    28,    16,    15,    22,    26,
    15,    41,    24,    20,    44,    14,    27,    15,    46,    21,
    41,    13,    37,    33,    13,    15,    19,    39,    40,    17,
    27,    42,    34,    18,    21,    29,    38,    45,     1,    15,
   nil,    43,    21,   nil,   nil,   nil,   nil,   nil,    31,     4,
   nil,   nil,    31,   nil,   nil,    20,    21,    16,    44,   nil,
    30,    16,    27,    24,    31,    15,    16,    24,    25,    19,
   nil,    15,     4,    16,    27,    22,    26,    15,    46,    24,
   nil,    31,    38,    15,    15,   nil,     4,   nil,    21,    31,
    16,   nil,   nil,     2,    27,   nil,    24,   nil,    16,   nil,
    21,    21,   nil,    15,    24,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,    27,    31,     2,   nil,   nil,     4,    27,
    21,   nil,    15,    16,     3,    15,   nil,    31,    15,    24,
     4,   nil,   nil,    36,   nil,     3,    16,    36,     3,    21,
   nil,   nil,    24,   nil,   nil,    21,   nil,   nil,   nil,     2,
     4,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,     4,
   nil,   nil,   nil,   nil,    36,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    36,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36 ]

racc_goto_pointer = [
   nil,    48,     1,    -1,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   -61,     1,   -10,    13,   -25,   -18,
   -65,    18,    -8,   nil,    -4,   -15,    -7,    -8,   -81,    11,
   -69,   -19,   nil,   -48,   -76,   nil,    66,   -45,   -64,   -73,
     8,   -28,    20,    -7,    -6,   -27,   -46 ]

racc_goto_default = [
   nil,   nil,   nil,     2,     5,     8,    10,    12,    14,    17,
    20,    22,    23,   nil,    51,     4,    40,   nil,   nil,   nil,
   nil,    18,   nil,    73,    31,    33,    35,   nil,    67,   nil,
   nil,    44,    45,   nil,   nil,   116,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    85,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :QMARK => 14,
 :LPAREN => 15,
 :RPAREN => 16,
 :ISEQUAL => 17,
 :GREATEREQUAL => 18,
 :GREATERTHAN => 19,
 :LESSTHAN => 20,
 :LESSEQUAL => 21,
 :NOTEQUAL => 22,
 :IF => 23,
 :ELSE => 24,
 :IMPORT => 25,
 :DEFINE => 26,
 :ELSIF => 27,
 :VARIABLE => 28,
 :CLASS => 29,
 :INHERITS => 30,
 :NODE => 31,
 :BOOLEAN => 32,
 :DOT => 33,
 :COLON => 34,
 :TYPE => 35,
 :NAME => 36,
 :SEMIC => 37,
 :CASE => 38,
 :DEFAULT => 39,
 :INCLUDE => 40,
 :TAG => 41 }

racc_use_result_var = true

racc_nt_base = 42

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'LESSEQUAL',
'NOTEQUAL',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'DOT',
'COLON',
'TYPE',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'INCLUDE',
'TAG',
'$start',
'program',
'statements',
'statement',
'object',
'assignment',
'casestatement',
'import',
'include',
'tag',
'definition',
'hostclass',
'nodedef',
'classnames',
'classname',
'name',
'variable',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'quotedtext',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'hostnames',
'hostname',
'nothing',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 40
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end

    # this is mainly so we can test the parser separately from the
    # interpreter
#    if Puppet[:parseonly]
#        begin
#            if Puppet[:debug]
#                puts result.tree(0)
#            end
#        rescue NoMethodError => detail
#            Puppet.err detail
#            #exit(78)
#        end
#        #require 'puppet/parser/interpreter'
#        #result = Puppet::Server.new(result)
#    end
   result
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'grammar.ra', 54
  def _reduce_3( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

module_eval <<'.,.,', 'grammar.ra', 92
  def _reduce_13( val, _values, result )
    classnames = aryfy(val[1])

    klasses = []
    
    # Now just iterate over each of the class names and create a new
    # object instance.  FIXME This should probably eventually include
    # some kind of checking that the asked-for class is a defined class.
    classnames.each { |classname|
        emptyary = AST::ASTArray.new(:children => [])
        klasses << AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => classname,
            :params => emptyary
        )
    }
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => klasses
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 102
  def _reduce_14( val, _values, result )
    classnames = aryfy(val[1])

    result = AST::Tag.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[1]
    )
   result
  end
.,.,

 # reduce 15 omitted

module_eval <<'.,.,', 'grammar.ra', 109
  def _reduce_16( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 17 omitted

 # reduce 18 omitted

module_eval <<'.,.,', 'grammar.ra', 143
  def _reduce_19( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.instance_of?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 157
  def _reduce_20( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type
    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 169
  def _reduce_21( val, _values, result )
    # a template setting for a type
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 177
  def _reduce_22( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 23 omitted

module_eval <<'.,.,', 'grammar.ra', 191
  def _reduce_24( val, _values, result )
    if val[0].instance_of?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 25 omitted

 # reduce 26 omitted

module_eval <<'.,.,', 'grammar.ra', 202
  def _reduce_27( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 210
  def _reduce_28( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 29 omitted

 # reduce 30 omitted

 # reduce 31 omitted

 # reduce 32 omitted

 # reduce 33 omitted

 # reduce 34 omitted

module_eval <<'.,.,', 'grammar.ra', 233
  def _reduce_35( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 242
  def _reduce_36( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 242
  def _reduce_37( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 255
  def _reduce_38( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 270
  def _reduce_39( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 40 omitted

module_eval <<'.,.,', 'grammar.ra', 283
  def _reduce_41( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 42 omitted

 # reduce 43 omitted

 # reduce 44 omitted

 # reduce 45 omitted

 # reduce 46 omitted

 # reduce 47 omitted

 # reduce 48 omitted

 # reduce 49 omitted

 # reduce 50 omitted

module_eval <<'.,.,', 'grammar.ra', 301
  def _reduce_51( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 307
  def _reduce_52( val, _values, result )
    result = AST::FlatString.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 315
  def _reduce_53( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 325
  def _reduce_54( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 342
  def _reduce_55( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => options,
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 56 omitted

module_eval <<'.,.,', 'grammar.ra', 356
  def _reduce_57( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 366
  def _reduce_58( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 378
  def _reduce_59( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

 # reduce 60 omitted

module_eval <<'.,.,', 'grammar.ra', 392
  def _reduce_61( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 402
  def _reduce_62( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :values => val[2]
    )
   result
  end
.,.,

 # reduce 63 omitted

module_eval <<'.,.,', 'grammar.ra', 404
  def _reduce_64( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 65 omitted

module_eval <<'.,.,', 'grammar.ra', 419
  def _reduce_66( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 429
  def _reduce_67( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 437
  def _reduce_68( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 444
  def _reduce_69( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 70 omitted

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 453
  def _reduce_72( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 73 omitted

module_eval <<'.,.,', 'grammar.ra', 506
  def _reduce_74( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = AST::ASTArray.new(
        :file => @lexer.file,
        :line => @lexer.line
    )
    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end         
        files = Dir.glob(pat)
        if files.size == 0
            raise Puppet::ImportError.new("No file(s) found for import " + 
                                          "of '#{pat}'")
        end
        files.each { |file|
            parser = Puppet::Parser::Parser.new()
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)
            begin
                parser.file = File.join(dir, file)
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                result = AST::ASTArray.new(
                    :file => @lexer.file,
                    :line => @lexer.line
                )
                next
            end
            # push the results into the main result array
            result.push parser.parse
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 517
  def _reduce_75( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 530
  def _reduce_76( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 547
  def _reduce_77( val, _values, result )
        #:args => val[2],
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 564
  def _reduce_78( val, _values, result )
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 585
  def _reduce_79( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :names => val[1],
        :keyword => val[0],
        :code => val[4]
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 608
  def _reduce_80( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :names => val[1],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

 # reduce 81 omitted

module_eval <<'.,.,', 'grammar.ra', 622
  def _reduce_82( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0]
        result.push val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 630
  def _reduce_83( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 636
  def _reduce_84( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 644
  def _reduce_85( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 86 omitted

module_eval <<'.,.,', 'grammar.ra', 649
  def _reduce_87( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 660
  def _reduce_88( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 89 omitted

module_eval <<'.,.,', 'grammar.ra', 674
  def _reduce_90( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 682
  def _reduce_91( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 689
  def _reduce_92( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 93 omitted

module_eval <<'.,.,', 'grammar.ra', 698
  def _reduce_94( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 707
  def _reduce_95( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 719
  def _reduce_96( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 97 omitted

 # reduce 98 omitted

 # reduce 99 omitted

module_eval <<'.,.,', 'grammar.ra', 724
  def _reduce_100( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
