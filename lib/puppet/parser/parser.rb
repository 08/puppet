#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < ParseError; end
end

Puppet.config.setdefaults(:puppet,
    :lib => ["", "Puppet's search path, where Puppet will search for files to be
        imported.  Can be expanded by setting PUPPETLIB in your environment.
        Values should be colon-separated.  Any manifest you specify on the command
        line has its directory automatically added to the search path."]
)

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id3c509ea71c', 'grammar.ra', 557
require 'puppet/parser/functions'

attr_reader :file
attr_accessor :files

# Figure out if the file exists, and whether we need to tack a '.pp' onto it.
def self.filecheck(path)
    if File.exists?(path)
        return path
    elsif File.exists?(path + ".pp")
        return path + ".pp"
    else
        return nil
    end
end

# Find a file in our search path.
def self.find(file)
    if file =~ /^#{File::SEPARATOR}/
        return filecheck(file)
    end

    libsetup unless Puppet[:lib].is_a? Array

    Puppet[:lib].each do |dir|
        if val = filecheck(File.join(dir, file))
            return val
        end
    end

    return nil
end

# Find all files matching a given glob, anywhere in the search path.
def self.glob(pattern)
    self.libsetup unless Puppet[:lib].is_a? Array

    if pattern =~ /^#{File::SEPARATOR}/
        return Dir.glob(pattern).find_all do |f|
            File.file?(f)
        end
    end
    files = []

    Puppet[:lib].each do |dir|
        if File.directory?(dir)
            Dir.glob(File.join(dir, pattern)).find_all do |f|
                files << f if File.file?(f)
            end
        end
    end

    return files
end

# Convert our external lib directories as appropriate.
def self.libsetup
    if Puppet[:lib].is_a? String
        dirs = []
        if Puppet[:lib] != ""
            dirs += Puppet[:lib].split(":")
        end
        Puppet[:lib] = dirs
    end

    if ENV["PUPPETLIB"]
        Puppet[:lib] += ENV["PUPPETLIB"].split(":")
        ENV["PUPPETLIB"] = nil
    end
end

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = ast AST::ASTArray, :children => args
    end

    return result
end

# Create an AST object, and automatically add the file and line information if
# available.
def ast(klass, hash = nil)
    hash ||= {}
    unless hash[:line]
        hash[:line] = @lexer.line
    end

    unless hash[:file]
        if file = @lexer.file
            hash[:file] = file
        end
    end

    return klass.new(hash)
end

# Specify the file to parse.  Basically gets passed through to the lexer.
def file=(file)
    path = self.class.filecheck(file)
    unless path
        raise Puppet::Error, "Could not find file %s" % file
    end

    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::LoadedFile.new(file)
        @lexer.file = file
    end
end

def import(string)
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    result = ast AST::ASTArray

    # We can't interpolate at this point since we don't have any 
    # scopes set up. Warn the user if they use a variable reference
    pat = string
    if pat.index("$")
         Puppet.warning(
             "The import of #{pat} contains a variable reference;" +
             " variables are not interpolated for imports " +
             "in file #{@lexer.file} at line #{@lexer.line}"
         )
    end

    if pat =~ /[*{}\[\]?\\]/
        files = self.class.glob(pat)
    else
        files = self.class.find(pat)
    end

    if ! files or files.size == 0
        raise Puppet::ImportError.new("No file(s) found for import " + 
                                          "of '#{pat}'")
    end

    files.each { |file|
        parser = Puppet::Parser::Parser.new()
        parser.files = self.files
        Puppet.debug("importing '%s'" % file)

        unless file =~ /^#{File::SEPARATOR}/
            file = File.join(dir, file)
        end
        begin
            parser.file = file
        rescue Puppet::ImportError
            Puppet.warning(
                "Importing %s would result in an import loop" %
                    File.join(file)
            )
            next
        end
        # push the results into the main result array
        # We always return an array when we parse.
        parser.parse.each do |child|
            result.push child
        end
    }

    return result
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
    #if Puppet[:debug]
    #    @yydebug = true
    #end
end

# How to handle error messages.
def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse(string = nil)
    if string
        self.string = string
    end
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def reparse?
    @files.detect { |file|
        file.changed?
    }
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id3c509ea71c

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 44, :_reduce_1,
 1, 44, :_reduce_none,
 1, 45, :_reduce_none,
 2, 45, :_reduce_4,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 4, 54, :_reduce_15,
 2, 54, :_reduce_16,
 1, 58, :_reduce_none,
 3, 58, :_reduce_18,
 1, 59, :_reduce_none,
 1, 59, :_reduce_none,
 1, 59, :_reduce_none,
 5, 48, :_reduce_22,
 5, 48, :_reduce_23,
 5, 48, :_reduce_24,
 2, 49, :_reduce_25,
 3, 50, :_reduce_26,
 4, 68, :_reduce_27,
 1, 63, :_reduce_none,
 3, 63, :_reduce_29,
 0, 64, :_reduce_none,
 1, 64, :_reduce_none,
 1, 60, :_reduce_32,
 1, 67, :_reduce_33,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 3, 51, :_reduce_40,
 0, 65, :_reduce_41,
 1, 65, :_reduce_42,
 3, 65, :_reduce_43,
 3, 73, :_reduce_44,
 1, 74, :_reduce_none,
 3, 74, :_reduce_46,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 4, 78, :_reduce_56,
 1, 62, :_reduce_57,
 1, 62, :_reduce_58,
 1, 76, :_reduce_59,
 4, 77, :_reduce_60,
 6, 53, :_reduce_61,
 0, 80, :_reduce_none,
 4, 80, :_reduce_63,
 1, 79, :_reduce_none,
 5, 52, :_reduce_65,
 1, 81, :_reduce_none,
 2, 81, :_reduce_67,
 5, 82, :_reduce_68,
 4, 82, :_reduce_69,
 1, 83, :_reduce_none,
 3, 83, :_reduce_71,
 3, 70, :_reduce_72,
 1, 85, :_reduce_none,
 3, 85, :_reduce_74,
 1, 87, :_reduce_none,
 3, 87, :_reduce_76,
 3, 86, :_reduce_77,
 1, 84, :_reduce_none,
 1, 84, :_reduce_none,
 1, 84, :_reduce_none,
 1, 84, :_reduce_none,
 1, 84, :_reduce_none,
 1, 84, :_reduce_none,
 1, 84, :_reduce_84,
 6, 55, :_reduce_85,
 5, 55, :_reduce_86,
 6, 56, :_reduce_87,
 5, 56, :_reduce_88,
 6, 57, :_reduce_89,
 5, 57, :_reduce_90,
 1, 90, :_reduce_none,
 3, 90, :_reduce_92,
 1, 91, :_reduce_93,
 1, 91, :_reduce_94,
 1, 91, :_reduce_95,
 0, 46, :_reduce_96,
 1, 88, :_reduce_none,
 3, 88, :_reduce_98,
 3, 88, :_reduce_99,
 1, 92, :_reduce_none,
 3, 92, :_reduce_101,
 3, 93, :_reduce_102,
 1, 93, :_reduce_103,
 3, 93, :_reduce_104,
 1, 93, :_reduce_105,
 1, 89, :_reduce_none,
 2, 89, :_reduce_107,
 1, 61, :_reduce_108,
 1, 94, :_reduce_109,
 3, 71, :_reduce_110,
 2, 71, :_reduce_111,
 1, 75, :_reduce_none,
 1, 75, :_reduce_none,
 0, 66, :_reduce_none,
 1, 66, :_reduce_115 ]

racc_reduce_n = 116

racc_shift_n = 194

racc_action_table = [
    47,    34,    37,   159,    84,    18,    47,    34,    37,    61,
   158,   -81,    47,    34,    37,    83,    18,   -80,   133,    72,
    34,    37,    18,    35,   110,   142,    34,    37,    18,    42,
    35,   136,   -78,    49,    50,    42,    30,    54,    30,    49,
    50,    42,    69,    54,    62,    49,    50,   132,    42,    54,
    47,    34,    37,    35,    42,   142,    47,    34,    37,    35,
    35,   143,    47,    34,    37,   108,    18,   102,    28,    76,
    28,    31,    18,    31,    99,    76,    82,   167,    18,    42,
   151,   147,    73,    49,    50,    42,   112,    54,   168,    49,
    50,    42,    85,    54,   -83,    49,    89,    34,    37,    54,
    47,    34,    37,    34,    37,   113,    47,    34,    37,   114,
   116,   -79,    47,    34,    37,   176,    18,   114,   116,   152,
    43,   -80,    18,   155,   -78,    42,    61,    73,    18,    42,
    35,    42,   -81,    49,    50,    42,    35,    54,    69,    49,
    50,    42,   163,    54,    82,    49,    50,   166,   105,    54,
    47,    34,    37,   169,   170,    81,    47,    34,    37,   -79,
   175,   106,    47,    34,    37,    78,    18,   -82,   179,    76,
   110,    73,    18,    34,    37,   108,    68,    67,    18,    42,
    66,   187,   110,    49,    50,    42,    63,    54,    18,    49,
    50,    42,    32,    54,    26,    49,    50,    34,    37,    54,
   162,    42,   nil,   nil,   nil,    49,    50,    34,    37,    54,
   123,   nil,    18,    34,    37,   nil,   nil,   157,   nil,    34,
    37,   nil,    18,   nil,   nil,    42,   nil,   nil,    18,    49,
    50,   nil,   nil,    54,    18,    42,   nil,   nil,   nil,    49,
    50,    42,   nil,    54,   nil,    49,    50,    42,   nil,    54,
   nil,    49,    50,    34,    37,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   165,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,    42,   nil,   nil,   172,    49,    50,   nil,    11,    54,
   nil,    17,   nil,    22,    24,    18,     3,   nil,     9,   182,
    13,   nil,    19,    11,   nil,   nil,    17,   nil,    22,    24,
    18,     3,   nil,     9,   186,    13,   nil,    19,    11,   nil,
   nil,    17,   nil,    22,    24,    18,     3,   nil,     9,   150,
    13,   nil,    19,    11,   nil,   nil,    17,   nil,    22,    24,
    18,     3,   nil,     9,   190,    13,   nil,    19,    11,   nil,
   nil,    17,   nil,    22,    24,    18,     3,   nil,     9,   145,
    13,   nil,    19,    11,   nil,   nil,    17,   nil,    22,    24,
    18,     3,   nil,     9,   192,    13,   nil,    19,    11,   nil,
   nil,    17,   nil,    22,    24,    18,     3,   nil,     9,   193,
    13,   nil,    19,    11,   nil,   nil,    17,   nil,    22,    24,
    18,     3,   nil,     9,   173,    13,   nil,    19,    11,   nil,
   nil,    17,   nil,    22,    24,    18,     3,   nil,     9,   nil,
    13,   nil,    19,    11,   nil,   nil,    17,   nil,    22,    24,
    18,     3,   nil,     9,   nil,    13,   nil,    19,    11,   nil,
   nil,    17,   nil,    22,    24,    18,     3,   nil,     9,   nil,
    13,   nil,    19,    11,   nil,   nil,    17,   nil,    22,    24,
    18,     3,   nil,     9,   nil,    13,   nil,    19,    11,   nil,
   nil,    17,   nil,    22,    24,    18,     3,   nil,     9,   nil,
    13,   nil,    19,    11,   nil,   nil,    17,   nil,    22,    24,
   nil,     3,   nil,     9,   nil,    13,   nil,    19 ]

racc_action_check = [
    66,    66,    66,   130,    57,    19,   155,   155,   155,    14,
   130,    94,   133,   133,   133,    53,    66,    95,    96,    27,
    43,    43,   155,    19,    98,   102,    76,    76,   133,    66,
   102,   100,    53,    66,    66,   155,     3,    66,    72,   155,
   155,   133,    27,   155,    14,   133,   133,    90,    43,   133,
    83,    83,    83,    43,    76,   167,   108,   108,   108,    76,
   167,   104,    61,    61,    61,    89,    83,    63,     3,   118,
    72,     3,   108,    72,    62,    77,    89,   138,    61,    83,
   118,   109,   110,    83,    83,   108,    77,    83,   138,   108,
   108,    61,    60,   108,    59,    61,    61,    82,    82,    61,
    11,    11,    11,     9,     9,    80,    13,    13,    13,    80,
    80,    87,   169,   169,   169,   154,    11,   154,   154,   119,
     9,    58,    13,   125,    93,    82,    65,   132,   169,    11,
    82,     9,    56,    11,    11,    13,     9,    11,    67,    13,
    13,   169,   135,    13,    50,   169,   169,   137,    69,   169,
   115,   115,   115,   139,   141,    48,   170,   170,   170,    46,
   150,    70,    47,    47,    47,    47,   115,    45,   158,    36,
   160,    32,   170,   123,   123,    73,    26,    24,    47,   115,
    22,   175,    75,   115,   115,   170,    17,   115,   123,   170,
   170,    47,     4,   170,     2,    47,    47,   177,   177,    47,
   134,   123,   nil,   nil,   nil,   123,   123,    84,    84,   123,
    84,   nil,   177,   128,   128,   nil,   nil,   128,   nil,    85,
    85,   nil,    84,   nil,   nil,   177,   nil,   nil,   128,   177,
   177,   nil,   nil,   177,    85,    84,   nil,   nil,   nil,    84,
    84,   128,   nil,    84,   nil,   128,   128,    85,   nil,   128,
   nil,    85,    85,   159,   159,    85,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   159,   136,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   136,   159,   nil,   nil,   143,   159,   159,   nil,   136,   159,
   nil,   136,   nil,   136,   136,   143,   136,   nil,   136,   164,
   136,   nil,   136,   143,   nil,   nil,   143,   nil,   143,   143,
   164,   143,   nil,   143,   171,   143,   nil,   143,   164,   nil,
   nil,   164,   nil,   164,   164,   171,   164,   nil,   164,   117,
   164,   nil,   164,   171,   nil,   nil,   171,   nil,   171,   171,
   117,   171,   nil,   171,   179,   171,   nil,   171,   117,   nil,
   nil,   117,   nil,   117,   117,   179,   117,   nil,   117,   106,
   117,   nil,   117,   179,   nil,   nil,   179,   nil,   179,   179,
   106,   179,   nil,   179,   189,   179,   nil,   179,   106,   nil,
   nil,   106,   nil,   106,   106,   189,   106,   nil,   106,   191,
   106,   nil,   106,   189,   nil,   nil,   189,   nil,   189,   189,
   191,   189,   nil,   189,   144,   189,   nil,   189,   191,   nil,
   nil,   191,   nil,   191,   191,   144,   191,   nil,   191,   nil,
   191,   nil,   191,   144,   nil,   nil,   144,   nil,   144,   144,
   187,   144,   nil,   144,   nil,   144,   nil,   144,   187,   nil,
   nil,   187,   nil,   187,   187,     6,   187,   nil,   187,   nil,
   187,   nil,   187,     6,   nil,   nil,     6,   nil,     6,     6,
    81,     6,   nil,     6,   nil,     6,   nil,     6,    81,   nil,
   nil,    81,   nil,    81,    81,     0,    81,   nil,    81,   nil,
    81,   nil,    81,     0,   nil,   nil,     0,   nil,     0,     0,
   nil,     0,   nil,     0,   nil,     0,   nil,     0 ]

racc_action_pointer = [
   457,   nil,   194,    32,   186,   nil,   427,   nil,   nil,   100,
   nil,    98,   nil,   104,     3,   nil,   nil,   150,   nil,   -13,
   nil,   nil,   167,   nil,   141,   nil,   176,     9,   nil,   nil,
   nil,   nil,   135,   nil,   nil,   nil,   159,   nil,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   148,   140,   160,   149,   nil,
   124,   nil,   nil,    13,   nil,   nil,   113,   -15,   102,    75,
    86,    60,    32,    47,   nil,   120,    -2,   105,   nil,   112,
   155,   nil,    34,   166,   nil,   172,    23,    65,   nil,   nil,
   100,   442,    94,    48,   204,   216,   nil,    92,   nil,    56,
    30,   nil,   nil,   105,    -8,    -2,   -19,   nil,    14,   nil,
    25,   nil,    -6,   nil,    55,   nil,   352,   nil,    54,    74,
    46,   nil,   nil,   nil,   nil,   148,   nil,   322,    59,   114,
   nil,   nil,   nil,   170,   nil,   114,   nil,   nil,   210,   nil,
    -7,   nil,    91,    10,   193,   135,   262,   126,    67,   140,
   nil,   141,   nil,   277,   397,   nil,   nil,   nil,   nil,   nil,
   133,   nil,   nil,   nil,   108,     4,   nil,   nil,   162,   250,
   160,   nil,   nil,   nil,   292,   nil,   nil,    24,   nil,   110,
   154,   307,   nil,   nil,   nil,   175,   nil,   194,   nil,   337,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   412,   nil,   367,
   nil,   382,   nil,   nil ]

racc_action_default = [
   -96,   -12,  -116,  -116,  -116,   -13,    -1,   -14,    -2,   -32,
    -3,  -116,    -5,  -116,  -116,    -6,    -7,  -116,   -33,  -116,
    -8,    -9,  -116,   -10,  -116,   -11,  -116,   -96,   -93,   -91,
   -94,   -95,   -41,    -4,   -57,   -32,   -16,   -58,   -17,   -19,
   -20,   -21,  -108,  -116,   -54,   -55,   -49,  -116,  -116,   -59,
   -32,   -51,   -53,   -48,   -84,   -64,   -52,  -116,   -47,   -50,
  -116,   -41,  -116,   -96,   -25,  -116,  -116,   -96,   194,  -116,
  -116,  -106,  -116,  -116,   -42,  -114,  -116,  -116,  -111,   -45,
  -116,  -116,  -116,  -116,  -116,  -116,   -82,   -36,   -28,   -32,
  -116,   -37,   -39,   -35,   -38,   -34,   -30,   -83,  -114,   -26,
  -116,   -97,   -96,   -40,  -116,  -107,  -116,   -92,  -116,  -116,
  -115,   -18,   -15,  -110,  -112,  -116,  -113,  -116,  -116,  -116,
   -79,   -78,   -81,  -116,   -80,  -116,   -72,   -73,  -116,   -66,
  -116,   -70,   -41,   -31,  -116,  -116,  -116,  -116,  -116,  -103,
  -100,  -105,  -109,  -116,  -116,   -90,   -44,   -24,   -43,   -46,
   -62,   -56,   -60,   -75,  -116,  -116,   -67,   -65,  -116,  -116,
  -114,   -29,   -22,   -23,  -116,   -86,   -98,  -116,   -99,  -116,
  -116,  -116,   -88,   -89,   -61,  -116,   -74,  -116,   -77,  -116,
   -71,   -27,   -85,  -101,  -102,  -104,   -87,  -116,   -76,  -116,
   -69,  -116,   -68,   -63 ]

racc_goto_table = [
     6,    33,    41,    75,    97,     8,   127,   125,   131,   115,
   109,   148,    91,    40,   140,    70,    29,    48,    36,   129,
   174,    92,   128,    80,    88,    86,   134,    97,    97,   126,
    96,   154,    98,   135,   100,   111,    41,    27,    64,   138,
     2,   nil,   nil,   nil,   nil,   153,   125,    40,    86,    86,
   nil,   131,    77,   nil,    95,   104,   nil,   nil,    55,   nil,
    60,   nil,   156,   nil,   nil,    94,    97,   nil,   101,    41,
   nil,    97,   nil,   nil,   nil,    41,    97,   124,   124,   183,
    40,   117,   180,   177,    91,   107,    40,    86,   122,   122,
   nil,   118,    86,    92,    79,   181,   161,    86,   nil,   188,
   125,   nil,    97,   160,   nil,   nil,   144,   137,   nil,   nil,
   nil,   nil,    33,   103,   nil,    39,   124,    53,   nil,    53,
    97,   124,   nil,    86,   nil,    65,    95,   122,   nil,   nil,
   119,   nil,   122,   nil,   nil,   nil,   164,    94,   nil,    33,
   nil,    86,   nil,   171,   nil,   nil,   nil,   nil,   nil,    39,
   nil,   nil,   124,    53,   nil,   146,   nil,   nil,   nil,    33,
   nil,   nil,   149,   122,   nil,   nil,    33,    93,   nil,   nil,
   124,   nil,    53,    46,   nil,    46,   nil,   nil,   nil,   189,
   nil,   122,    39,   nil,    33,   nil,    33,   191,    39,    53,
   121,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   178,   nil,   nil,   nil,   nil,   nil,   139,    46,
   nil,   nil,   nil,   nil,    53,   nil,   184,   185,   nil,   nil,
   nil,    53,   nil,    87,   nil,   nil,   nil,   nil,    46,   121,
   nil,   nil,   nil,   nil,   121,   nil,   nil,   nil,   nil,    93,
   nil,   nil,   nil,   nil,   nil,    46,   120,   120,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    53,   nil,   nil,   nil,   121,   nil,   nil,   nil,   nil,
    46,   nil,   nil,   139,   nil,    53,    53,    46,   nil,   nil,
   nil,   nil,   nil,   121,   nil,   120,   nil,   nil,   nil,   nil,
   120,   nil,   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
   nil,   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    46,    46,   nil,   nil,   nil,   nil,   nil,   nil,   120 ]

racc_goto_check = [
     2,     4,    19,    22,    33,     3,    43,    41,    41,    32,
    23,    30,    27,    18,    50,    46,    48,    36,    15,    39,
    37,    28,    38,    31,    25,    35,    21,    33,    33,    42,
    20,    44,    22,    23,    45,    16,    19,    47,     5,    49,
     1,   nil,   nil,   nil,   nil,    43,    41,    18,    35,    35,
   nil,    41,    15,   nil,    19,    46,   nil,   nil,    29,   nil,
    29,   nil,    39,   nil,   nil,    18,    33,   nil,     3,    19,
   nil,    33,   nil,   nil,   nil,    19,    33,    19,    19,    50,
    18,     2,    41,    32,    27,    48,    18,    35,    18,    18,
   nil,    15,    35,    28,    29,    23,    25,    35,   nil,    43,
    41,   nil,    33,    22,   nil,   nil,     2,     3,   nil,   nil,
   nil,   nil,     4,    29,   nil,    17,    19,    17,   nil,    17,
    33,    19,   nil,    35,   nil,    17,    19,    18,   nil,   nil,
    29,   nil,    18,   nil,   nil,   nil,     2,    18,   nil,     4,
   nil,    35,   nil,     2,   nil,   nil,   nil,   nil,   nil,    17,
   nil,   nil,    19,    17,   nil,    29,   nil,   nil,   nil,     4,
   nil,   nil,    29,    18,   nil,   nil,     4,    17,   nil,   nil,
    19,   nil,    17,    24,   nil,    24,   nil,   nil,   nil,     2,
   nil,    18,    17,   nil,     4,   nil,     4,     2,    17,    17,
    17,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,    17,    24,
   nil,   nil,   nil,   nil,    17,   nil,    29,    29,   nil,   nil,
   nil,    17,   nil,    24,   nil,   nil,   nil,   nil,    24,    17,
   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,    17,
   nil,   nil,   nil,   nil,   nil,    24,    24,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    17,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,
    24,   nil,   nil,    17,   nil,    17,    17,    24,   nil,   nil,
   nil,   nil,   nil,    17,   nil,    24,   nil,   nil,   nil,   nil,
    24,   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    24,    24,   nil,   nil,   nil,   nil,   nil,   nil,    24 ]

racc_goto_pointer = [
   nil,    40,     0,     5,    -5,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   -41,   106,     4,    -7,
   -31,   -70,   -29,   -65,   162,   -37,   nil,   -49,   -40,    47,
   -99,   -24,   -71,   -57,   nil,   -36,     6,  -130,   -63,   -66,
   nil,   -77,   -55,   -78,   -92,   -29,   -12,    34,    13,   -63,
   -88,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    71,    10,    12,    15,    16,    20,    21,
    23,    25,     1,     5,     7,   nil,    38,    14,    56,    58,
   nil,   nil,   nil,   nil,     4,   nil,    90,    51,    52,   nil,
    74,   nil,   nil,    59,    44,    45,   nil,   nil,   nil,   nil,
   130,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   141 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :LESSEQUAL => 14,
 :NOTEQUAL => 15,
 :DOT => 16,
 :COLON => 17,
 :TYPE => 18,
 :QMARK => 19,
 :LPAREN => 20,
 :RPAREN => 21,
 :ISEQUAL => 22,
 :GREATEREQUAL => 23,
 :GREATERTHAN => 24,
 :LESSTHAN => 25,
 :IF => 26,
 :ELSE => 27,
 :IMPORT => 28,
 :DEFINE => 29,
 :ELSIF => 30,
 :VARIABLE => 31,
 :CLASS => 32,
 :INHERITS => 33,
 :NODE => 34,
 :BOOLEAN => 35,
 :NAME => 36,
 :SEMIC => 37,
 :CASE => 38,
 :DEFAULT => 39,
 :AT => 40,
 :LCOLLECT => 41,
 :RCOLLECT => 42 }

racc_use_result_var = true

racc_nt_base = 43

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'TYPE',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'$start',
'program',
'statements',
'nothing',
'statement',
'object',
'collectable',
'collection',
'assignment',
'casestatement',
'ifstatement',
'fstatement',
'definition',
'hostclass',
'nodedef',
'classnames',
'classname',
'name',
'variable',
'quotedtext',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'funcrvalue',
'iftest',
'else',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'hostnames',
'hostname',
'arguments',
'argument',
'lvariable']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 24
  def _reduce_1( val, _values, result )
    # Make sure we always return an array.
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = aryfy(val[0])
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 35
  def _reduce_4( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[1]]
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

module_eval <<'.,.,', 'grammar.ra', 56
  def _reduce_15( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 63
  def _reduce_16( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 82
  def _reduce_18( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 19 omitted

 # reduce 20 omitted

 # reduce 21 omitted

module_eval <<'.,.,', 'grammar.ra', 111
  def _reduce_22( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.instance_of?(AST::ObjectInst)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::ObjectDef,
            :type => val[0],
            :name => instance[0],
            :params => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 120
  def _reduce_23( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type
    result = ast AST::ObjectDef, :type => val[0], :params => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 126
  def _reduce_24( val, _values, result )
    # a template setting for a type
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid type"
    end
    result = ast(AST::TypeDefaults, :type => val[0], :params => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 149
  def _reduce_25( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end

    if val[1].is_a? AST::TypeDefaults
        raise Puppet::ParseError, "Defaults are not collectable"
    end

    # Just mark our objects as collectable and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.collectable = true
        end
    else
        val[1].collectable = true
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 158
  def _reduce_26( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end
    result = ast AST::Collection, :type => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 162
  def _reduce_27( val, _values, result )
    result = ast AST::ObjectInst, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 28 omitted

module_eval <<'.,.,', 'grammar.ra', 172
  def _reduce_29( val, _values, result )
    if val[0].instance_of?(AST::ObjectInst)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 30 omitted

 # reduce 31 omitted

module_eval <<'.,.,', 'grammar.ra', 179
  def _reduce_32( val, _values, result )
    result = ast AST::Name, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 183
  def _reduce_33( val, _values, result )
    result = ast AST::Type, :value => val[0]
   result
  end
.,.,

 # reduce 34 omitted

 # reduce 35 omitted

 # reduce 36 omitted

 # reduce 37 omitted

 # reduce 38 omitted

 # reduce 39 omitted

module_eval <<'.,.,', 'grammar.ra', 196
  def _reduce_40( val, _values, result )
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0].sub(/^\$/,'')
    result = ast AST::VarDef, :name => variable, :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 201
  def _reduce_41( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 201
  def _reduce_42( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 210
  def _reduce_43( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 215
  def _reduce_44( val, _values, result )
    leaf = ast AST::String, :value => val[0]
    result = ast AST::ObjectParam, :param => leaf, :value => val[2]
   result
  end
.,.,

 # reduce 45 omitted

module_eval <<'.,.,', 'grammar.ra', 224
  def _reduce_46( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 47 omitted

 # reduce 48 omitted

 # reduce 49 omitted

 # reduce 50 omitted

 # reduce 51 omitted

 # reduce 52 omitted

 # reduce 53 omitted

 # reduce 54 omitted

 # reduce 55 omitted

module_eval <<'.,.,', 'grammar.ra', 243
  def _reduce_56( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 247
  def _reduce_57( val, _values, result )
    result = ast AST::String, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 249
  def _reduce_58( val, _values, result )
    result = ast AST::FlatString, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 253
  def _reduce_59( val, _values, result )
    result = ast AST::Boolean, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 257
  def _reduce_60( val, _values, result )
    result = ast AST::ObjectRef, :type => val[0], :name => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 270
  def _reduce_61( val, _values, result )
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 62 omitted

module_eval <<'.,.,', 'grammar.ra', 275
  def _reduce_63( val, _values, result )
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

 # reduce 64 omitted

module_eval <<'.,.,', 'grammar.ra', 287
  def _reduce_65( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 66 omitted

module_eval <<'.,.,', 'grammar.ra', 297
  def _reduce_67( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 301
  def _reduce_68( val, _values, result )
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 306
  def _reduce_69( val, _values, result )
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 70 omitted

module_eval <<'.,.,', 'grammar.ra', 316
  def _reduce_71( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 320
  def _reduce_72( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 73 omitted

module_eval <<'.,.,', 'grammar.ra', 322
  def _reduce_74( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 75 omitted

module_eval <<'.,.,', 'grammar.ra', 333
  def _reduce_76( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 337
  def _reduce_77( val, _values, result )
    result = ast AST::ObjectParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 78 omitted

 # reduce 79 omitted

 # reduce 80 omitted

 # reduce 81 omitted

 # reduce 82 omitted

 # reduce 83 omitted

module_eval <<'.,.,', 'grammar.ra', 347
  def _reduce_84( val, _values, result )
    result = ast AST::Default, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 367
  def _reduce_85( val, _values, result )
    args = {
        :type => ast(AST::Name, :value => val[1]),
        :args => val[2],
        :code => val[4] # Switch to 5 for parents
    }

    if val[3].instance_of?(AST::Name)
        args[:parentclass] = val[3]
    end
    result = ast AST::CompDef, args
#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 379
  def _reduce_86( val, _values, result )
    args = {
        :type => ast(AST::Name, :value => val[1]),
        :args => val[2],
        :code => ast(AST::ASTArray)
    }

    if val[3].instance_of?(AST::Name)
        args[:parentclass] = val[3]
    end

    result = ast AST::CompDef, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 393
  def _reduce_87( val, _values, result )
        #:args => val[2],
    args = {
        :type => ast(AST::Name, :value => val[1]),
        :code => val[4]
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = ast AST::ClassDef, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 403
  def _reduce_88( val, _values, result )
    args = {
        :type => ast(AST::Name, :value => val[1]),
        :code => ast(AST::ASTArray, :children => [])
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = ast AST::ClassDef, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 420
  def _reduce_89( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = ast AST::ASTArray,
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
    end
    args = {
        :names => val[1],
        :code => val[4]
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = ast AST::NodeDef, args
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 435
  def _reduce_90( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = ast AST::ASTArray,
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
    end
    args = {
        :names => val[1],
        :code => ast(AST::ASTArray, :children => [])
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = ast AST::NodeDef,args
   result
  end
.,.,

 # reduce 91 omitted

module_eval <<'.,.,', 'grammar.ra', 446
  def _reduce_92( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0]
        result.push val[2]
    else
        result = ast AST::ASTArray, :children => [val[0], val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 450
  def _reduce_93( val, _values, result )
   result = ast AST::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 452
  def _reduce_94( val, _values, result )
   result = ast AST::HostName, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 454
  def _reduce_95( val, _values, result )
   result = ast AST::Default, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 458
  def _reduce_96( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 97 omitted

module_eval <<'.,.,', 'grammar.ra', 463
  def _reduce_98( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 470
  def _reduce_99( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

 # reduce 100 omitted

module_eval <<'.,.,', 'grammar.ra', 480
  def _reduce_101( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 488
  def _reduce_102( val, _values, result )
    msg = "Deprecation notice:  #{val[0].value} must now include '$' in prototype"
    msg += " at line %s" % @lexer.line
    msg += " in file %s" % @lexer.file if @lexer.file
    Puppet.warning msg
    result = ast AST::CompArgument, :children => [val[0],val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 495
  def _reduce_103( val, _values, result )
    msg = "Deprecation notice:  #{val[0].value} must now include '$' in prototype"
    msg += " at line %s" % @lexer.line
    msg += " in file %s" % @lexer.file if @lexer.file
    Puppet.warning msg
    result = ast AST::CompArgument, :children => [val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 497
  def _reduce_104( val, _values, result )
    result = ast AST::CompArgument, :children => [val[0],val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 499
  def _reduce_105( val, _values, result )
    result = ast AST::CompArgument, :children => [val[0]]
   result
  end
.,.,

 # reduce 106 omitted

module_eval <<'.,.,', 'grammar.ra', 504
  def _reduce_107( val, _values, result )
    result = ast AST::Name, :value => val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 509
  def _reduce_108( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = ast AST::Variable, :value => name
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 514
  def _reduce_109( val, _values, result )
    result = ast AST::Name, :value => val[0].sub(/^\$/,'')
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 522
  def _reduce_110( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 524
  def _reduce_111( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 112 omitted

 # reduce 113 omitted

 # reduce 114 omitted

module_eval <<'.,.,', 'grammar.ra', 529
  def _reduce_115( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
