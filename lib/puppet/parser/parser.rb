#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 786)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,16,169,170,202,286,97,196,255,294,53,196,84,296,54,141,145,255,256',
'116,-166,17,295,-160,136,138,142,144,42,202,49,1,194,11,14,194,25,30',
'37,194,45,50,3,9,16,17,290,137,140,36,381,147,148,131,132,134,135,194',
'139,143,34,9,16,9,16,133,8,180,-106,202,323,42,196,49,1,292,11,14,286',
'25,30,37,204,45,50,3,9,16,17,288,155,154,36,379,64,286,104,194,30,179',
'194,158,50,34,104,287,17,206,154,8,36,9,16,317,42,285,49,1,159,11,14',
'34,25,30,37,283,45,50,3,9,16,17,275,276,107,36,377,108,318,9,16,87,107',
'73,311,108,34,255,281,158,85,86,8,9,16,264,34,42,263,49,1,320,11,14',
'34,25,30,37,228,45,50,3,64,231,17,154,30,224,36,279,50,9,16,333,17,270',
'64,278,36,34,30,179,354,-113,50,8,104,267,17,34,355,97,36,98,283,194',
'53,275,276,42,54,49,1,34,11,14,99,25,30,37,325,45,50,3,9,16,17,155,182',
'-179,36,316,274,228,107,275,276,108,231,181,95,34,9,16,187,154,262,8',
'-113,-113,-113,-113,42,34,49,1,34,11,14,53,25,30,37,54,45,50,3,9,16',
'17,255,330,-159,36,299,64,34,182,182,30,179,233,227,50,34,9,16,17,181',
'181,8,36,53,187,187,42,54,49,1,328,11,14,34,25,30,37,211,45,50,3,9,16',
'17,182,139,143,36,251,64,288,203,133,30,179,181,350,50,34,349,187,17',
'339,191,8,36,139,143,98,42,122,49,1,133,11,14,34,25,30,37,343,45,50',
'3,9,16,17,116,-165,265,36,366,131,132,347,-105,-163,139,143,141,145',
'34,350,348,133,349,-160,8,136,138,142,144,42,-161,49,1,-164,11,14,-162',
'25,30,37,357,45,50,3,9,16,17,358,137,140,36,-159,147,148,131,132,134',
'135,-166,139,143,34,147,148,131,132,133,8,87,139,143,362,42,122,49,1',
'133,11,14,364,25,30,37,119,45,50,3,9,16,17,131,132,-162,36,346,139,143',
'9,16,118,-212,73,133,79,34,305,368,321,-161,258,8,255,281,255,256,42',
'-162,49,1,66,11,14,369,25,30,37,101,45,50,3,64,100,17,92,30,76,36,370',
'50,-161,116,373,17,68,9,16,36,34,73,82,79,308,375,8,9,16,283,34,73,119',
'79,310,314,56,9,16,66,282,73,312,79,255,281,382,383,,66,64,,,,30,76',
',,50,66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,,,17,68',
'9,16,36,34,112,82,-179,,,,9,16,,34,73,,79,,,,9,16,111,,73,,79,,,,9,16',
'66,64,73,,79,30,76,,,50,66,64,,17,,30,76,36,,50,66,64,,17,68,30,76,36',
'34,50,82,64,,17,68,30,76,36,34,50,82,,,17,68,9,16,36,34,73,82,79,,,',
'9,16,,34,59,60,61,57,,,9,16,66,,73,,79,59,60,61,57,,,64,,,,30,76,,,50',
'66,64,53,17,68,30,129,36,45,50,82,64,,17,,30,76,36,34,50,,,,17,68,9',
'16,36,34,73,82,79,,,,9,16,,34,73,,79,,,,9,16,66,259,73,,79,,,,9,16,66',
'64,73,,,30,76,,,50,66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34',
'50,82,64,,17,68,30,179,36,34,50,82,,,17,,9,16,36,34,73,,79,,,,9,16,',
'34,73,,79,,,,9,16,66,,73,,79,,,,9,16,66,64,73,,,30,76,,,50,66,64,,17',
'68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,64,,17,68,30,76,36,34',
'50,82,,,17,,9,16,36,34,73,152,79,,,,9,16,,34,,,,353,,,9,16,66,,73,,79',
'-29,-29,-29,-29,,,64,,,,30,76,,,50,66,64,,17,68,30,179,36,,50,82,64',
',17,,30,76,36,34,50,,,,17,68,9,16,36,34,73,82,79,,,,9,16,,34,73,,147',
'148,131,132,134,135,66,139,143,-25,-25,-25,-25,,133,,,64,,,,30,76,,',
'50,,64,,17,68,30,76,36,,50,82,300,,17,,,,36,34,,,141,145,-23,-23,-23',
'-23,,34,,136,138,142,144,,,147,148,131,132,,9,16,139,143,73,,79,,,133',
',,137,140,,,147,148,131,132,134,135,66,139,143,9,16,,,73,133,79,,64',
',,,30,76,,,50,,,,17,68,66,,36,9,16,82,,73,,79,,64,,34,,30,76,,,50,,',
',17,68,66,,36,9,16,82,,73,,79,,64,,34,,30,76,,,50,,,,17,68,66,,36,9',
'16,82,,73,,79,,64,,34,,30,76,,,50,,,,17,68,66,,36,9,16,82,,73,,79,,64',
',34,,30,76,,,50,9,16,,17,68,66,,36,,,82,,,,,,64,,34,,30,76,,,50,,,,17',
'68,,,36,64,53,82,,30,129,,45,50,,34,,17,9,16,,36,73,,79,,,,,,,,34,,',
'9,16,,,73,66,79,,,,,,,,,,64,,,,30,76,66,,50,,,,17,68,,,36,64,,82,,30',
'76,,,50,,34,,17,68,9,16,36,,73,82,79,,,,9,16,,34,73,,79,,,,9,16,66,',
'73,,79,,,,,,66,64,,,,30,76,,,50,66,64,,17,68,30,76,36,,50,82,64,,17',
'68,30,76,36,34,50,82,,,17,68,9,16,36,34,73,82,79,,,,9,16,,34,73,,79',
',,,9,16,66,,73,,79,,,,,,66,64,,,,30,76,,,50,66,64,,17,68,30,76,36,,50',
'82,64,,17,68,30,76,36,34,50,82,,,17,68,9,16,36,34,73,82,79,,,,9,16,',
'34,73,,79,,,,9,16,66,,73,,79,,,,,,66,64,,,,30,76,,,50,66,64,,17,68,30',
'76,36,,50,82,64,,17,68,30,76,36,34,50,82,,,17,68,9,16,36,34,73,82,79',
',,,9,16,,34,73,152,79,,,,9,16,66,208,73,,79,,,,,,66,64,,,,30,76,,,50',
'66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82,,,17,68,9,16',
'36,34,73,82,79,,,,9,16,,34,73,,79,,,,9,16,66,,73,,79,,,,9,16,66,64,',
',,30,76,,,50,66,64,,17,68,30,76,36,,50,82,64,,17,68,30,76,36,34,50,82',
'64,,17,68,30,179,36,34,50,82,,,17,,9,16,36,34,73,,79,,,,9,16,,34,73',
',79,,,,9,16,66,,73,,79,,,,,,66,64,,,,30,76,,,50,66,64,,17,68,30,76,36',
',50,82,64,,17,68,30,76,36,34,50,82,,214,17,68,,,36,34,,82,141,145,,',
',,212,34,,136,138,142,144,,,141,145,,,,,,,,136,138,142,144,,,,,137,140',
',,147,148,131,132,134,135,,139,143,,,137,140,,133,147,148,131,132,134',
'135,146,139,143,,,,,,133,141,145,,,,,,,,136,138,142,144,,,141,145,,',
',,,,,136,138,142,144,,,,,137,140,,,147,148,131,132,134,135,,139,143',
',,,,,133,147,148,131,132,134,135,,139,143,141,145,,,,133,,,,136,138',
'142,144,,,141,145,,,,,,,,136,138,142,144,,,,,137,140,,,147,148,131,132',
'134,135,,139,143,,,137,140,,133,147,148,131,132,134,135,,139,143,141',
'145,,,,133,,,,136,138,142,144,,,141,145,,,,,,,,136,138,142,144,,,,,137',
'140,,,147,148,131,132,134,135,,139,143,,,137,140,,133,147,148,131,132',
'134,135,,139,143,141,145,,,,133,,,,136,138,142,144,,,141,145,,,,,,,',
'136,138,142,144,,,,,137,140,,,147,148,131,132,134,135,,139,143,,,137',
'140,,133,147,148,131,132,134,135,,139,143,141,145,,,,133,,,254,136,138',
'142,144,,,141,145,,,,,,,,136,138,142,144,,,,,137,140,,,147,148,131,132',
'134,135,,139,143,,,,,,133,147,148,131,132,134,135,,139,143,141,145,',
',,133,,,,136,138,142,144,,,141,145,,,,,,,,136,138,142,144,,,,,137,140',
',,147,148,131,132,134,135,,139,143,,,,140,,133,147,148,131,132,134,135',
',139,143,141,145,,,,133,,,,136,138,142,144,,,141,145,,,,,,,,136,138',
'142,144,,,,,137,140,,,147,148,131,132,134,135,,139,143,,,137,140,,133',
'147,148,131,132,134,135,,139,143,141,145,,,,133,,,,136,138,142,144,',
',141,145,,,,,,,,136,138,142,144,,,,,137,140,,,147,148,131,132,134,135',
',139,143,,,137,140,,133,147,148,131,132,134,135,,139,143,141,145,,,',
'133,,,,136,138,142,144,,,,145,,147,148,131,132,134,135,136,139,143,',
',,,,133,,145,,147,148,131,132,134,135,136,139,143,,,,,145,133,147,148',
'131,132,134,135,136,139,143,,,,,,133,,145,,147,148,131,132,134,135,136',
'139,143,,,,,,133,147,148,131,132,134,135,,139,143,,,,,,133,,,,147,148',
'131,132,134,135,,139,143,,,,,,133' ]
        racc_action_table = arr = ::Array.new(2344, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,90,90,191,202,70,283,209,209,20,305,10,210,20,90,90,210,210,43,10',
'20,209,70,90,90,90,90,0,288,0,0,191,0,0,283,0,0,0,305,0,0,0,375,375',
'0,202,90,90,0,375,90,90,90,90,90,90,288,90,90,0,92,92,263,263,90,0,92',
'208,100,263,375,98,375,375,205,375,375,224,375,375,375,103,375,375,375',
'373,373,375,199,76,224,375,373,92,196,206,100,92,92,98,263,92,375,25',
'197,92,103,76,375,92,79,79,250,373,194,373,373,79,373,373,92,373,373',
'373,193,373,373,373,365,365,373,197,197,206,373,365,206,256,118,118',
'11,25,118,229,25,373,260,260,79,11,11,373,180,180,160,206,365,160,365',
'365,260,365,365,25,365,365,365,122,365,365,365,118,122,365,179,118,118',
'365,190,118,249,249,273,118,174,180,190,118,365,180,180,303,296,180',
'365,204,168,180,118,303,21,180,21,217,118,1,273,273,249,1,249,249,180',
'249,249,21,249,249,249,266,249,249,249,233,233,249,129,277,129,249,233',
'186,312,204,186,186,204,312,277,21,249,331,331,277,129,156,249,296,296',
'296,296,233,143,233,233,204,233,233,14,233,233,233,14,233,233,233,212',
'212,233,272,272,218,233,212,331,139,95,182,331,331,124,121,331,233,354',
'354,331,95,182,233,331,267,95,182,212,267,212,212,267,212,212,331,212',
'212,212,113,212,212,212,146,146,212,99,234,234,212,146,354,280,101,234',
'354,354,99,299,354,212,299,99,354,284,96,212,354,235,235,93,146,89,146',
'146,235,146,146,354,146,146,146,289,146,146,146,325,325,146,81,80,166',
'146,325,253,253,294,295,77,253,253,166,166,146,348,298,253,348,219,146',
'166,166,166,166,325,75,325,325,72,325,325,71,325,325,325,306,325,325',
'325,29,29,325,307,166,166,325,67,166,166,166,166,166,166,65,166,166',
'325,237,237,237,237,166,325,64,237,237,313,29,55,29,29,237,29,29,315',
'29,29,29,49,29,29,29,292,292,29,252,252,220,29,292,252,252,16,16,46',
'330,16,252,16,29,216,332,261,31,153,29,261,261,153,153,292,27,292,292',
'16,292,292,337,292,292,292,24,292,292,292,16,22,292,19,16,16,292,345',
'16,222,225,350,16,16,257,257,16,292,257,16,257,226,355,292,349,349,356',
'16,349,227,349,228,231,3,131,131,257,192,131,230,131,192,192,378,380',
',349,257,,,,257,257,,,257,131,349,,257,257,349,349,257,,349,257,131',
',349,349,131,131,349,257,131,349,,,131,131,37,37,131,349,37,131,37,',
',,42,42,,131,42,,42,,,,45,45,37,,45,,45,,,,262,262,42,37,262,,262,37',
'37,,,37,45,42,,37,,42,42,37,,42,262,45,,42,42,45,45,42,37,45,42,262',
',45,45,262,262,45,42,262,45,,,262,262,314,314,262,45,314,262,314,,,',
'58,58,,262,6,6,6,6,,,155,155,314,,155,,155,12,12,12,12,,,314,,,,314',
'314,,,314,155,58,58,314,314,58,58,314,58,58,314,155,,58,,155,155,58',
'314,155,,,,155,155,154,154,155,58,154,155,154,,,,310,310,,155,310,,310',
',,,66,66,154,154,66,,66,,,,308,308,310,154,308,,,154,154,,,154,66,310',
',154,154,310,310,154,,310,154,66,,310,310,66,66,310,154,66,310,308,',
'66,66,308,308,66,310,308,66,,,308,,68,68,308,66,68,,68,,,,148,148,,308',
'148,,148,,,,147,147,68,,147,,147,,,,211,211,148,68,211,,,68,68,,,68',
'147,148,,68,68,148,148,68,,148,68,147,,148,148,147,147,148,68,147,148',
'211,,147,147,211,211,147,148,211,147,,,211,,73,73,211,147,73,73,73,',
',,301,301,,211,,,,301,,,145,145,73,,145,,145,13,13,13,13,,,73,,,,73',
'73,,,73,145,301,,73,73,301,301,73,,301,73,145,,301,,145,145,301,73,145',
',,,145,145,144,144,145,301,144,145,144,,,,270,270,,145,270,,248,248',
'248,248,248,248,144,248,248,5,5,5,5,,248,,,144,,,,144,144,,,144,,270',
',144,144,270,270,144,,270,144,213,,270,,,,270,144,,,213,213,48,48,48',
'48,,270,,213,213,213,213,,,238,238,238,238,,290,290,238,238,290,,290',
',,238,,,213,213,,,213,213,213,213,213,213,290,213,213,82,82,,,82,213',
'82,,290,,,,290,290,,,290,,,,290,290,82,,290,84,84,290,,84,,84,,82,,290',
',82,82,,,82,,,,82,82,84,,82,85,85,82,,85,,85,,84,,82,,84,84,,,84,,,',
'84,84,85,,84,86,86,84,,86,,86,,85,,84,,85,85,,,85,,,,85,85,86,,85,87',
'87,85,,87,,87,,86,,85,,86,86,,,86,88,88,,86,86,87,,86,,,86,,,,,,87,',
'86,,87,87,,,87,,,,87,87,,,87,88,88,87,,88,88,,88,88,,87,,88,142,142',
',88,142,,142,,,,,,,,88,,,8,8,,,8,142,8,,,,,,,,,,142,,,,142,142,8,,142',
',,,142,142,,,142,8,,142,,8,8,,,8,,142,,8,8,286,286,8,,286,8,286,,,,141',
'141,,8,141,,141,,,,285,285,286,,285,,285,,,,,,141,286,,,,286,286,,,286',
'285,141,,286,286,141,141,286,,141,286,285,,141,141,285,285,141,286,285',
'141,,,285,285,97,97,285,141,97,285,97,,,,140,140,,285,140,,140,,,,138',
'138,97,,138,,138,,,,,,140,97,,,,97,97,,,97,138,140,,97,97,140,140,97',
',140,97,138,,140,140,138,138,140,97,138,140,,,138,138,137,137,138,140',
'137,138,137,,,,136,136,,138,136,,136,,,,135,135,137,,135,,135,,,,,,136',
'137,,,,137,137,,,137,135,136,,137,137,136,136,137,,136,137,135,,136',
'136,135,135,136,137,135,136,,,135,135,111,111,135,136,111,135,111,,',
',112,112,,135,112,112,112,,,,279,279,111,111,279,,279,,,,,,112,111,',
',,111,111,,,111,279,112,,111,111,112,112,111,,112,111,279,,112,112,279',
'279,112,111,279,112,,,279,279,134,134,279,112,134,279,134,,,,116,116',
',279,116,,116,,,,133,133,134,,133,,133,,,,214,214,116,134,,,,134,134',
',,134,133,116,,134,134,116,116,134,,116,134,133,,116,116,133,133,116',
'134,133,116,214,,133,133,214,214,133,116,214,133,,,214,,278,278,214',
'133,278,,278,,,,132,132,,214,132,,132,,,,169,169,278,,169,,169,,,,,',
'132,278,,,,278,278,,,278,169,132,,278,278,132,132,278,,132,278,169,',
'132,132,169,169,132,278,169,132,,117,169,169,,,169,132,,169,117,117',
',,,,114,169,,117,117,117,117,,,114,114,,,,,,,,114,114,114,114,,,,,117',
'117,,,117,117,117,117,117,117,,117,117,,,114,114,,117,114,114,114,114',
'114,114,63,114,114,,,,,,114,63,63,,,,,,,,63,63,63,63,,,336,336,,,,,',
',,336,336,336,336,,,,,63,63,,,63,63,63,63,63,63,,63,63,,,,,,63,336,336',
'336,336,336,336,,336,336,363,363,,,,336,,,,363,363,363,363,,,341,341',
',,,,,,,341,341,341,341,,,,,363,363,,,363,363,363,363,363,363,,363,363',
',,341,341,,363,341,341,341,341,341,341,,341,341,360,360,,,,341,,,,360',
'360,360,360,,,340,340,,,,,,,,340,340,340,340,,,,,360,360,,,360,360,360',
'360,360,360,,360,360,,,340,340,,360,340,340,340,340,340,340,,340,340',
'344,344,,,,340,,,,344,344,344,344,,,151,151,,,,,,,,151,151,151,151,',
',,,344,344,,,344,344,344,344,344,344,,344,344,,,151,151,,344,151,151',
'151,151,151,151,,151,151,149,149,,,,151,,,149,149,149,149,149,,,335',
'335,,,,,,,,335,335,335,335,,,,,149,149,,,149,149,149,149,149,149,,149',
'149,,,,,,149,335,335,335,335,335,335,,335,335,322,322,,,,335,,,,322',
'322,322,322,,,240,240,,,,,,,,240,240,240,240,,,,,322,322,,,322,322,322',
'322,322,322,,322,322,,,,240,,322,240,240,240,240,240,240,,240,240,319',
'319,,,,240,,,,319,319,319,319,,,165,165,,,,,,,,165,165,165,165,,,,,319',
'319,,,319,319,319,319,319,319,,319,319,,,165,165,,319,165,165,165,165',
'165,165,,165,165,164,164,,,,165,,,,164,164,164,164,,,163,163,,,,,,,',
'163,163,163,163,,,,,164,164,,,164,164,164,164,164,164,,164,164,,,163',
'163,,164,163,163,163,163,163,163,,163,163,243,243,,,,163,,,,243,243',
'243,243,,,,245,,239,239,239,239,239,239,245,239,239,,,,,,239,,244,,243',
'243,243,243,243,243,244,243,243,,,,,247,243,245,245,245,245,245,245',
'247,245,245,,,,,,245,,241,,244,244,244,244,244,244,241,244,244,,,,,',
'244,247,247,247,247,247,247,,247,247,,,,,,247,,,,241,241,241,241,241',
'241,,241,241,,,,,,241' ]
        racc_action_check = arr = ::Array.new(2344, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   170,   nil,   471,   nil,   890,   591,   nil,  1214,   nil,
    -3,   135,   604,   825,   223,   nil,   447,   nil,   nil,   462,
   -26,   195,   475,   nil,   478,   102,   nil,   445,   nil,   394,
   nil,   437,   nil,   nil,   nil,   nil,   nil,   561,   nil,   nil,
   nil,   nil,   571,    13,   nil,   581,   443,   nil,   930,   433,
   nil,   nil,   nil,   nil,   nil,   401,   nil,   nil,   648,   nil,
   nil,   nil,   nil,  1730,   414,   387,   725,   380,   782,   nil,
     0,   365,   362,   859,   nil,   359,    84,   342,   nil,   109,
   334,   350,  1034,   nil,  1059,  1084,  1109,  1134,  1151,   315,
    -2,   nil,    59,   329,   nil,   253,   324,  1328,    32,   289,
    29,   320,   nil,    70,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1462,  1472,   294,  1679,   nil,  1539,  1664,   137,   nil,
   nil,   270,   133,   nil,   273,   nil,   nil,   nil,   nil,   221,
   nil,   514,  1616,  1549,  1529,  1415,  1405,  1395,  1348,   214,
  1338,  1271,  1197,   191,   926,   879,   308,   802,   792,  1970,
   nil,  1925,   nil,   454,   705,   658,   235,   nil,   nil,   nil,
   146,   nil,   nil,  2165,  2150,  2105,   351,   nil,   160,  1626,
   nil,   nil,   nil,   nil,   174,   nil,   nil,   nil,   nil,   151,
   151,   nil,   254,   nil,   nil,   nil,   186,   nil,   nil,   nil,
   161,   -36,   512,   113,   104,   nil,    84,    83,   nil,    77,
   nil,   nil,    -6,   nil,   194,    67,    94,   nil,    45,    -3,
     6,   812,   265,   974,  1559,   nil,   437,   192,   249,   352,
   421,   nil,   468,   nil,    67,   486,   462,   509,   498,   119,
   509,   499,   nil,   222,   254,   275,   nil,   361,   953,  2192,
  2045,  2276,   nil,  2210,  2243,  2225,   nil,  2258,   891,   179,
   104,   nil,   387,   306,   nil,   nil,   131,   494,   nil,   nil,
   136,   452,   591,    61,   nil,   nil,   212,   256,   nil,   nil,
   936,   nil,   259,   158,   nil,   nil,   nil,   204,  1606,  1482,
   307,   nil,   nil,   -33,   322,  1281,  1261,   nil,   -11,   340,
  1009,   nil,   437,   nil,   338,   341,   185,   nil,   363,   294,
   nil,   869,   nil,   180,   nil,   -29,   383,   390,   735,   nil,
   715,   nil,   198,   398,   638,   422,   nil,   nil,   nil,  2090,
   nil,   nil,  2030,   nil,   nil,   351,   nil,   nil,   nil,   nil,
   443,   240,   449,   nil,   nil,  1985,  1745,   465,   nil,   nil,
  1865,  1805,   nil,   nil,  1910,   480,   nil,   nil,   340,   504,
   485,   nil,   nil,   nil,   283,   496,   496,   nil,   nil,   nil,
  1850,   nil,   nil,  1790,   nil,   127,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    84,   nil,    41,   nil,   nil,   516,   nil,
   517,   nil,   nil,   nil ]

racc_action_default = [
  -188,  -225,  -168,   -59,   -19,    -8,   -20,    -9,  -225,  -107,
  -223,  -205,  -225,   -10,  -180,  -159,  -225,   -83,   -11,  -225,
  -225,  -160,   -24,   -12,  -225,  -225,  -164,   -26,   -13,    -1,
  -112,   -27,   -14,    -2,  -213,  -163,   -81,   -82,   -28,   -15,
    -3,  -165,  -225,   -30,   -16,  -225,  -225,   -17,    -6,  -225,
  -167,   -18,    -7,  -180,  -179,  -188,   -60,   -34,  -225,   -31,
   -32,   -33,  -124,  -225,  -205,  -223,  -225,   -44,  -225,   -51,
   -45,   -48,   -46,  -225,   -49,   -43,   -82,   -52,   -47,  -225,
   -53,   -50,  -225,  -125,  -225,  -225,  -225,  -225,  -225,  -188,
  -225,  -108,  -225,  -225,   -58,  -188,   -62,  -225,   -94,  -188,
  -102,  -225,  -187,  -188,  -185,  -181,  -183,  -184,  -186,    -4,
   -39,  -225,  -225,   -38,  -225,  -117,  -225,  -225,   -94,  -169,
  -170,  -172,  -189,  -190,  -225,   -25,   -29,   -22,   -24,   -82,
   -23,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,  -225,
  -142,   -41,  -208,  -225,  -225,  -225,  -225,  -221,  -220,  -216,
  -225,  -217,  -135,   -92,   -91,   -93,  -225,   -21,  -188,  -225,
  -110,  -109,  -166,  -160,  -225,  -162,  -153,  -161,  -154,   -82,
  -225,  -205,  -188,   -75,   -74,   -65,  -225,   -82,   -66,   -68,
  -225,  -102,  -225,  -211,  -225,   -95,  -225,  -225,  -100,  -211,
  -101,  -103,  -225,   384,  -225,  -225,  -225,  -199,   -37,  -225,
  -225,  -225,  -225,  -225,  -225,   -77,  -225,  -211,   -85,   -86,
   -88,   -89,   -84,   -87,   -82,   -90,   -79,  -225,  -198,  -225,
  -211,  -196,  -193,  -225,  -132,  -131,  -126,  -133,  -134,  -137,
  -144,  -139,  -127,  -143,  -141,  -138,  -128,  -140,  -136,    -5,
  -225,  -116,  -129,  -130,  -145,  -209,  -210,  -225,  -206,  -106,
  -225,  -225,  -225,  -225,  -214,  -222,  -225,  -225,  -201,  -111,
  -225,  -156,  -211,  -225,   -63,   -71,   -70,  -225,  -225,  -225,
  -211,  -210,  -114,  -212,  -225,  -225,  -225,   -64,  -212,  -225,
  -225,  -182,  -225,  -200,  -210,   -35,  -206,   -40,  -225,  -120,
  -224,  -225,  -147,  -225,  -151,   -94,  -225,  -225,   -80,  -171,
  -225,  -191,  -212,  -225,  -225,  -225,  -174,  -115,  -207,   -42,
  -105,  -113,  -219,  -215,  -218,  -225,  -202,  -203,  -204,  -158,
  -210,  -225,  -225,   -69,   -67,   -72,   -73,  -225,   -96,   -56,
   -98,   -97,  -104,   -57,   -99,  -225,  -178,   -36,  -120,  -225,
  -225,  -119,  -148,  -146,  -225,  -225,  -211,   -55,   -54,   -78,
  -197,  -194,  -192,  -195,  -173,  -225,  -176,  -157,  -155,   -61,
  -177,  -118,  -121,  -225,  -152,  -225,   -76,  -175,  -225,  -123,
  -225,  -150,  -122,  -149 ]

racc_goto_table = [
    21,    35,    29,   115,   109,    55,   178,   221,   215,   110,
   250,   193,   161,    26,    41,   232,   198,   120,    89,   199,
    93,   174,   102,    91,    33,   302,    43,   105,   186,    21,
    35,   217,   197,   351,   124,   126,   125,   127,    58,   153,
    96,   301,    26,    41,    88,    38,   342,   334,    94,   176,
   171,   272,   307,   121,   226,    43,   266,   103,    21,    35,
   205,   331,   293,   192,   229,   126,   125,   167,   168,   230,
   113,    26,    41,   326,    38,   160,   298,   209,   210,   123,
    24,   nil,   371,   nil,    43,   nil,   130,   nil,    21,    35,
   nil,   nil,   173,    35,   271,   nil,   nil,   315,   nil,   nil,
   nil,    26,    41,    38,   nil,    26,    41,   198,   nil,   174,
   280,   nil,   352,   123,    43,   273,   130,   nil,   219,    35,
   260,   261,   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,
   nil,    26,    41,    38,   nil,   nil,   242,   nil,   nil,   nil,
   246,   nil,   nil,   304,   225,   nil,    21,    35,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   345,   nil,   nil,    26,
    41,   nil,   nil,   223,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    22,   nil,   nil,   269,   nil,    15,   nil,
   173,    35,    10,   297,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    38,   268,    26,    41,   309,   324,   221,   359,   338,
   nil,   102,    22,   102,   198,   361,   291,    15,   nil,   nil,
   nil,    10,    21,    35,   173,    35,   nil,   nil,   356,   nil,
   nil,   nil,   nil,   nil,   109,    26,    41,    26,    41,   nil,
   304,   128,   nil,    21,    35,   nil,    15,   378,    43,   380,
   nil,   nil,   329,   nil,   nil,   367,    26,    41,   nil,    21,
    35,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,    43,
   174,   128,    26,    41,   nil,   nil,    15,   nil,   nil,   nil,
    15,   327,   nil,   183,   172,    43,   nil,   183,    38,   nil,
   nil,   nil,   nil,   374,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,    35,    38,   nil,   218,   nil,   nil,   nil,
   nil,   173,    35,   nil,   nil,    26,    41,   nil,   219,    35,
   372,   nil,   nil,   nil,    26,    41,   nil,   nil,    43,    22,
   nil,    26,    41,   nil,    15,    21,    35,   365,    10,   nil,
   nil,   173,    35,   nil,   225,   nil,   nil,    38,    26,    41,
   109,   nil,    27,   nil,    26,    41,   nil,   nil,   nil,   nil,
   nil,    43,   nil,   223,   173,    35,   nil,   nil,    15,   nil,
   183,   nil,   172,   nil,   nil,    21,    35,    26,    41,   nil,
    38,    27,   nil,    21,    35,    21,    35,   nil,    26,    41,
   nil,   nil,   nil,   nil,   nil,    22,    26,    41,    26,    41,
    15,    43,    15,   nil,    10,   nil,   172,   nil,   nil,    43,
    27,    43,   284,    31,   nil,   nil,    22,   nil,   289,   nil,
    38,    15,   nil,   nil,   nil,    10,   nil,   nil,    38,   nil,
    38,   nil,    22,   nil,   nil,   nil,   306,    15,   nil,   nil,
    27,    10,    31,   nil,   175,   nil,   nil,   184,   nil,   313,
   nil,   184,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,   nil,   nil,
   220,    31,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,    15,
   nil,   332,   157,   172,   nil,   nil,   218,   nil,    27,   337,
   nil,    31,   nil,   nil,   nil,   177,   nil,   nil,    22,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,    10,   nil,    15,
   nil,   nil,   nil,   172,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   222,   175,   nil,   184,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   172,   nil,    22,   nil,
   nil,   nil,   nil,    15,   nil,   nil,    22,    10,    22,    31,
   nil,    15,    63,    15,    27,    10,   175,    10,   nil,   nil,
    90,   nil,   nil,   nil,   nil,   376,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   177,   nil,   nil,   114,   nil,   nil,   117,
   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   149,   nil,   150,   nil,   nil,    31,   nil,   177,   nil,   184,
   nil,   nil,   nil,   nil,   nil,   nil,   162,   nil,   163,   164,
   165,   166,   nil,   nil,    27,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   175,   nil,   nil,   nil,   nil,   nil,   nil,
   220,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   213,   nil,   nil,   nil,   nil,   nil,   157,    27,   nil,   nil,
   nil,   nil,   nil,   175,   nil,   234,   235,   236,   237,   238,
   239,   240,   241,   nil,   243,   244,   245,   nil,   247,   248,
   nil,   252,   253,   nil,   nil,    31,   175,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   177,   nil,   nil,    27,   nil,   nil,
   nil,   222,   nil,    90,   nil,    27,   nil,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,
   nil,   nil,   nil,   nil,   177,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   177,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   319,   nil,   nil,   nil,   nil,   322,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   335,   336,   nil,   nil,   nil,   nil,   nil,   340,
   341,   nil,   nil,   nil,   344,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   360,   nil,   nil,   nil,   363,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   114 ]

racc_goto_check = [
    34,    37,     2,    60,     4,    39,    69,    36,    52,    30,
     5,    42,    84,    35,    38,    81,    55,    71,    39,    44,
    34,    67,    63,    58,     3,    65,    27,    77,    47,    34,
    37,    42,    47,    61,    73,    10,     8,    21,    22,    28,
    46,    64,    35,    38,    22,    26,    57,    48,     6,    68,
    59,    70,    41,    72,    40,    27,    74,    75,    34,    37,
    76,    32,    78,    28,    79,    10,     8,    21,    73,    80,
    29,    35,    38,    82,    26,    83,     5,    28,    28,     3,
     1,   nil,    61,   nil,    27,   nil,     6,   nil,    34,    37,
   nil,   nil,    34,    37,    69,   nil,   nil,     5,   nil,   nil,
   nil,    35,    38,    26,   nil,    35,    38,    55,   nil,    67,
    44,   nil,    65,     3,    27,    47,     6,   nil,    34,    37,
    28,    28,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,    35,    38,    26,   nil,   nil,    63,   nil,   nil,   nil,
    63,   nil,   nil,    67,    27,   nil,    34,    37,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,    35,
    38,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    27,    23,   nil,   nil,    58,   nil,    33,   nil,
    34,    37,    54,    30,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,     3,    35,    38,    71,    84,    36,    52,    55,
   nil,    63,    23,    63,    55,    81,    77,    33,   nil,   nil,
   nil,    54,    34,    37,    34,    37,   nil,   nil,    42,   nil,
   nil,   nil,   nil,   nil,     4,    35,    38,    35,    38,   nil,
    67,    23,   nil,    34,    37,   nil,    33,     5,    27,     5,
   nil,   nil,    30,   nil,   nil,    69,    35,    38,   nil,    34,
    37,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,    27,
    67,    23,    35,    38,   nil,   nil,    33,   nil,   nil,   nil,
    33,    39,   nil,    33,    54,    27,   nil,    33,    26,   nil,
   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    34,    37,    26,   nil,    33,   nil,   nil,   nil,
   nil,    34,    37,   nil,   nil,    35,    38,   nil,    34,    37,
    60,   nil,   nil,   nil,    35,    38,   nil,   nil,    27,    23,
   nil,    35,    38,   nil,    33,    34,    37,     2,    54,   nil,
   nil,    34,    37,   nil,    27,   nil,   nil,    26,    35,    38,
     4,   nil,    24,   nil,    35,    38,   nil,   nil,   nil,   nil,
   nil,    27,   nil,    26,    34,    37,   nil,   nil,    33,   nil,
    33,   nil,    54,   nil,   nil,    34,    37,    35,    38,   nil,
    26,    24,   nil,    34,    37,    34,    37,   nil,    35,    38,
   nil,   nil,   nil,   nil,   nil,    23,    35,    38,    35,    38,
    33,    27,    33,   nil,    54,   nil,    54,   nil,   nil,    27,
    24,    27,    43,    25,   nil,   nil,    23,   nil,    43,   nil,
    26,    33,   nil,   nil,   nil,    54,   nil,   nil,    26,   nil,
    26,   nil,    23,   nil,   nil,   nil,    43,    33,   nil,   nil,
    24,    54,    25,   nil,    24,   nil,   nil,    24,   nil,    43,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
    24,    25,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,
    33,   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,    33,
   nil,    43,    25,    54,   nil,   nil,    33,   nil,    24,    43,
   nil,    25,   nil,   nil,   nil,    25,   nil,   nil,    23,   nil,
   nil,   nil,   nil,    33,   nil,   nil,   nil,    54,   nil,    33,
   nil,   nil,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    25,    24,   nil,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,    54,   nil,    23,   nil,
   nil,   nil,   nil,    33,   nil,   nil,    23,    54,    23,    25,
   nil,    33,    31,    33,    24,    54,    24,    54,   nil,   nil,
    31,   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    31,   nil,   nil,    31,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    31,   nil,    31,   nil,   nil,    25,   nil,    25,   nil,    24,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,    31,    31,
    31,    31,   nil,   nil,    24,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    31,   nil,   nil,   nil,   nil,   nil,    25,    24,   nil,   nil,
   nil,   nil,   nil,    24,   nil,    31,    31,    31,    31,    31,
    31,    31,    31,   nil,    31,    31,    31,   nil,    31,    31,
   nil,    31,    31,   nil,   nil,    25,    24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,    24,   nil,   nil,
   nil,    25,   nil,    31,   nil,    24,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,    25,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    31,    31,   nil,   nil,   nil,   nil,   nil,    31,
    31,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    31 ]

racc_goto_pointer = [
   nil,    80,     2,    24,   -25,  -136,    28,   nil,   -22,   nil,
   -23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -21,    32,   173,   342,   403,    45,    26,   -34,    33,
   -28,   544,  -211,   178,     0,    13,  -111,     1,    14,     4,
   -64,  -174,   -87,   209,   -81,   nil,    19,   -67,  -230,   nil,
   nil,   nil,  -110,   nil,   182,   -84,   nil,  -242,     7,   -40,
   -39,  -266,   nil,    -3,  -173,  -189,   nil,   -71,   -43,   -86,
  -129,   -32,     4,   -21,  -112,    32,   -43,     2,  -144,   -58,
   -53,  -107,  -194,    -4,   -67,   nil ]

racc_goto_default = [
   nil,   nil,   249,   185,    40,   nil,    48,    52,     5,     7,
    13,    18,    23,    28,    32,    39,    44,    47,    51,     4,
     6,    12,   nil,    69,    71,    75,    78,    81,   nil,   nil,
    62,   151,   257,    67,    70,    72,    74,    77,    80,    46,
   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   188,   277,
   189,   190,   nil,   216,    65,   195,   200,   201,   nil,   nil,
   nil,   nil,    83,     2,   nil,   nil,   303,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,
   nil,   nil,   nil,   nil,   nil,   156 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 89, :_reduce_21,
  3, 89, :_reduce_22,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  4, 83, :_reduce_35,
  5, 83, :_reduce_36,
  3, 83, :_reduce_37,
  2, 83, :_reduce_38,
  1, 98, :_reduce_39,
  3, 98, :_reduce_40,
  1, 97, :_reduce_41,
  3, 97, :_reduce_42,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  5, 75, :_reduce_54,
  5, 75, :_reduce_55,
  5, 75, :_reduce_56,
  5, 87, :_reduce_57,
  2, 76, :_reduce_58,
  1, 114, :_reduce_59,
  2, 114, :_reduce_60,
  6, 77, :_reduce_61,
  2, 77, :_reduce_62,
  3, 115, :_reduce_63,
  3, 115, :_reduce_64,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  3, 116, :_reduce_67,
  1, 117, :_reduce_none,
  3, 117, :_reduce_69,
  1, 118, :_reduce_70,
  1, 118, :_reduce_71,
  3, 119, :_reduce_72,
  3, 119, :_reduce_73,
  1, 120, :_reduce_none,
  1, 120, :_reduce_none,
  4, 121, :_reduce_76,
  1, 109, :_reduce_77,
  3, 109, :_reduce_78,
  0, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 107, :_reduce_81,
  1, 102, :_reduce_82,
  1, 103, :_reduce_83,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  3, 78, :_reduce_91,
  3, 78, :_reduce_92,
  3, 88, :_reduce_93,
  0, 111, :_reduce_94,
  1, 111, :_reduce_95,
  3, 111, :_reduce_96,
  3, 124, :_reduce_97,
  3, 124, :_reduce_98,
  3, 125, :_reduce_99,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  0, 113, :_reduce_102,
  1, 113, :_reduce_103,
  3, 113, :_reduce_104,
  4, 106, :_reduce_105,
  3, 106, :_reduce_106,
  1, 94, :_reduce_107,
  2, 94, :_reduce_108,
  2, 127, :_reduce_109,
  1, 128, :_reduce_110,
  2, 128, :_reduce_111,
  1, 104, :_reduce_112,
  4, 92, :_reduce_113,
  4, 92, :_reduce_114,
  5, 81, :_reduce_115,
  4, 81, :_reduce_116,
  2, 80, :_reduce_117,
  5, 129, :_reduce_118,
  4, 129, :_reduce_119,
  0, 130, :_reduce_none,
  2, 130, :_reduce_121,
  4, 130, :_reduce_122,
  3, 130, :_reduce_123,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  3, 100, :_reduce_126,
  3, 100, :_reduce_127,
  3, 100, :_reduce_128,
  3, 100, :_reduce_129,
  3, 100, :_reduce_130,
  3, 100, :_reduce_131,
  3, 100, :_reduce_132,
  3, 100, :_reduce_133,
  3, 100, :_reduce_134,
  2, 100, :_reduce_135,
  3, 100, :_reduce_136,
  3, 100, :_reduce_137,
  3, 100, :_reduce_138,
  3, 100, :_reduce_139,
  3, 100, :_reduce_140,
  3, 100, :_reduce_141,
  2, 100, :_reduce_142,
  3, 100, :_reduce_143,
  3, 100, :_reduce_144,
  3, 100, :_reduce_145,
  5, 79, :_reduce_146,
  1, 133, :_reduce_147,
  2, 133, :_reduce_148,
  5, 134, :_reduce_149,
  4, 134, :_reduce_150,
  1, 135, :_reduce_151,
  3, 135, :_reduce_152,
  3, 95, :_reduce_153,
  1, 137, :_reduce_none,
  4, 137, :_reduce_155,
  1, 139, :_reduce_none,
  3, 139, :_reduce_157,
  3, 138, :_reduce_158,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_none,
  1, 136, :_reduce_167,
  1, 136, :_reduce_none,
  1, 140, :_reduce_169,
  1, 141, :_reduce_none,
  3, 141, :_reduce_171,
  2, 82, :_reduce_172,
  6, 84, :_reduce_173,
  5, 84, :_reduce_174,
  7, 85, :_reduce_175,
  6, 85, :_reduce_176,
  6, 86, :_reduce_177,
  5, 86, :_reduce_178,
  1, 108, :_reduce_179,
  1, 108, :_reduce_180,
  1, 144, :_reduce_181,
  3, 144, :_reduce_182,
  1, 146, :_reduce_183,
  1, 147, :_reduce_184,
  1, 147, :_reduce_185,
  1, 147, :_reduce_186,
  1, 147, :_reduce_none,
  0, 72, :_reduce_188,
  0, 148, :_reduce_189,
  1, 142, :_reduce_none,
  3, 142, :_reduce_191,
  4, 142, :_reduce_192,
  1, 149, :_reduce_none,
  3, 149, :_reduce_194,
  3, 150, :_reduce_195,
  1, 150, :_reduce_196,
  3, 150, :_reduce_197,
  1, 150, :_reduce_198,
  1, 145, :_reduce_none,
  2, 145, :_reduce_200,
  1, 143, :_reduce_none,
  2, 143, :_reduce_202,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 93, :_reduce_205,
  3, 105, :_reduce_206,
  4, 105, :_reduce_207,
  2, 105, :_reduce_208,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  0, 112, :_reduce_none,
  1, 112, :_reduce_212,
  1, 132, :_reduce_213,
  3, 131, :_reduce_214,
  4, 131, :_reduce_215,
  2, 131, :_reduce_216,
  1, 152, :_reduce_none,
  3, 152, :_reduce_218,
  3, 153, :_reduce_219,
  1, 154, :_reduce_220,
  1, 154, :_reduce_221,
  4, 123, :_reduce_222,
  1, 96, :_reduce_none,
  4, 96, :_reduce_224 ]

racc_reduce_n = 225

racc_shift_n = 384

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.ra', 73)
  def _reduce_21(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 76)
  def _reduce_22(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'grammar.ra', 91)
  def _reduce_35(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 98)
  def _reduce_36(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 104)
  def _reduce_37(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 111)
  def _reduce_38(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 118)
  def _reduce_39(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 121)
  def _reduce_40(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_54(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 144)
  def _reduce_55(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 147)
  def _reduce_56(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 154)
  def _reduce_57(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 161)
  def _reduce_58(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_59(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_60(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 183)
  def _reduce_61(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 201)
  def _reduce_62(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 219)
  def _reduce_63(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 227)
  def _reduce_64(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.ra', 240)
  def _reduce_67(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 245)
  def _reduce_69(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 249)
  def _reduce_70(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 250)
  def _reduce_71(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 253)
  def _reduce_72(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 258)
  def _reduce_73(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'grammar.ra', 267)
  def _reduce_76(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 270)
  def _reduce_77(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 272)
  def _reduce_78(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'grammar.ra', 280)
  def _reduce_81(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 284)
  def _reduce_82(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_83(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_91(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 306)
  def _reduce_92(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 310)
  def _reduce_93(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_94(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 318)
  def _reduce_95(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 320)
  def _reduce_96(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 325)
  def _reduce_97(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 328)
  def _reduce_98(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_99(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'grammar.ra', 341)
  def _reduce_102(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 343)
  def _reduce_103(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_104(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 351)
  def _reduce_105(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 356)
  def _reduce_106(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_107(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 363)
  def _reduce_108(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 365)
  def _reduce_109(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 367)
  def _reduce_110(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_111(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 371)
  def _reduce_112(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_113(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 378)
  def _reduce_114(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_115(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 391)
  def _reduce_116(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 400)
  def _reduce_117(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 404)
  def _reduce_118(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 415)
  def _reduce_119(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'grammar.ra', 428)
  def _reduce_121(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 431)
  def _reduce_122(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 435)
  def _reduce_123(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_126(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 457)
  def _reduce_127(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_128(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_129(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_130(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_131(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_132(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_133(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_134(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_135(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_136(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_137(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_138(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_139(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_140(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_141(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_142(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_143(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_144(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_145(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 515)
  def _reduce_146(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_147(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 521)
  def _reduce_148(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_149(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_150(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_151(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_152(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_153(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'grammar.ra', 551)
  def _reduce_155(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'grammar.ra', 557)
  def _reduce_157(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_158(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'grammar.ra', 578)
  def _reduce_167(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'grammar.ra', 583)
  def _reduce_169(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_171(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 588)
  def _reduce_172(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_173(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_174(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 614)
  def _reduce_175(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 621)
  def _reduce_176(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 630)
  def _reduce_177(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 635)
  def _reduce_178(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 639)
  def _reduce_179(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 640)
  def _reduce_180(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 645)
  def _reduce_181(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_182(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 653)
  def _reduce_183(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_184(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 657)
  def _reduce_185(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 658)
  def _reduce_186(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_188(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_189(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'grammar.ra', 671)
  def _reduce_191(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_192(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 193 omitted

module_eval(<<'.,.,', 'grammar.ra', 680)
  def _reduce_194(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 686)
  def _reduce_195(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 690)
  def _reduce_196(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_197(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_198(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 199 omitted

module_eval(<<'.,.,', 'grammar.ra', 700)
  def _reduce_200(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 201 omitted

module_eval(<<'.,.,', 'grammar.ra', 705)
  def _reduce_202(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 711)
  def _reduce_205(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_206(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 715)
  def _reduce_207(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 716)
  def _reduce_208(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_212(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_213(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 729)
  def _reduce_214(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 736)
  def _reduce_215(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 742)
  def _reduce_216(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 217 omitted

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_218(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 756)
  def _reduce_219(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 759)
  def _reduce_220(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 760)
  def _reduce_221(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 763)
  def _reduce_222(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 223 omitted

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_224(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
