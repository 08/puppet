#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id0df015d0a0', 'grammar.ra', 633
require 'puppet/parser/functions'

attr_reader :file, :interp
attr_accessor :files

# Add context to a message; useful for error messages and such.
def addcontext(message, obj = nil)
    obj ||= @lexer

    message += " on line %s" % obj.line
    if file = obj.file
        message += " in file %s" % file
    end

    return message
end

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = ast AST::ASTArray, :children => args
    end

    return result
end

# Create an AST object, and automatically add the file and line information if
# available.
def ast(klass, hash = nil)
    hash ||= {}
    unless hash[:line]
        hash[:line] = @lexer.line
    end

    unless hash[:file]
        if file = @lexer.file
            hash[:file] = file
        end
    end

    return klass.new(hash)
end

# Raise a Parse error.
def error(message)
    except = Puppet::ParseError.new(message)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

def file=(file)
    unless FileTest.exists?(file)
        unless file =~ /\.pp$/
            file = file + ".pp"
        end
        unless FileTest.exists?(file)
            raise Puppet::Error, "Could not find file %s" % file
        end
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::LoadedFile.new(file)
        @lexer.file = file
    end
end

def initialize(interpreter)
    @interp = interpreter
    initvars()
end

# Initialize or reset all of our variables.
def initvars
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
end

# The fully qualifed name, with the full namespace.
def fqname(name)
    [@lexer.namespace, name].join("::").sub(/^::/, '')
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse(string = nil)
    if string
        self.string = string
    end
    begin
        main = yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.set_backtrace except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.set_backtrace except.backtrace
        raise error
    end
    if main
        # Store the results as the top-level class.
        interp.newclass("", :code => main)
        return main
    end
ensure
    @lexer.clear
end

# See if any of the files have changed.
def reparse?
    if file = @files.detect { |file| file.changed?  }
        return file.stamp
    else
        return false
    end
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id0df015d0a0

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 51, :_reduce_1,
 1, 51, :_reduce_none,
 1, 52, :_reduce_none,
 2, 52, :_reduce_4,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 4, 62, :_reduce_17,
 2, 62, :_reduce_18,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 68, :_reduce_none,
 3, 68, :_reduce_22,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_26,
 1, 69, :_reduce_none,
 3, 69, :_reduce_28,
 5, 55, :_reduce_29,
 5, 55, :_reduce_30,
 5, 55, :_reduce_31,
 5, 66, :_reduce_32,
 2, 56, :_reduce_33,
 1, 80, :_reduce_34,
 2, 80, :_reduce_35,
 2, 57, :_reduce_36,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 3, 82, :_reduce_39,
 3, 82, :_reduce_40,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 3, 83, :_reduce_43,
 1, 84, :_reduce_none,
 3, 84, :_reduce_45,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 3, 86, :_reduce_48,
 3, 86, :_reduce_49,
 1, 87, :_reduce_none,
 1, 87, :_reduce_none,
 4, 89, :_reduce_52,
 1, 76, :_reduce_none,
 3, 76, :_reduce_54,
 0, 77, :_reduce_none,
 1, 77, :_reduce_none,
 1, 71, :_reduce_57,
 1, 91, :_reduce_58,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 3, 58, :_reduce_65,
 0, 78, :_reduce_66,
 1, 78, :_reduce_67,
 3, 78, :_reduce_68,
 3, 95, :_reduce_69,
 1, 96, :_reduce_none,
 3, 96, :_reduce_71,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 4, 99, :_reduce_87,
 1, 73, :_reduce_88,
 1, 73, :_reduce_89,
 1, 98, :_reduce_90,
 4, 74, :_reduce_91,
 4, 74, :_reduce_92,
 6, 60, :_reduce_93,
 0, 101, :_reduce_none,
 4, 101, :_reduce_95,
 1, 100, :_reduce_none,
 5, 59, :_reduce_97,
 1, 102, :_reduce_none,
 2, 102, :_reduce_99,
 5, 103, :_reduce_100,
 4, 103, :_reduce_101,
 1, 104, :_reduce_none,
 3, 104, :_reduce_103,
 3, 92, :_reduce_104,
 1, 106, :_reduce_none,
 3, 106, :_reduce_106,
 1, 108, :_reduce_none,
 3, 108, :_reduce_108,
 3, 107, :_reduce_109,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_116,
 2, 61, :_reduce_117,
 6, 63, :_reduce_118,
 5, 63, :_reduce_119,
 6, 64, :_reduce_120,
 5, 64, :_reduce_121,
 6, 65, :_reduce_122,
 5, 65, :_reduce_123,
 1, 75, :_reduce_none,
 1, 75, :_reduce_none,
 1, 111, :_reduce_none,
 3, 111, :_reduce_127,
 1, 113, :_reduce_none,
 1, 113, :_reduce_none,
 1, 113, :_reduce_none,
 0, 53, :_reduce_131,
 0, 114, :_reduce_132,
 1, 109, :_reduce_none,
 3, 109, :_reduce_134,
 3, 109, :_reduce_135,
 1, 115, :_reduce_none,
 3, 115, :_reduce_137,
 3, 116, :_reduce_138,
 1, 116, :_reduce_139,
 3, 116, :_reduce_140,
 1, 116, :_reduce_141,
 1, 112, :_reduce_none,
 2, 112, :_reduce_143,
 1, 110, :_reduce_none,
 2, 110, :_reduce_145,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 118, :_reduce_none,
 1, 118, :_reduce_none,
 1, 72, :_reduce_150,
 3, 93, :_reduce_151,
 2, 93, :_reduce_152,
 1, 97, :_reduce_none,
 1, 97, :_reduce_none,
 0, 79, :_reduce_none,
 1, 79, :_reduce_156 ]

racc_reduce_n = 157

racc_shift_n = 256

racc_action_table = [
    49,    51,    53,    41,  -124,    51,    53,    51,    53,    51,
    53,   184,    49,    95,    58,   228,    58,    63,    51,    53,
    46,    43,    58,    33,   114,    79,   153,    90,   227,    80,
     4,    45,   114,    74,   160,    45,    55,    45,    92,    45,
    97,   186,    55,    47,    97,    44,   188,    47,    45,    47,
    37,    47,    65,    69,   150,   151,    75,    63,    51,    53,
    33,   108,   184,    63,    51,    53,   111,     4,   191,    63,
    51,    53,   183,    74,   212,    63,    51,    53,   193,    74,
   155,    63,    51,    53,    38,    74,  -111,    39,    45,   154,
   186,    74,    65,    69,    45,   188,    75,    74,    65,    69,
    45,  -110,    75,   183,    65,    69,    45,  -113,    75,  -112,
    65,    69,    45,   195,    75,    96,    65,    69,    51,    53,
    75,    63,    51,    53,  -110,   200,    45,    63,    51,    53,
  -111,    97,   181,    63,    51,    53,   115,    74,   110,    63,
    51,    53,  -114,    74,    49,    63,    51,    53,    79,    74,
   150,   151,    45,    49,  -113,    74,    65,    69,    45,   114,
    75,   137,    65,    69,    45,   213,    75,   109,    65,    69,
    45,   108,    75,  -112,    65,    69,    45,   220,    75,   236,
    65,   170,   219,   119,    75,    63,    51,    53,    33,   218,
    18,    63,    51,    53,    79,     4,   158,    37,    51,    53,
    15,    74,    21,    25,   224,     1,     5,   137,     8,   225,
    13,   226,    17,   137,    26,   157,    45,     4,   235,    80,
    65,    69,    45,   231,    75,   119,    65,   134,    45,    18,
    75,    38,    65,   170,    39,   144,    75,   229,   146,    15,
   233,    21,    25,    96,     1,     5,  -115,     8,    18,    13,
   183,    17,    87,    26,    45,  -111,     4,  -110,    15,    97,
    21,    25,   255,     1,     5,  -113,     8,  -112,    13,  -115,
    17,    96,    26,    18,   156,     4,   238,    33,   150,   151,
   141,   247,    45,    15,     4,    21,    25,    97,     1,     5,
    96,     8,    18,    13,    86,    17,   116,    26,    51,    53,
     4,    45,    15,   242,    21,    25,    97,     1,     5,   147,
     8,    83,    13,   137,    17,   121,    26,   140,   251,     4,
    51,    53,   163,    81,   217,   183,   164,   166,    45,    18,
   249,   119,    65,   170,   123,   137,    75,    51,    53,    15,
   119,    21,    25,    32,     1,     5,   223,     8,   nil,    13,
    45,    17,   137,    26,    65,   170,     4,   254,    75,   240,
   nil,   164,   166,   nil,   nil,   nil,   nil,    45,    18,   nil,
   nil,    65,   170,   nil,   nil,    75,   210,   nil,    15,   nil,
    21,    25,   nil,     1,     5,   nil,     8,    18,    13,   nil,
    17,   nil,    26,    51,    53,     4,   nil,    15,   nil,    21,
    25,   nil,     1,     5,   nil,     8,   nil,    13,   137,    17,
   nil,    26,   nil,   nil,     4,    51,    53,    51,    53,   nil,
   173,   nil,   nil,    45,   nil,   nil,   nil,    65,   170,   nil,
   137,    75,   137,   198,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    45,   nil,    45,   nil,    65,
   170,    65,   170,    75,    15,    75,    21,    25,   196,     1,
     5,   nil,     8,   nil,    13,   nil,    17,   nil,    26,    18,
   nil,     4,   nil,    51,    53,   nil,   nil,   nil,   nil,    15,
   nil,    21,    25,   nil,     1,     5,   nil,     8,   137,    13,
   nil,    17,   nil,    26,   nil,   nil,     4,   nil,   nil,   nil,
    18,   nil,   nil,    45,   nil,   nil,   nil,    65,   170,   nil,
    15,    75,    21,    25,   nil,     1,     5,   nil,     8,    18,
    13,   nil,    17,   nil,    26,   nil,   nil,     4,   nil,    15,
   nil,    21,    25,   nil,     1,     5,   nil,     8,    18,    13,
   nil,    17,   nil,    26,   nil,   nil,     4,   nil,    15,   nil,
    21,    25,   nil,     1,     5,   nil,     8,    18,    13,   nil,
    17,   nil,    26,   nil,   nil,     4,   nil,    15,   nil,    21,
    25,   nil,     1,     5,   nil,     8,   nil,    13,   nil,    17,
   nil,    26,   nil,   nil,     4 ]

racc_action_check = [
    13,    13,    13,     9,    13,   114,   114,    46,    46,   108,
   108,   134,    69,    35,   109,   189,    13,    17,    17,    17,
    13,    11,    46,     9,   134,    18,   100,    34,   189,    18,
     9,    13,    69,    17,   109,   114,    13,    46,    35,   108,
   114,   228,    46,    13,   108,    11,   228,   114,    17,    46,
     8,   108,    17,    17,   100,   100,    17,    49,    49,    49,
    25,   167,   119,    63,    63,    63,    63,    25,   125,    15,
    15,    15,   128,    49,   167,   165,   165,   165,   129,    63,
   104,    79,    79,    79,     8,    15,   130,     8,    49,   104,
   123,   165,    49,    49,    63,   123,    49,    79,    63,    63,
    15,   133,    63,   118,    15,    15,   165,   135,    15,   136,
   165,   165,    79,   139,   165,    43,    79,    79,    21,    21,
    79,   184,   184,   184,    68,   149,    43,   226,   226,   226,
    64,    43,   117,   224,   224,   224,    70,   184,    62,    32,
    32,    32,    61,   226,   160,   195,   195,   195,    58,   224,
   149,   149,   184,    55,    72,    32,   184,   184,   226,   170,
   184,   195,   226,   226,   224,   172,   226,    52,   224,   224,
    32,    50,   224,    73,    32,    32,   195,   182,    32,   199,
   195,   195,   179,   183,   195,   213,   213,   213,     5,   179,
   199,    87,    87,    87,    74,     5,   107,    95,   219,   219,
   199,   213,   199,   199,   186,   199,   199,    87,   199,   187,
   199,   188,   199,   219,   199,   106,   213,   199,   197,    41,
   213,   213,    87,   192,   213,   193,    87,    87,   219,   197,
    87,    95,   219,   219,    95,    92,   219,   191,    92,   197,
   194,   197,   197,   152,   197,   197,    77,   197,   191,   197,
   122,   197,    27,   197,   152,   203,   197,   205,   191,   152,
   191,   191,   253,   191,   191,   206,   191,   207,   191,   208,
   191,    96,   191,   253,   105,   191,   210,    90,   105,   105,
    90,   230,    96,   253,    90,   253,   253,    96,   253,   253,
    44,   253,   230,   253,    26,   253,    78,   253,   241,   241,
   253,    44,   230,   218,   230,   230,    44,   230,   230,    93,
   230,    22,   230,   241,   230,    81,   230,    89,   242,   230,
   177,   177,   113,    20,   177,   232,   113,   113,   241,   242,
   238,    80,   241,   241,    85,   177,   241,   173,   173,   242,
    83,   242,   242,     1,   242,   242,   185,   242,   nil,   242,
   177,   242,   173,   242,   177,   177,   242,   252,   177,   215,
   nil,   215,   215,   nil,   nil,   nil,   nil,   173,   252,   nil,
   nil,   173,   173,   nil,   nil,   173,   162,   nil,   252,   nil,
   252,   252,   nil,   252,   252,   nil,   252,   162,   252,   nil,
   252,   nil,   252,   116,   116,   252,   nil,   162,   nil,   162,
   162,   nil,   162,   162,   nil,   162,   nil,   162,   116,   162,
   nil,   162,   nil,   nil,   162,   154,   154,   115,   115,   nil,
   115,   nil,   nil,   116,   nil,   nil,   nil,   116,   116,   nil,
   154,   116,   115,   147,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   147,   154,   nil,   115,   nil,   154,
   154,   115,   115,   154,   147,   115,   147,   147,   140,   147,
   147,   nil,   147,   nil,   147,   nil,   147,   nil,   147,   140,
   nil,   147,   nil,   155,   155,   nil,   nil,   nil,   nil,   140,
   nil,   140,   140,   nil,   140,   140,   nil,   140,   155,   140,
   nil,   140,   nil,   140,   nil,   nil,   140,   nil,   nil,   nil,
   110,   nil,   nil,   155,   nil,   nil,   nil,   155,   155,   nil,
   110,   155,   110,   110,   nil,   110,   110,   nil,   110,   249,
   110,   nil,   110,   nil,   110,   nil,   nil,   110,   nil,   249,
   nil,   249,   249,   nil,   249,   249,   nil,   249,    24,   249,
   nil,   249,   nil,   249,   nil,   nil,   249,   nil,    24,   nil,
    24,    24,   nil,    24,    24,   nil,    24,     0,    24,   nil,
    24,   nil,    24,   nil,   nil,    24,   nil,     0,   nil,     0,
     0,   nil,     0,     0,   nil,     0,   nil,     0,   nil,     0,
   nil,     0,   nil,   nil,     0 ]

racc_action_pointer = [
   539,   330,   nil,   nil,   nil,   150,   nil,   nil,    46,   -15,
   nil,     2,   nil,    -2,   nil,    67,   nil,    15,    23,   nil,
   323,   115,   305,   nil,   520,    22,   252,   246,   nil,   nil,
   nil,   nil,   137,   nil,    -8,     3,   nil,   nil,   nil,   nil,
   nil,   213,   nil,    93,   268,   nil,     4,   nil,   nil,    55,
   161,   nil,   157,   nil,   nil,   151,   nil,   nil,   146,   nil,
   nil,   121,   132,    61,   109,   nil,   nil,   nil,   103,    10,
   115,   nil,   133,   152,   192,   nil,   nil,   225,   290,    79,
   293,   315,   nil,   302,   nil,   312,   nil,   189,   nil,   311,
   239,   nil,   197,   303,   nil,   193,   249,   nil,   nil,   nil,
     6,   nil,   nil,   nil,    65,   230,   192,   191,     6,    -4,
   482,   nil,   nil,   317,     2,   414,   390,   127,    93,    53,
   nil,   nil,   240,    57,   nil,    62,   nil,   nil,    62,    61,
    65,   nil,   nil,    80,     2,    86,    88,   nil,   nil,    74,
   451,   nil,   nil,   nil,   nil,   nil,   nil,   426,   nil,   102,
   nil,   nil,   221,   nil,   412,   470,   nil,   nil,   nil,   nil,
   142,   nil,   369,   nil,   nil,    73,   nil,    51,   nil,   nil,
   137,   nil,   156,   334,   nil,   nil,   nil,   317,   nil,   172,
   nil,   nil,   170,   145,   119,   339,   191,   186,   198,     5,
   nil,   230,   216,   187,   233,   143,   nil,   211,   nil,   172,
   nil,   nil,   nil,   234,   nil,   236,   244,   246,   248,   nil,
   247,   nil,   nil,   183,   nil,   352,   nil,   nil,   297,   195,
   nil,   nil,   nil,   nil,   131,   nil,   125,   nil,     8,   nil,
   274,   nil,   315,   nil,   nil,   nil,   nil,   nil,   324,   nil,
   nil,   295,   311,   nil,   nil,   nil,   nil,   nil,   nil,   501,
   nil,   nil,   350,   255,   nil,   nil ]

racc_action_default = [
  -131,  -157,   -16,    -5,  -125,  -157,    -6,    -7,  -157,  -157,
    -8,  -157,    -9,   -38,   -10,  -157,   -11,  -157,   -37,   -12,
  -157,  -157,  -157,   -13,    -1,  -157,   -34,  -157,   -14,    -2,
   -15,    -3,  -157,  -124,  -131,  -131,  -126,  -129,  -128,  -130,
   -33,  -157,   -36,  -131,  -131,  -150,  -157,   -26,   -18,  -157,
   -19,   -88,   -20,   -89,   -21,   -57,   -23,   -24,  -157,   -25,
   -27,   -86,  -157,  -157,   -80,   -90,   -82,   -84,   -79,   -57,
  -157,   -96,   -83,   -78,   -58,  -116,   -85,   -81,  -157,  -157,
   -66,  -157,  -117,   -66,    -4,  -131,   -35,   -66,   -65,  -157,
  -157,  -144,  -157,  -157,  -142,  -157,  -131,   -57,   -51,   -50,
  -157,   -42,   -44,   -41,  -157,  -157,  -157,  -157,  -157,  -157,
  -157,  -152,   -70,  -157,  -157,  -157,  -157,  -157,  -155,  -157,
   -67,   256,  -155,  -132,  -133,  -157,  -114,   -53,  -155,  -157,
   -61,   -62,   -64,   -60,   -57,   -63,   -59,   -58,  -115,   -55,
  -157,  -149,  -145,  -148,  -146,  -143,  -147,  -157,  -127,  -157,
   -47,   -46,  -157,   -40,  -157,  -157,   -39,   -17,   -91,   -22,
  -157,   -28,  -157,  -151,  -153,  -157,  -154,  -157,  -111,  -110,
   -57,  -113,  -157,  -157,  -112,  -104,  -105,  -157,   -98,  -157,
  -102,   -92,  -157,  -156,  -157,  -157,  -141,  -157,  -139,  -157,
  -136,  -157,  -157,   -66,  -157,   -56,  -121,  -157,  -123,  -157,
   -45,   -43,   -48,   -74,   -76,   -73,   -77,   -72,   -75,   -49,
   -94,   -71,   -87,  -157,  -107,  -157,   -99,   -97,  -157,  -157,
   -31,   -68,   -69,   -32,  -157,  -134,  -157,  -135,  -157,  -119,
  -157,   -30,  -155,   -29,   -54,  -120,  -122,   -93,  -157,  -109,
  -106,  -157,  -157,  -103,  -140,  -138,  -137,  -118,   -52,  -157,
  -108,  -101,  -157,  -157,  -100,   -95 ]

racc_goto_table = [
    24,    84,   176,    59,    60,   165,    76,   190,    76,   118,
   127,    82,   122,    57,    34,   182,   128,   132,    56,   185,
   178,    20,    36,    76,    48,   192,   131,   202,   209,   100,
   105,   113,    29,   221,    85,   201,    59,    60,    42,    62,
    76,   237,   177,    99,    99,   194,    57,   139,    98,    98,
   175,    56,   159,   215,    76,   125,   126,   106,    89,    35,
   214,    93,   167,    71,   187,    78,    91,    94,   172,   180,
    76,   189,    40,   145,   142,   nil,   nil,   136,   nil,   nil,
    88,   216,   149,   nil,   126,   126,   nil,   135,   nil,   nil,
   nil,   nil,   133,   204,   204,   nil,    99,   107,    59,   143,
   161,    98,   nil,   138,    59,   174,   174,   241,    57,   148,
   162,   112,   246,    56,    57,   171,   171,   124,   234,    56,
   169,   169,   232,   126,   126,   132,   172,   117,   250,   248,
   180,   138,   138,   nil,   131,   nil,   nil,   nil,   nil,    84,
   197,   nil,   126,   nil,   207,   207,   126,   199,   nil,   nil,
   nil,   nil,    99,   nil,   206,   206,    76,    98,   130,   205,
   205,   nil,   nil,   174,   126,   nil,   nil,   174,   nil,   nil,
   208,   208,   243,   171,    84,    76,    84,   171,   169,   nil,
   nil,   nil,   169,   nil,   nil,   136,   168,   168,   126,   138,
   nil,   230,   nil,   138,   172,   135,   nil,   nil,   nil,   nil,
   133,   nil,   nil,   nil,    76,   nil,   nil,    84,   nil,   174,
   126,   138,   nil,   211,   nil,    76,   nil,    76,   nil,   171,
   nil,   nil,   nil,   nil,   169,   203,   203,   nil,   nil,    84,
    84,   174,   222,   nil,   nil,   138,   nil,   nil,   nil,   nil,
   nil,   171,   252,   nil,   168,   nil,   169,   nil,   168,   253,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   138,   nil,   nil,
   nil,   239,   nil,   nil,   nil,   nil,   130,   nil,   nil,   nil,
   nil,   nil,   244,   nil,   245,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   168 ]

racc_goto_check = [
     2,     4,    57,    23,    24,    47,    24,    66,    24,    28,
    39,    23,    28,    22,    25,    29,    28,    43,    21,    29,
    53,     1,    63,    24,    17,    29,    42,    38,    38,    33,
    33,    46,     3,    45,    25,    34,    23,    24,    32,    50,
    24,    51,    52,    22,    22,    27,    22,    26,    21,    21,
    56,    21,    20,    58,    24,    59,    49,    17,    60,    61,
    57,    62,    18,    44,    64,    44,     3,     3,    55,    55,
    24,    65,     5,    67,    68,   nil,   nil,    23,   nil,   nil,
    44,    53,    33,   nil,    49,    49,   nil,    22,   nil,   nil,
   nil,   nil,    21,    42,    42,   nil,    22,    44,    23,    25,
    24,    21,   nil,    48,    23,    23,    23,    47,    22,    63,
     2,    44,    66,    21,    22,    22,    22,     3,    39,    21,
    21,    21,    28,    49,    49,    43,    55,    44,    57,    29,
    55,    48,    48,   nil,    42,   nil,   nil,   nil,   nil,     4,
     2,   nil,    49,   nil,    23,    23,    49,     2,   nil,   nil,
   nil,   nil,    22,   nil,    22,    22,    24,    21,    41,    21,
    21,   nil,   nil,    23,    49,   nil,   nil,    23,   nil,   nil,
    48,    48,    55,    22,     4,    24,     4,    22,    21,   nil,
   nil,   nil,    21,   nil,   nil,    23,    41,    41,    49,    48,
   nil,     2,   nil,    48,    55,    22,   nil,   nil,   nil,   nil,
    21,   nil,   nil,   nil,    24,   nil,   nil,     4,   nil,    23,
    49,    48,   nil,    44,   nil,    24,   nil,    24,   nil,    22,
   nil,   nil,   nil,   nil,    21,    41,    41,   nil,   nil,     4,
     4,    23,    44,   nil,   nil,    48,   nil,   nil,   nil,   nil,
   nil,    22,     2,   nil,    41,   nil,    21,   nil,    41,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
   nil,    44,   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,
   nil,   nil,    44,   nil,    44,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    41 ]

racc_goto_pointer = [
   nil,    21,     0,    32,   -23,    63,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,   -52,   nil,
   -56,     5,     0,   -10,    -9,     9,   -40,   -94,   -71,  -103,
   nil,   nil,    27,   -14,  -117,   nil,   nil,   nil,  -127,   -77,
   nil,    71,   -61,   -70,    48,  -150,   -32,  -108,    16,   -31,
    24,  -169,   -74,   -96,   nil,   -47,   -65,  -113,  -120,   -30,
    24,    51,    26,    14,   -59,   -52,  -116,   -19,   -16 ]

racc_goto_default = [
   nil,   nil,   nil,   103,    31,     3,     6,     7,    10,    12,
    14,    16,    19,    23,    28,    30,     2,   nil,    50,    52,
    54,    68,    72,    73,    22,    27,   nil,   nil,   nil,   nil,
     9,    11,   nil,   nil,   101,   152,   102,   104,   nil,   nil,
   129,    64,    66,    67,   nil,   120,   nil,   nil,    77,    61,
   nil,   nil,   nil,   nil,   179,    70,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :LESSEQUAL => 14,
 :NOTEQUAL => 15,
 :DOT => 16,
 :COLON => 17,
 :TYPE => 18,
 :LLCOLLECT => 19,
 :RRCOLLECT => 20,
 :QMARK => 21,
 :LPAREN => 22,
 :RPAREN => 23,
 :ISEQUAL => 24,
 :GREATEREQUAL => 25,
 :GREATERTHAN => 26,
 :LESSTHAN => 27,
 :IF => 28,
 :ELSE => 29,
 :IMPORT => 30,
 :DEFINE => 31,
 :ELSIF => 32,
 :VARIABLE => 33,
 :CLASS => 34,
 :INHERITS => 35,
 :NODE => 36,
 :BOOLEAN => 37,
 :NAME => 38,
 :SEMIC => 39,
 :CASE => 40,
 :DEFAULT => 41,
 :AT => 42,
 :LCOLLECT => 43,
 :RCOLLECT => 44,
 :CLASSNAME => 45,
 :CLASSREF => 46,
 :NOT => 47,
 :OR => 48,
 :AND => 49 }

racc_use_result_var = true

racc_nt_base = 50

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'TYPE',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'funcvalues',
'namestrings',
'resourcerefs',
'namestring',
'name',
'variable',
'quotedtext',
'resourceref',
'fqname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'at',
'collectname',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'type',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'funcrvalue',
'iftest',
'else',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'hostname',
'nothing',
'arguments',
'argument',
'nameordefault',
'fqnameordefault']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 33
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 49
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

module_eval <<'.,.,', 'grammar.ra', 71
  def _reduce_17( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 78
  def _reduce_18( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 19 omitted

 # reduce 20 omitted

 # reduce 21 omitted

module_eval <<'.,.,', 'grammar.ra', 88
  def _reduce_22( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 23 omitted

 # reduce 24 omitted

 # reduce 25 omitted

module_eval <<'.,.,', 'grammar.ra', 95
  def _reduce_26( val, _values, result )
                    result = ast AST::Name, :value => val[0]
   result
  end
.,.,

 # reduce 27 omitted

module_eval <<'.,.,', 'grammar.ra', 106
  def _reduce_28( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 127
  def _reduce_29( val, _values, result )
    array = val[2]
    if array.instance_of?(AST::ResourceInst)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::ResourceDef,
            :type => val[0],
            :title => instance[0],
            :params => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 130
  def _reduce_30( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 133
  def _reduce_31( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :params => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 138
  def _reduce_32( val, _values, result )
    result = ast AST::ResourceOverride, :object => val[0], :params => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 165
  def _reduce_33( val, _values, result )
    type = val[0]

    if type == :exported and ! Puppet[:storeconfigs]
        error "You cannot collect without storeconfigs being set"
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 166
  def _reduce_34( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 167
  def _reduce_35( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 190
  def _reduce_36( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs]
        error "You cannot collect exported resources without storeconfigs being set"
    end
    result = ast AST::Collection, args
   result
  end
.,.,

 # reduce 37 omitted

 # reduce 38 omitted

module_eval <<'.,.,', 'grammar.ra', 201
  def _reduce_39( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 209
  def _reduce_40( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 41 omitted

 # reduce 42 omitted

module_eval <<'.,.,', 'grammar.ra', 217
  def _reduce_43( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 44 omitted

module_eval <<'.,.,', 'grammar.ra', 223
  def _reduce_45( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

 # reduce 46 omitted

 # reduce 47 omitted

module_eval <<'.,.,', 'grammar.ra', 231
  def _reduce_48( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 236
  def _reduce_49( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 50 omitted

 # reduce 51 omitted

module_eval <<'.,.,', 'grammar.ra', 243
  def _reduce_52( val, _values, result )
    result = ast AST::ResourceInst, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 53 omitted

module_eval <<'.,.,', 'grammar.ra', 253
  def _reduce_54( val, _values, result )
    if val[0].instance_of?(AST::ResourceInst)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 55 omitted

 # reduce 56 omitted

module_eval <<'.,.,', 'grammar.ra', 260
  def _reduce_57( val, _values, result )
    result = ast AST::Name, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 264
  def _reduce_58( val, _values, result )
    result = ast AST::Type, :value => val[0]
   result
  end
.,.,

 # reduce 59 omitted

 # reduce 60 omitted

 # reduce 61 omitted

 # reduce 62 omitted

 # reduce 63 omitted

 # reduce 64 omitted

module_eval <<'.,.,', 'grammar.ra', 277
  def _reduce_65( val, _values, result )
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0]
    result = ast AST::VarDef, :name => variable, :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 282
  def _reduce_66( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 282
  def _reduce_67( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 291
  def _reduce_68( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 295
  def _reduce_69( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 70 omitted

module_eval <<'.,.,', 'grammar.ra', 304
  def _reduce_71( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 72 omitted

 # reduce 73 omitted

 # reduce 74 omitted

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

 # reduce 78 omitted

 # reduce 79 omitted

 # reduce 80 omitted

 # reduce 81 omitted

 # reduce 82 omitted

 # reduce 83 omitted

 # reduce 84 omitted

 # reduce 85 omitted

 # reduce 86 omitted

module_eval <<'.,.,', 'grammar.ra', 330
  def _reduce_87( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 334
  def _reduce_88( val, _values, result )
    result = ast AST::String, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 336
  def _reduce_89( val, _values, result )
    result = ast AST::FlatString, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 340
  def _reduce_90( val, _values, result )
    result = ast AST::Boolean, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 345
  def _reduce_91( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceRef, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 347
  def _reduce_92( val, _values, result )
    result = ast AST::ResourceRef, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 360
  def _reduce_93( val, _values, result )
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 94 omitted

module_eval <<'.,.,', 'grammar.ra', 365
  def _reduce_95( val, _values, result )
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

 # reduce 96 omitted

module_eval <<'.,.,', 'grammar.ra', 377
  def _reduce_97( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 98 omitted

module_eval <<'.,.,', 'grammar.ra', 387
  def _reduce_99( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 391
  def _reduce_100( val, _values, result )
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 396
  def _reduce_101( val, _values, result )
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 102 omitted

module_eval <<'.,.,', 'grammar.ra', 406
  def _reduce_103( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 410
  def _reduce_104( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 105 omitted

module_eval <<'.,.,', 'grammar.ra', 412
  def _reduce_106( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 107 omitted

module_eval <<'.,.,', 'grammar.ra', 423
  def _reduce_108( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 427
  def _reduce_109( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 110 omitted

 # reduce 111 omitted

 # reduce 112 omitted

 # reduce 113 omitted

 # reduce 114 omitted

 # reduce 115 omitted

module_eval <<'.,.,', 'grammar.ra', 437
  def _reduce_116( val, _values, result )
    result = ast AST::Default, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 492
  def _reduce_117( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = ast AST::ASTArray

    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end
        files = Dir.glob(pat)
        if files.size == 0
            files = Dir.glob(pat + ".pp")
            if files.size == 0
                raise Puppet::ImportError.new("No file(s) found for import " + 
                                              "of '#{pat}'")
            end
        end

        files.each { |file|
            parser = Puppet::Parser::Parser.new(interp)
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)

            unless file =~ /^#{File::SEPARATOR}/
                file = File.join(dir, file)
            end
            begin
                parser.file = file
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                next
            end

            # This will normally add code to the 'main' class.
            parser.parse
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 502
  def _reduce_118( val, _values, result )
    interp.newdefine fqname(val[1]), :arguments => val[2], :code => val[4]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 506
  def _reduce_119( val, _values, result )
    interp.newdefine fqname(val[1]), :arguments => val[2]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 514
  def _reduce_120( val, _values, result )
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    interp.newclass fqname(val[1]), :code => val[4], :parent => val[2]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 519
  def _reduce_121( val, _values, result )
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    interp.newclass fqname(val[1]), :parent => val[2]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 524
  def _reduce_122( val, _values, result )
    interp.newnode val[1], :parent => val[2], :code => val[4]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 527
  def _reduce_123( val, _values, result )
    interp.newnode val[1], :parent => val[2]
    result = nil
   result
  end
.,.,

 # reduce 124 omitted

 # reduce 125 omitted

 # reduce 126 omitted

module_eval <<'.,.,', 'grammar.ra', 539
  def _reduce_127( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

 # reduce 128 omitted

 # reduce 129 omitted

 # reduce 130 omitted

module_eval <<'.,.,', 'grammar.ra', 547
  def _reduce_131( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 551
  def _reduce_132( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 133 omitted

module_eval <<'.,.,', 'grammar.ra', 556
  def _reduce_134( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 560
  def _reduce_135( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 136 omitted

module_eval <<'.,.,', 'grammar.ra', 567
  def _reduce_137( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 572
  def _reduce_138( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 576
  def _reduce_139( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 578
  def _reduce_140( val, _values, result )
    result = [val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 580
  def _reduce_141( val, _values, result )
    result = [val[0]]
   result
  end
.,.,

 # reduce 142 omitted

module_eval <<'.,.,', 'grammar.ra', 585
  def _reduce_143( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 144 omitted

module_eval <<'.,.,', 'grammar.ra', 590
  def _reduce_145( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 146 omitted

 # reduce 147 omitted

 # reduce 148 omitted

 # reduce 149 omitted

module_eval <<'.,.,', 'grammar.ra', 597
  def _reduce_150( val, _values, result )
    result = ast AST::Variable, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 605
  def _reduce_151( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 607
  def _reduce_152( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

module_eval <<'.,.,', 'grammar.ra', 612
  def _reduce_156( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
