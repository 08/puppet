#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id05e5ea581f', 'grammar.ra', 644
require 'puppet/parser/functions'

attr_reader :file, :interp
attr_accessor :files

# Add context to a message; useful for error messages and such.
def addcontext(message, obj = nil)
    obj ||= @lexer

    message += " on line %s" % obj.line
    if file = obj.file
        message += " in file %s" % file
    end

    return message
end

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = ast AST::ASTArray, :children => args
    end

    return result
end

# Create an AST object, and automatically add the file and line information if
# available.
def ast(klass, hash = nil)
    hash ||= {}
    unless hash[:line]
        hash[:line] = @lexer.line
    end

    unless hash[:file]
        if file = @lexer.file
            hash[:file] = file
        end
    end

    return klass.new(hash)
end

# Raise a Parse error.
def error(message)
    except = Puppet::ParseError.new(message)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

def file=(file)
    unless FileTest.exists?(file)
        unless file =~ /\.pp$/
            file = file + ".pp"
        end
        unless FileTest.exists?(file)
            raise Puppet::Error, "Could not find file %s" % file
        end
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::Util::LoadedFile.new(file)
        @lexer.file = file
    end
end

def initialize(interpreter)
    @interp = interpreter
    initvars()
end

# Initialize or reset all of our variables.
def initvars
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
end

# The fully qualifed name, with the full namespace.
def fqname(name)
    [@lexer.namespace, name].join("::").sub(/^::/, '')
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse(string = nil)
    if string
        self.string = string
    end
    begin
        main = yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.set_backtrace except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.set_backtrace except.backtrace
        raise error
    end
    if main
        # Store the results as the top-level class.
        interp.newclass("", :code => main)
        return main
    end
ensure
    @lexer.clear
end

# See if any of the files have changed.
def reparse?
    if file = @files.detect { |file| file.changed?  }
        return file.stamp
    else
        return false
    end
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id05e5ea581f

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 51, :_reduce_1,
 1, 51, :_reduce_none,
 1, 52, :_reduce_none,
 2, 52, :_reduce_4,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 1, 54, :_reduce_none,
 4, 62, :_reduce_17,
 3, 62, :_reduce_18,
 2, 62, :_reduce_19,
 1, 67, :_reduce_none,
 1, 67, :_reduce_none,
 1, 68, :_reduce_none,
 3, 68, :_reduce_23,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_none,
 1, 70, :_reduce_27,
 1, 69, :_reduce_none,
 3, 69, :_reduce_29,
 5, 55, :_reduce_30,
 5, 55, :_reduce_31,
 5, 55, :_reduce_32,
 5, 66, :_reduce_33,
 2, 56, :_reduce_34,
 1, 80, :_reduce_35,
 2, 80, :_reduce_36,
 2, 57, :_reduce_37,
 1, 81, :_reduce_none,
 1, 81, :_reduce_none,
 3, 82, :_reduce_40,
 3, 82, :_reduce_41,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 3, 83, :_reduce_44,
 1, 84, :_reduce_none,
 3, 84, :_reduce_46,
 1, 85, :_reduce_none,
 1, 85, :_reduce_none,
 3, 86, :_reduce_49,
 3, 86, :_reduce_50,
 1, 87, :_reduce_none,
 1, 87, :_reduce_none,
 4, 89, :_reduce_53,
 1, 76, :_reduce_none,
 3, 76, :_reduce_55,
 0, 77, :_reduce_none,
 1, 77, :_reduce_none,
 1, 71, :_reduce_58,
 1, 91, :_reduce_59,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 1, 90, :_reduce_none,
 3, 58, :_reduce_66,
 0, 78, :_reduce_67,
 1, 78, :_reduce_68,
 3, 78, :_reduce_69,
 3, 95, :_reduce_70,
 1, 96, :_reduce_none,
 3, 96, :_reduce_72,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 88, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 1, 94, :_reduce_none,
 4, 99, :_reduce_88,
 3, 99, :_reduce_89,
 1, 73, :_reduce_90,
 1, 73, :_reduce_91,
 1, 98, :_reduce_92,
 4, 74, :_reduce_93,
 4, 74, :_reduce_94,
 6, 60, :_reduce_95,
 0, 101, :_reduce_none,
 4, 101, :_reduce_97,
 1, 100, :_reduce_none,
 5, 59, :_reduce_99,
 1, 102, :_reduce_none,
 2, 102, :_reduce_101,
 5, 103, :_reduce_102,
 4, 103, :_reduce_103,
 1, 104, :_reduce_none,
 3, 104, :_reduce_105,
 3, 92, :_reduce_106,
 1, 106, :_reduce_none,
 3, 106, :_reduce_108,
 1, 108, :_reduce_none,
 3, 108, :_reduce_110,
 3, 107, :_reduce_111,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_none,
 1, 105, :_reduce_118,
 2, 61, :_reduce_119,
 6, 63, :_reduce_120,
 5, 63, :_reduce_121,
 6, 64, :_reduce_122,
 5, 64, :_reduce_123,
 6, 65, :_reduce_124,
 5, 65, :_reduce_125,
 1, 75, :_reduce_none,
 1, 75, :_reduce_none,
 1, 111, :_reduce_none,
 3, 111, :_reduce_129,
 1, 113, :_reduce_none,
 1, 113, :_reduce_none,
 1, 113, :_reduce_none,
 0, 53, :_reduce_133,
 0, 114, :_reduce_134,
 1, 109, :_reduce_none,
 3, 109, :_reduce_136,
 3, 109, :_reduce_137,
 1, 115, :_reduce_none,
 3, 115, :_reduce_139,
 3, 116, :_reduce_140,
 1, 116, :_reduce_141,
 3, 116, :_reduce_142,
 1, 116, :_reduce_143,
 1, 112, :_reduce_none,
 2, 112, :_reduce_145,
 1, 110, :_reduce_none,
 2, 110, :_reduce_147,
 1, 117, :_reduce_none,
 1, 117, :_reduce_none,
 1, 118, :_reduce_none,
 1, 118, :_reduce_none,
 1, 72, :_reduce_152,
 3, 93, :_reduce_153,
 2, 93, :_reduce_154,
 1, 97, :_reduce_none,
 1, 97, :_reduce_none,
 0, 79, :_reduce_none,
 1, 79, :_reduce_158 ]

racc_reduce_n = 159

racc_shift_n = 258

racc_action_table = [
    49,    51,    53,    41,  -126,    51,    53,    51,    53,    51,
    53,   186,    49,    95,    58,   230,    58,    63,    51,    53,
    46,    43,    58,    33,   115,   168,   154,   106,   229,    90,
     4,    45,   115,    74,   161,    45,    55,    45,    92,    45,
    97,   188,    55,    47,    97,    44,   190,    47,    45,    47,
    37,    47,    65,    69,   151,   152,    75,    63,    51,    53,
    33,   109,   186,    63,    51,    53,   112,     4,    79,    63,
    51,    53,    80,    74,   214,    63,    51,    53,   193,    74,
   156,    63,    51,    53,    38,    74,   185,    39,    45,   155,
   188,    74,    65,    69,    45,   190,    75,    74,    65,    69,
    45,   195,    75,  -113,    65,    69,    45,  -112,    75,   185,
    65,    69,    45,  -115,    75,    96,    65,    69,    51,    53,
    75,    63,    51,    53,  -114,   202,    45,    63,    51,    53,
   197,    97,  -112,    63,    51,    53,  -113,    74,   183,    63,
    51,    53,   116,    74,   111,    63,    51,    53,  -116,    74,
   151,   152,    45,    49,    79,    74,    65,    69,    45,    49,
    75,   138,    65,    69,    45,  -115,    75,   115,    65,    69,
    45,   215,    75,   110,    65,    69,    45,   109,    75,   238,
    65,   172,   221,  -114,    75,    63,    51,    53,    33,   220,
    18,    63,    51,    53,   222,     4,   120,    37,    51,    53,
    15,    74,    21,    25,    79,     1,     5,   138,     8,   159,
    13,   226,    17,   138,    26,   227,    45,     4,   237,   228,
    65,    69,    45,   158,    75,    80,    65,   135,    45,    18,
    75,    38,    65,   172,    39,   145,    75,   231,   147,    15,
   233,    21,    25,    96,     1,     5,   120,     8,    18,    13,
   235,    17,  -117,    26,    45,   185,     4,    87,    15,    97,
    21,    25,   257,     1,     5,  -113,     8,  -112,    13,  -115,
    17,    96,    26,    18,   157,     4,  -114,    33,   151,   152,
   142,   249,    45,    15,     4,    21,    25,    97,     1,     5,
    96,     8,    18,    13,  -117,    17,   240,    26,    51,    53,
     4,    45,    15,    86,    21,    25,    97,     1,     5,   117,
     8,   244,    13,   138,    17,   148,    26,    83,   253,     4,
    51,    53,   164,   122,   219,   141,   165,   167,    45,    18,
    81,   185,    65,   172,   251,   138,    75,    51,    53,    15,
   120,    21,    25,   124,     1,     5,   120,     8,    32,    13,
    45,    17,   138,    26,    65,   172,     4,   256,    75,   242,
   225,   165,   167,   nil,   nil,   nil,   nil,    45,    18,   nil,
   nil,    65,   172,   nil,   nil,    75,   212,   nil,    15,   nil,
    21,    25,   nil,     1,     5,   nil,     8,    18,    13,   nil,
    17,   nil,    26,    51,    53,     4,   nil,    15,   nil,    21,
    25,   nil,     1,     5,   nil,     8,   nil,    13,   138,    17,
   nil,    26,   nil,   nil,     4,    51,    53,    51,    53,   nil,
   175,   nil,   nil,    45,   nil,   nil,   nil,    65,   172,   nil,
   138,    75,   138,   200,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    45,   nil,    45,   nil,    65,
   172,    65,   172,    75,    15,    75,    21,    25,   198,     1,
     5,   nil,     8,   nil,    13,   nil,    17,   nil,    26,    18,
   nil,     4,   nil,    51,    53,   nil,   nil,   nil,   nil,    15,
   nil,    21,    25,   nil,     1,     5,   nil,     8,   138,    13,
   nil,    17,   nil,    26,   nil,   nil,     4,   nil,   nil,   nil,
    18,   nil,   nil,    45,   nil,   nil,   nil,    65,   172,   nil,
    15,    75,    21,    25,   nil,     1,     5,   nil,     8,    18,
    13,   nil,    17,   nil,    26,   nil,   nil,     4,   nil,    15,
   nil,    21,    25,   nil,     1,     5,   nil,     8,    18,    13,
   nil,    17,   nil,    26,   nil,   nil,     4,   nil,    15,   nil,
    21,    25,   nil,     1,     5,   nil,     8,    18,    13,   nil,
    17,   nil,    26,   nil,   nil,     4,   nil,    15,   nil,    21,
    25,   nil,     1,     5,   nil,     8,   nil,    13,   nil,    17,
   nil,    26,   nil,   nil,     4 ]

racc_action_check = [
    13,    13,    13,     9,    13,   115,   115,    46,    46,   109,
   109,   135,    69,    35,   110,   191,    13,    17,    17,    17,
    13,    11,    46,     9,   135,   115,   100,    46,   191,    34,
     9,    13,    69,    17,   110,   115,    13,    46,    35,   109,
   115,   230,    46,    13,   109,    11,   230,   115,    17,    46,
     8,   109,    17,    17,   100,   100,    17,    49,    49,    49,
    25,   169,   120,    63,    63,    63,    63,    25,    18,    15,
    15,    15,    18,    49,   169,   166,   166,   166,   126,    63,
   104,    79,    79,    79,     8,    15,   129,     8,    49,   104,
   124,   166,    49,    49,    63,   124,    49,    79,    63,    63,
    15,   130,    63,   131,    15,    15,   166,   134,    15,   119,
   166,   166,    79,   136,   166,    43,    79,    79,    21,    21,
    79,   186,   186,   186,   137,   150,    43,   228,   228,   228,
   140,    43,    68,   226,   226,   226,    64,   186,   118,    32,
    32,    32,    70,   228,    62,   197,   197,   197,    61,   226,
   150,   150,   186,   161,    58,    32,   186,   186,   228,    55,
   186,   197,   228,   228,   226,    72,   228,   172,   226,   226,
    32,   174,   226,    52,    32,    32,   197,    50,    32,   201,
   197,   197,   181,    73,   197,   215,   215,   215,     5,   181,
   201,    87,    87,    87,   184,     5,   185,    95,   221,   221,
   201,   215,   201,   201,    74,   201,   201,    87,   201,   108,
   201,   188,   201,   221,   201,   189,   215,   201,   199,   190,
   215,   215,    87,   107,   215,    41,    87,    87,   221,   199,
    87,    95,   221,   221,    95,    92,   221,   193,    92,   199,
   194,   199,   199,   153,   199,   199,   195,   199,   193,   199,
   196,   199,    77,   199,   153,   123,   199,    27,   193,   153,
   193,   193,   255,   193,   193,   205,   193,   207,   193,   208,
   193,    96,   193,   255,   105,   193,   209,    90,   105,   105,
    90,   232,    96,   255,    90,   255,   255,    96,   255,   255,
    44,   255,   232,   255,   210,   255,   212,   255,   243,   243,
   255,    44,   232,    26,   232,   232,    44,   232,   232,    78,
   232,   220,   232,   243,   232,    93,   232,    22,   244,   232,
   179,   179,   114,    81,   179,    89,   114,   114,   243,   244,
    20,   234,   243,   243,   240,   179,   243,   175,   175,   244,
    80,   244,   244,    85,   244,   244,    83,   244,     1,   244,
   179,   244,   175,   244,   179,   179,   244,   254,   179,   217,
   187,   217,   217,   nil,   nil,   nil,   nil,   175,   254,   nil,
   nil,   175,   175,   nil,   nil,   175,   163,   nil,   254,   nil,
   254,   254,   nil,   254,   254,   nil,   254,   163,   254,   nil,
   254,   nil,   254,   117,   117,   254,   nil,   163,   nil,   163,
   163,   nil,   163,   163,   nil,   163,   nil,   163,   117,   163,
   nil,   163,   nil,   nil,   163,   155,   155,   116,   116,   nil,
   116,   nil,   nil,   117,   nil,   nil,   nil,   117,   117,   nil,
   155,   117,   116,   148,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   148,   155,   nil,   116,   nil,   155,
   155,   116,   116,   155,   148,   116,   148,   148,   141,   148,
   148,   nil,   148,   nil,   148,   nil,   148,   nil,   148,   141,
   nil,   148,   nil,   156,   156,   nil,   nil,   nil,   nil,   141,
   nil,   141,   141,   nil,   141,   141,   nil,   141,   156,   141,
   nil,   141,   nil,   141,   nil,   nil,   141,   nil,   nil,   nil,
   111,   nil,   nil,   156,   nil,   nil,   nil,   156,   156,   nil,
   111,   156,   111,   111,   nil,   111,   111,   nil,   111,   251,
   111,   nil,   111,   nil,   111,   nil,   nil,   111,   nil,   251,
   nil,   251,   251,   nil,   251,   251,   nil,   251,    24,   251,
   nil,   251,   nil,   251,   nil,   nil,   251,   nil,    24,   nil,
    24,    24,   nil,    24,    24,   nil,    24,     0,    24,   nil,
    24,   nil,    24,   nil,   nil,    24,   nil,     0,   nil,     0,
     0,   nil,     0,     0,   nil,     0,   nil,     0,   nil,     0,
   nil,     0,   nil,   nil,     0 ]

racc_action_pointer = [
   539,   335,   nil,   nil,   nil,   150,   nil,   nil,    46,   -15,
   nil,     2,   nil,    -2,   nil,    67,   nil,    15,    66,   nil,
   330,   115,   311,   nil,   520,    22,   261,   251,   nil,   nil,
   nil,   nil,   137,   nil,    -6,     3,   nil,   nil,   nil,   nil,
   nil,   219,   nil,    93,   268,   nil,     4,   nil,   nil,    55,
   167,   nil,   163,   nil,   nil,   157,   nil,   nil,   152,   nil,
   nil,   127,   138,    61,   115,   nil,   nil,   nil,   111,    10,
   121,   nil,   144,   162,   202,   nil,   nil,   231,   303,    79,
   302,   323,   nil,   308,   nil,   321,   nil,   189,   nil,   319,
   239,   nil,   197,   309,   nil,   193,   249,   nil,   nil,   nil,
     6,   nil,   nil,   nil,    65,   230,   nil,   200,   204,     6,
    -4,   482,   nil,   nil,   317,     2,   414,   390,   133,    99,
    53,   nil,   nil,   245,    57,   nil,    72,   nil,   nil,    76,
    84,    82,   nil,   nil,    86,     2,    92,   103,   nil,   nil,
    91,   451,   nil,   nil,   nil,   nil,   nil,   nil,   426,   nil,
   102,   nil,   nil,   221,   nil,   412,   470,   nil,   nil,   nil,
   nil,   151,   nil,   369,   nil,   nil,    73,   nil,   nil,    51,
   nil,   nil,   145,   nil,   162,   334,   nil,   nil,   nil,   317,
   nil,   172,   nil,   nil,   187,   158,   119,   353,   198,   192,
   206,     5,   nil,   230,   233,   208,   243,   143,   nil,   211,
   nil,   172,   nil,   nil,   nil,   244,   nil,   246,   248,   255,
   273,   nil,   267,   nil,   nil,   183,   nil,   352,   nil,   nil,
   305,   195,   nil,   nil,   nil,   nil,   131,   nil,   125,   nil,
     8,   nil,   274,   nil,   321,   nil,   nil,   nil,   nil,   nil,
   328,   nil,   nil,   295,   311,   nil,   nil,   nil,   nil,   nil,
   nil,   501,   nil,   nil,   350,   255,   nil,   nil ]

racc_action_default = [
  -133,  -159,   -16,    -5,  -127,  -159,    -6,    -7,  -159,  -159,
    -8,  -159,    -9,   -39,   -10,  -159,   -11,  -159,   -38,   -12,
  -159,  -159,  -159,   -13,    -1,  -159,   -35,  -159,   -14,    -2,
   -15,    -3,  -159,  -126,  -133,  -133,  -128,  -131,  -130,  -132,
   -34,  -159,   -37,  -133,  -133,  -152,  -159,   -27,   -19,  -159,
   -20,   -90,   -21,   -91,   -22,   -58,   -24,   -25,  -159,   -26,
   -28,   -87,  -159,  -159,   -81,   -92,   -83,   -85,   -80,   -58,
  -159,   -98,   -84,   -79,   -59,  -118,   -86,   -82,  -159,  -159,
   -67,  -159,  -119,   -67,    -4,  -133,   -36,   -67,   -66,  -159,
  -159,  -146,  -159,  -159,  -144,  -159,  -133,   -58,   -52,   -51,
  -159,   -43,   -45,   -42,  -159,  -159,   -18,  -159,  -159,  -159,
  -159,  -159,  -154,   -71,  -159,  -159,  -159,  -159,  -159,  -157,
  -159,   -68,   258,  -157,  -134,  -135,  -159,  -116,   -54,  -157,
  -159,   -62,   -63,   -65,   -61,   -58,   -64,   -60,   -59,  -117,
   -56,  -159,  -151,  -147,  -150,  -148,  -145,  -149,  -159,  -129,
  -159,   -48,   -47,  -159,   -41,  -159,  -159,   -40,   -17,   -93,
   -23,  -159,   -29,  -159,  -153,  -155,  -159,  -156,   -89,  -159,
  -113,  -112,   -58,  -115,  -159,  -159,  -114,  -106,  -107,  -159,
  -100,  -159,  -104,   -94,  -159,  -158,  -159,  -159,  -143,  -159,
  -141,  -159,  -138,  -159,  -159,   -67,  -159,   -57,  -123,  -159,
  -125,  -159,   -46,   -44,   -49,   -75,   -77,   -74,   -78,   -73,
   -76,   -50,   -96,   -72,   -88,  -159,  -109,  -159,  -101,   -99,
  -159,  -159,   -32,   -69,   -70,   -33,  -159,  -136,  -159,  -137,
  -159,  -121,  -159,   -31,  -157,   -30,   -55,  -122,  -124,   -95,
  -159,  -111,  -108,  -159,  -159,  -105,  -142,  -140,  -139,  -120,
   -53,  -159,  -110,  -103,  -159,  -159,  -102,   -97 ]

racc_goto_table = [
    24,    84,   178,    59,   184,   166,    36,   192,   187,    48,
    34,    82,   119,    57,   194,   123,   128,    20,    56,   129,
   174,   182,   180,   114,   133,    29,   223,   100,   105,   203,
    85,   204,   211,    42,    62,   239,    59,   179,   196,   140,
   177,   160,   107,    99,    99,   217,    57,   126,    98,    98,
    89,    56,    60,    35,    76,    93,    76,   169,   189,    91,
    94,   216,   191,    40,    71,   146,    78,   132,   143,   nil,
   nil,    76,   nil,   nil,   nil,   nil,   nil,   137,   nil,   174,
   150,    88,   nil,   182,   218,    60,   nil,   136,    76,   nil,
   nil,   nil,   134,   149,   127,   144,    99,   nil,   108,    59,
   nil,    98,    76,   139,   nil,    59,   176,   176,   243,    57,
   125,   163,   113,   248,    56,    57,   173,   173,    76,   250,
    56,   171,   171,   127,   127,   245,   236,   234,   118,   252,
   nil,   nil,   139,   139,   133,   206,   206,   nil,   nil,   nil,
    84,   199,   nil,   nil,   nil,   209,   209,   174,   201,   162,
   nil,   nil,   nil,    99,   nil,   208,   208,   nil,    98,   nil,
   207,   207,   127,   127,   nil,   176,   nil,   nil,   nil,   176,
   131,   210,   210,   nil,   nil,   173,    84,   132,    84,   173,
   171,   nil,   127,   nil,   171,   nil,   127,   137,   nil,   nil,
   nil,   139,   nil,   232,   nil,   139,   nil,   136,   nil,   170,
   170,   nil,   134,   nil,   127,    76,   nil,   nil,   nil,    84,
   nil,   176,   nil,   139,   nil,   213,   nil,   nil,   nil,   nil,
   nil,   173,   nil,   nil,   nil,    76,   171,   nil,   127,   nil,
   nil,    84,    84,   176,   nil,   224,   nil,   139,   205,   205,
   nil,   nil,   nil,   173,   254,   nil,   nil,   nil,   171,   nil,
   127,   255,   nil,   nil,    76,   nil,   nil,   nil,   170,   139,
   nil,   nil,   170,   nil,   241,    76,   nil,    76,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   246,   nil,   247,   nil,   nil,
   131,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   170,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   170 ]

racc_goto_check = [
     2,     4,    57,    23,    29,    47,    63,    66,    29,    17,
    25,    23,    28,    22,    29,    28,    39,     1,    21,    28,
    55,    55,    53,    46,    43,     3,    45,    33,    33,    34,
    25,    38,    38,    32,    50,    51,    23,    52,    27,    26,
    56,    20,    17,    22,    22,    58,    22,    59,    21,    21,
    60,    21,    24,    61,    24,    62,    24,    18,    64,     3,
     3,    57,    65,     5,    44,    67,    44,    42,    68,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,    23,   nil,    55,
    33,    44,   nil,    55,    53,    24,   nil,    22,    24,   nil,
   nil,   nil,    21,    63,    49,    25,    22,   nil,    44,    23,
   nil,    21,    24,    48,   nil,    23,    23,    23,    47,    22,
     3,     2,    44,    66,    21,    22,    22,    22,    24,    29,
    21,    21,    21,    49,    49,    55,    39,    28,    44,    57,
   nil,   nil,    48,    48,    43,    42,    42,   nil,   nil,   nil,
     4,     2,   nil,   nil,   nil,    23,    23,    55,     2,    24,
   nil,   nil,   nil,    22,   nil,    22,    22,   nil,    21,   nil,
    21,    21,    49,    49,   nil,    23,   nil,   nil,   nil,    23,
    41,    48,    48,   nil,   nil,    22,     4,    42,     4,    22,
    21,   nil,    49,   nil,    21,   nil,    49,    23,   nil,   nil,
   nil,    48,   nil,     2,   nil,    48,   nil,    22,   nil,    41,
    41,   nil,    21,   nil,    49,    24,   nil,   nil,   nil,     4,
   nil,    23,   nil,    48,   nil,    44,   nil,   nil,   nil,   nil,
   nil,    22,   nil,   nil,   nil,    24,    21,   nil,    49,   nil,
   nil,     4,     4,    23,   nil,    44,   nil,    48,    41,    41,
   nil,   nil,   nil,    22,     2,   nil,   nil,   nil,    21,   nil,
    49,     2,   nil,   nil,    24,   nil,   nil,   nil,    41,    48,
   nil,   nil,    41,   nil,    44,    24,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    44,   nil,    44,   nil,   nil,
    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    41 ]

racc_goto_pointer = [
   nil,    17,     0,    25,   -23,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -4,   -58,   nil,
   -68,     5,     0,   -10,    39,     5,   -48,  -102,   -68,  -115,
   nil,   nil,    22,   -16,  -124,   nil,   nil,   nil,  -124,   -71,
   nil,    83,   -20,   -63,    49,  -159,   -40,  -109,    16,     7,
    19,  -177,   -80,   -95,   nil,   -96,   -76,  -114,  -130,   -38,
    16,    45,    20,    -2,   -66,   -62,  -117,   -27,   -22 ]

racc_goto_default = [
   nil,   nil,   nil,   103,    31,     3,     6,     7,    10,    12,
    14,    16,    19,    23,    28,    30,     2,   nil,    50,    52,
    54,    68,    72,    73,    22,    27,   nil,   nil,   nil,   nil,
     9,    11,   nil,   nil,   101,   153,   102,   104,   nil,   nil,
   130,    64,    66,    67,   nil,   121,   nil,   nil,    77,    61,
   nil,   nil,   nil,   nil,   181,    70,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :LESSEQUAL => 14,
 :NOTEQUAL => 15,
 :DOT => 16,
 :COLON => 17,
 :TYPE => 18,
 :LLCOLLECT => 19,
 :RRCOLLECT => 20,
 :QMARK => 21,
 :LPAREN => 22,
 :RPAREN => 23,
 :ISEQUAL => 24,
 :GREATEREQUAL => 25,
 :GREATERTHAN => 26,
 :LESSTHAN => 27,
 :IF => 28,
 :ELSE => 29,
 :IMPORT => 30,
 :DEFINE => 31,
 :ELSIF => 32,
 :VARIABLE => 33,
 :CLASS => 34,
 :INHERITS => 35,
 :NODE => 36,
 :BOOLEAN => 37,
 :NAME => 38,
 :SEMIC => 39,
 :CASE => 40,
 :DEFAULT => 41,
 :AT => 42,
 :LCOLLECT => 43,
 :RCOLLECT => 44,
 :CLASSNAME => 45,
 :CLASSREF => 46,
 :NOT => 47,
 :OR => 48,
 :AND => 49 }

racc_use_result_var = true

racc_nt_base = 50

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'TYPE',
'LLCOLLECT',
'RRCOLLECT',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'CLASSNAME',
'CLASSREF',
'NOT',
'OR',
'AND',
'$start',
'program',
'statements',
'nil',
'statement',
'resource',
'virtualresource',
'collection',
'assignment',
'casestatement',
'ifstatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'resourceoverride',
'funcvalues',
'namestrings',
'resourcerefs',
'namestring',
'name',
'variable',
'quotedtext',
'resourceref',
'fqname',
'resourceinstances',
'endsemi',
'params',
'endcomma',
'at',
'collectname',
'collectrhand',
'collstatements',
'collstatement',
'colljoin',
'collexpr',
'colllval',
'simplervalue',
'resourceinst',
'resourcename',
'type',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'funcrvalue',
'iftest',
'else',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'classparent',
'hostnames',
'nodeparent',
'hostname',
'nothing',
'arguments',
'argument',
'nameordefault',
'fqnameordefault']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 33
  def _reduce_1( val, _values, result )
    if val[0]
        # Make sure we always return an array.
        if val[0].is_a?(AST::ASTArray)
            if val[0].children.empty?
                result = nil
            else
                result = val[0]
            end
        else
            result = aryfy(val[0])
        end
    else
        result = nil
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 49
  def _reduce_4( val, _values, result )
    if val[0] and val[1]
        if val[0].instance_of?(AST::ASTArray)
            val[0].push(val[1])
            result = val[0]
        else
            result = ast AST::ASTArray, :children => [val[0],val[1]]
        end
    elsif obj = (val[0] || val[1])
        result = obj
    else result = nil
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

 # reduce 15 omitted

 # reduce 16 omitted

module_eval <<'.,.,', 'grammar.ra', 71
  def _reduce_17( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 77
  def _reduce_18( val, _values, result )
    result = ast AST::Function,
        :name => val[0],
        :arguments => AST::ASTArray.new({}),
        :ftype => :statement
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 84
  def _reduce_19( val, _values, result )
    args = aryfy(val[1])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
   result
  end
.,.,

 # reduce 20 omitted

 # reduce 21 omitted

 # reduce 22 omitted

module_eval <<'.,.,', 'grammar.ra', 94
  def _reduce_23( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 24 omitted

 # reduce 25 omitted

 # reduce 26 omitted

module_eval <<'.,.,', 'grammar.ra', 101
  def _reduce_27( val, _values, result )
                    result = ast AST::Name, :value => val[0]
   result
  end
.,.,

 # reduce 28 omitted

module_eval <<'.,.,', 'grammar.ra', 112
  def _reduce_29( val, _values, result )
    unless val[0].is_a?(AST::ASTArray)
        val[0] = aryfy(val[0])
    end

    val[0].push(val[2])

    result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 133
  def _reduce_30( val, _values, result )
    array = val[2]
    if array.instance_of?(AST::ResourceInst)
        array = [array]
    end
    result = ast AST::ASTArray

    # this iterates across each specified resourceinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ResourceInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push ast(AST::ResourceDef,
            :type => val[0],
            :title => instance[0],
            :params => instance[1])
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 136
  def _reduce_31( val, _values, result )
    # This is a deprecated syntax.
    error "All resource specifications require names"
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 139
  def _reduce_32( val, _values, result )
    # a defaults setting for a type
    result = ast(AST::ResourceDefaults, :type => val[0], :params => val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 144
  def _reduce_33( val, _values, result )
    result = ast AST::ResourceOverride, :object => val[0], :params => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 171
  def _reduce_34( val, _values, result )
    type = val[0]

    if type == :exported and ! Puppet[:storeconfigs]
        error "You cannot collect without storeconfigs being set"
    end

    if val[1].is_a? AST::ResourceDefaults
        error "Defaults are not virtualizable"
    end

    method = type.to_s + "="

    # Just mark our resources as exported and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.send(method, true)
        end
    else
        val[1].send(method, true)
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 172
  def _reduce_35( val, _values, result )
 result = :virtual
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 173
  def _reduce_36( val, _values, result )
 result = :exported
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 196
  def _reduce_37( val, _values, result )
    if val[0] =~ /^[a-z]/
        Puppet.warning addcontext("Collection names must now be capitalized")
    end
    type = val[0].downcase
    args = {:type => type}

    if val[1].is_a?(AST::CollExpr)
        args[:query] = val[1]
        args[:query].type = type
        args[:form] = args[:query].form
    else
        args[:form] = val[1]
    end
    if args[:form] == :exported and ! Puppet[:storeconfigs]
        error "You cannot collect exported resources without storeconfigs being set"
    end
    result = ast AST::Collection, args
   result
  end
.,.,

 # reduce 38 omitted

 # reduce 39 omitted

module_eval <<'.,.,', 'grammar.ra', 207
  def _reduce_40( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :virtual
    else
        result = :virtual
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 215
  def _reduce_41( val, _values, result )
    if val[1]
        result = val[1]
        result.form = :exported
    else
        result = :exported
    end
   result
  end
.,.,

 # reduce 42 omitted

 # reduce 43 omitted

module_eval <<'.,.,', 'grammar.ra', 223
  def _reduce_44( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
   result
  end
.,.,

 # reduce 45 omitted

module_eval <<'.,.,', 'grammar.ra', 229
  def _reduce_46( val, _values, result )
    result = val[1]
    result.parens = true
   result
  end
.,.,

 # reduce 47 omitted

 # reduce 48 omitted

module_eval <<'.,.,', 'grammar.ra', 237
  def _reduce_49( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 242
  def _reduce_50( val, _values, result )
    result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val
   result
  end
.,.,

 # reduce 51 omitted

 # reduce 52 omitted

module_eval <<'.,.,', 'grammar.ra', 249
  def _reduce_53( val, _values, result )
    result = ast AST::ResourceInst, :children => [val[0],val[2]]
   result
  end
.,.,

 # reduce 54 omitted

module_eval <<'.,.,', 'grammar.ra', 259
  def _reduce_55( val, _values, result )
    if val[0].instance_of?(AST::ResourceInst)
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 56 omitted

 # reduce 57 omitted

module_eval <<'.,.,', 'grammar.ra', 266
  def _reduce_58( val, _values, result )
    result = ast AST::Name, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 270
  def _reduce_59( val, _values, result )
    result = ast AST::Type, :value => val[0]
   result
  end
.,.,

 # reduce 60 omitted

 # reduce 61 omitted

 # reduce 62 omitted

 # reduce 63 omitted

 # reduce 64 omitted

 # reduce 65 omitted

module_eval <<'.,.,', 'grammar.ra', 283
  def _reduce_66( val, _values, result )
    # this is distinct from referencing a variable
    variable = ast AST::Name, :value => val[0]
    result = ast AST::VarDef, :name => variable, :value => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 288
  def _reduce_67( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 288
  def _reduce_68( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 297
  def _reduce_69( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 301
  def _reduce_70( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 310
  def _reduce_72( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

 # reduce 73 omitted

 # reduce 74 omitted

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

 # reduce 78 omitted

 # reduce 79 omitted

 # reduce 80 omitted

 # reduce 81 omitted

 # reduce 82 omitted

 # reduce 83 omitted

 # reduce 84 omitted

 # reduce 85 omitted

 # reduce 86 omitted

 # reduce 87 omitted

module_eval <<'.,.,', 'grammar.ra', 336
  def _reduce_88( val, _values, result )
    args = aryfy(val[2])
    result = ast AST::Function,
        :name => val[0],
        :arguments => args,
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 341
  def _reduce_89( val, _values, result )
    result = ast AST::Function,
        :name => val[0],
        :arguments => AST::ASTArray.new({}),
        :ftype => :rvalue
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 345
  def _reduce_90( val, _values, result )
    result = ast AST::String, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 347
  def _reduce_91( val, _values, result )
    result = ast AST::FlatString, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 351
  def _reduce_92( val, _values, result )
    result = ast AST::Boolean, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 356
  def _reduce_93( val, _values, result )
    Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
    result = ast AST::ResourceRef, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 358
  def _reduce_94( val, _values, result )
    result = ast AST::ResourceRef, :type => val[0], :title => val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 371
  def _reduce_95( val, _values, result )
    args = {
        :test => val[1],
        :statements => val[3]
    }

    if val[5]
        args[:else] = val[5]
    end

    result = ast AST::IfStatement, args
   result
  end
.,.,

 # reduce 96 omitted

module_eval <<'.,.,', 'grammar.ra', 376
  def _reduce_97( val, _values, result )
    result = ast AST::Else, :statements => val[2]
   result
  end
.,.,

 # reduce 98 omitted

module_eval <<'.,.,', 'grammar.ra', 388
  def _reduce_99( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = ast AST::ASTArray, :children => [val[3]]
    end
    result = ast AST::CaseStatement, :test => val[1], :options => options
   result
  end
.,.,

 # reduce 100 omitted

module_eval <<'.,.,', 'grammar.ra', 398
  def _reduce_101( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0], val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 402
  def _reduce_102( val, _values, result )
    result = ast AST::CaseOpt, :value => val[0], :statements => val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 407
  def _reduce_103( val, _values, result )
    result = ast(AST::CaseOpt,
        :value => val[0],
        :statements => ast(AST::ASTArray)
    )
   result
  end
.,.,

 # reduce 104 omitted

module_eval <<'.,.,', 'grammar.ra', 417
  def _reduce_105( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 421
  def _reduce_106( val, _values, result )
    result = ast AST::Selector, :param => val[0], :values => val[2]
   result
  end
.,.,

 # reduce 107 omitted

module_eval <<'.,.,', 'grammar.ra', 423
  def _reduce_108( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 109 omitted

module_eval <<'.,.,', 'grammar.ra', 434
  def _reduce_110( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = ast AST::ASTArray, :children => [val[0],val[2]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 438
  def _reduce_111( val, _values, result )
    result = ast AST::ResourceParam, :param => val[0], :value => val[2]
   result
  end
.,.,

 # reduce 112 omitted

 # reduce 113 omitted

 # reduce 114 omitted

 # reduce 115 omitted

 # reduce 116 omitted

 # reduce 117 omitted

module_eval <<'.,.,', 'grammar.ra', 448
  def _reduce_118( val, _values, result )
    result = ast AST::Default, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 503
  def _reduce_119( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = ast AST::ASTArray

    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end
        files = Dir.glob(pat)
        if files.size == 0
            files = Dir.glob(pat + ".pp")
            if files.size == 0
                raise Puppet::ImportError.new("No file(s) found for import " + 
                                              "of '#{pat}'")
            end
        end

        files.each { |file|
            parser = Puppet::Parser::Parser.new(interp)
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)

            unless file =~ /^#{File::SEPARATOR}/
                file = File.join(dir, file)
            end
            begin
                parser.file = file
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                next
            end

            # This will normally add code to the 'main' class.
            parser.parse
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 513
  def _reduce_120( val, _values, result )
    interp.newdefine fqname(val[1]), :arguments => val[2], :code => val[4]
    @lexer.indefine = false
    result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 517
  def _reduce_121( val, _values, result )
    interp.newdefine fqname(val[1]), :arguments => val[2]
    @lexer.indefine = false
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 525
  def _reduce_122( val, _values, result )
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    interp.newclass fqname(val[1]), :code => val[4], :parent => val[2]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 530
  def _reduce_123( val, _values, result )
    # Our class gets defined in the parent namespace, not our own.
    @lexer.namepop
    interp.newclass fqname(val[1]), :parent => val[2]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 535
  def _reduce_124( val, _values, result )
    interp.newnode val[1], :parent => val[2], :code => val[4]
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 538
  def _reduce_125( val, _values, result )
    interp.newnode val[1], :parent => val[2]
    result = nil
   result
  end
.,.,

 # reduce 126 omitted

 # reduce 127 omitted

 # reduce 128 omitted

module_eval <<'.,.,', 'grammar.ra', 550
  def _reduce_129( val, _values, result )
    result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]
   result
  end
.,.,

 # reduce 130 omitted

 # reduce 131 omitted

 # reduce 132 omitted

module_eval <<'.,.,', 'grammar.ra', 558
  def _reduce_133( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 562
  def _reduce_134( val, _values, result )
    result = ast AST::ASTArray, :children => []
   result
  end
.,.,

 # reduce 135 omitted

module_eval <<'.,.,', 'grammar.ra', 567
  def _reduce_136( val, _values, result )
    result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 571
  def _reduce_137( val, _values, result )
    result = val[1]
    result = [result] unless result[0].is_a?(Array)
   result
  end
.,.,

 # reduce 138 omitted

module_eval <<'.,.,', 'grammar.ra', 578
  def _reduce_139( val, _values, result )
    result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 583
  def _reduce_140( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 587
  def _reduce_141( val, _values, result )
    Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 589
  def _reduce_142( val, _values, result )
    result = [val[0], val[2]]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 591
  def _reduce_143( val, _values, result )
    result = [val[0]]
   result
  end
.,.,

 # reduce 144 omitted

module_eval <<'.,.,', 'grammar.ra', 596
  def _reduce_145( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 146 omitted

module_eval <<'.,.,', 'grammar.ra', 601
  def _reduce_147( val, _values, result )
    result = val[1]
   result
  end
.,.,

 # reduce 148 omitted

 # reduce 149 omitted

 # reduce 150 omitted

 # reduce 151 omitted

module_eval <<'.,.,', 'grammar.ra', 608
  def _reduce_152( val, _values, result )
    result = ast AST::Variable, :value => val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 616
  def _reduce_153( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = ast AST::ASTArray, :children => [val[1]]
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 618
  def _reduce_154( val, _values, result )
    result = ast AST::ASTArray
   result
  end
.,.,

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

module_eval <<'.,.,', 'grammar.ra', 623
  def _reduce_158( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
