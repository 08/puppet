#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    # this exception class already has a :stack accessor
    class ParseError < Puppet::Error
        attr_accessor :line, :file
    end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id9842a85864', 'grammar.ra', 569
attr_writer :stack
attr_reader :file

def file=(file)
    if self.stack.include?(file)
        raise Puppet::ImportError.new("Import loop detected")
    else
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    if Puppet[:debug]
        @yydebut = true
    end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.stack = caller
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        except.stack ||= except.stack
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        except.stack ||= caller
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.stack = caller
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def stack
    if defined? @stack and ! @stack.nil?
        if @lexer.file
            return [@stack,@lexer.file].flatten
        else
            return @stack
        end
    else
        if @lexer.file
            return [@lexer.file]
        else
            return []
        end
    end
end

def string=(string)
    @lexer.string = string
end
..end grammar.ra modeval..id9842a85864

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 40, :_reduce_1,
 1, 41, :_reduce_none,
 2, 41, :_reduce_3,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 1, 42, :_reduce_none,
 5, 43, :_reduce_10,
 5, 43, :_reduce_11,
 5, 43, :_reduce_12,
 3, 55, :_reduce_13,
 1, 50, :_reduce_none,
 3, 50, :_reduce_15,
 0, 51, :_reduce_none,
 1, 51, :_reduce_none,
 1, 49, :_reduce_18,
 1, 54, :_reduce_19,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 1, 56, :_reduce_none,
 3, 44, :_reduce_26,
 0, 52, :_reduce_27,
 1, 52, :_reduce_28,
 3, 52, :_reduce_29,
 3, 62, :_reduce_30,
 1, 63, :_reduce_none,
 3, 63, :_reduce_32,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 61, :_reduce_none,
 1, 57, :_reduce_42,
 1, 65, :_reduce_43,
 4, 66, :_reduce_44,
 5, 45, :_reduce_45,
 1, 67, :_reduce_none,
 2, 67, :_reduce_47,
 5, 68, :_reduce_48,
 1, 69, :_reduce_none,
 3, 69, :_reduce_50,
 3, 58, :_reduce_51,
 1, 71, :_reduce_none,
 3, 71, :_reduce_53,
 1, 73, :_reduce_none,
 3, 73, :_reduce_55,
 3, 72, :_reduce_56,
 1, 70, :_reduce_57,
 1, 70, :_reduce_58,
 1, 70, :_reduce_59,
 1, 70, :_reduce_60,
 1, 70, :_reduce_none,
 2, 46, :_reduce_62,
 6, 47, :_reduce_63,
 7, 48, :_reduce_64,
 0, 76, :_reduce_65,
 1, 74, :_reduce_none,
 3, 74, :_reduce_67,
 3, 74, :_reduce_68,
 1, 77, :_reduce_none,
 3, 77, :_reduce_70,
 3, 78, :_reduce_71,
 1, 78, :_reduce_72,
 1, 75, :_reduce_none,
 2, 75, :_reduce_74,
 1, 59, :_reduce_75,
 3, 60, :_reduce_76,
 1, 64, :_reduce_none,
 1, 64, :_reduce_none,
 0, 53, :_reduce_none,
 1, 53, :_reduce_80 ]

racc_reduce_n = 81

racc_shift_n = 136

racc_action_table = [
    77,   100,    80,   112,    48,    77,    91,    99,     4,     7,
    77,    11,    13,   110,   126,    77,    72,    73,     2,     5,
    77,     9,    93,    47,    95,    77,    36,   111,    31,    22,
    24,    75,    76,    31,    90,    79,    75,    76,    31,    93,
    79,    75,    76,    31,    90,    79,    75,    76,    31,   101,
    79,    75,    76,    31,    27,    79,    75,    76,    31,   102,
    79,     2,     5,    22,    24,    22,    24,    71,    22,    24,
     5,    72,    73,    64,    22,    24,   105,    63,   108,    22,
    24,    41,    40,    64,    22,    24,    46,    89,    27,   116,
    27,    64,    31,    27,    31,     2,     5,     2,     5,    27,
     2,    53,   118,    31,    27,    46,     2,     5,    31,    27,
   120,     2,     5,    31,    22,    24,     2,     5,   121,    22,
    24,     5,    41,    40,    22,    24,    38,    70,   128,    37,
   130,    36,    35,    20,    64,    19,   119,   nil,   nil,    27,
   135,   nil,   nil,   nil,    27,   124,     2,     5,    31,    27,
   nil,     2,     5,    31,   nil,   nil,     2,     5,     4,     7,
   134,    11,    13,     4,     7,   nil,    11,    13,     2,     5,
   nil,     9,   nil,     2,     5,   nil,     9,   nil,     4,     7,
   nil,    11,    13,     4,     7,   nil,    11,    13,     2,     5,
   nil,     9,   nil,     2,     5,   nil,     9,     4,     7,   nil,
    11,    13,     4,     7,   nil,    11,    13,     2,     5,   nil,
     9,   nil,     2,     5,   nil,     9,     4,     7,   nil,    11,
    13,   nil,   nil,   nil,   nil,   nil,     2,     5,   nil,     9 ]

racc_action_check = [
    46,    66,    46,    87,    30,    48,    58,    66,   120,   120,
    85,   120,   120,    85,   107,   112,   107,   107,   120,   120,
   127,   120,    60,    29,    62,    80,    29,    87,    46,   105,
   105,    46,    46,    48,    64,    46,    48,    48,    85,    65,
    48,    85,    85,   112,    53,    85,   112,   112,   127,    68,
   112,   127,   127,    80,   105,   127,    80,    80,   105,    69,
    80,   105,   105,     9,     9,    74,    74,    45,    36,    36,
    41,    45,    45,    40,   101,   101,    78,    38,    84,    22,
    22,    37,    34,    89,    35,    35,    55,    51,     9,    92,
    74,    93,     9,    36,    74,     9,     9,    74,    74,   101,
    36,    36,    94,   101,    22,    26,   101,   101,    22,    35,
    96,    22,    22,    35,    91,    91,    35,    35,    98,    90,
    90,   100,    20,    17,    47,    47,    14,    42,   111,    13,
   113,    12,    11,     7,   130,     4,    95,   nil,   nil,    91,
   133,   nil,   nil,   nil,    90,   103,    91,    91,    90,    47,
   nil,    90,    90,    47,   nil,   nil,    47,    47,   133,   133,
   131,   133,   133,   103,   103,   nil,   103,   103,   133,   133,
   nil,   133,   nil,   103,   103,   nil,   103,   nil,   131,   131,
   nil,   131,   131,    70,    70,   nil,    70,    70,   131,   131,
   nil,   131,   nil,    70,    70,   nil,    70,    15,    15,   nil,
    15,    15,   128,   128,   nil,   128,   128,    15,    15,   nil,
    15,   nil,   128,   128,   nil,   128,     0,     0,   nil,     0,
     0,   nil,   nil,   nil,   nil,   nil,     0,     0,   nil,     0 ]

racc_action_pointer = [
   192,   nil,   nil,   nil,   132,   nil,   nil,    98,   nil,    61,
   nil,   120,   126,    94,   126,   173,   nil,   118,   nil,   nil,
   108,   nil,    77,   nil,   nil,   nil,    92,   nil,   nil,    21,
    -1,   nil,   nil,   nil,    77,    82,    66,    67,    77,   nil,
    38,    35,   122,   nil,   nil,    63,    -3,   122,     2,   nil,
   nil,    54,   nil,    36,   nil,    73,   nil,   nil,   -30,   nil,
    13,   nil,    -5,   nil,    26,    30,    -8,   nil,    37,    44,
   159,   nil,   nil,   nil,    63,   nil,   nil,   nil,    68,   nil,
    22,   nil,   nil,   nil,    74,     7,   nil,    -6,   nil,    48,
   117,   112,    83,    56,    96,   101,   105,   nil,   112,   nil,
    86,    72,   nil,   139,   nil,    27,   nil,     8,   nil,   nil,
   nil,   123,    12,   121,   nil,   nil,   nil,   nil,   nil,   nil,
   -16,   nil,   nil,   nil,   nil,   nil,   nil,    17,   178,   nil,
    99,   154,   nil,   134,   nil,   nil ]

racc_action_default = [
   -81,    -5,   -19,    -6,   -81,   -18,    -7,   -81,    -8,   -81,
    -9,   -81,   -81,   -81,   -81,    -1,    -2,   -81,    -4,   -62,
   -65,   -41,   -81,   -33,   -42,   -37,   -39,   -75,   -40,   -34,
   -81,   -43,   -38,   -36,   -35,   -81,   -27,   -65,   -81,    -3,
   -27,   -65,   -81,   -66,   -31,   -81,   -81,   -81,   -81,   -26,
   -14,   -81,   -20,   -18,   -23,   -24,   -25,   -21,   -16,   -28,
   -79,   -22,   -65,   136,   -81,   -79,   -81,   -69,   -72,   -81,
   -81,   -76,   -77,   -78,   -81,   -58,   -57,   -59,   -81,   -60,
   -81,   -51,   -52,   -61,   -81,   -81,   -46,   -81,   -49,   -27,
   -81,   -17,   -81,   -80,   -81,   -81,   -81,   -73,   -81,   -68,
   -81,   -81,   -67,   -81,   -32,   -81,   -54,   -81,   -44,   -47,
   -45,   -81,   -81,   -13,   -30,   -15,   -10,   -29,   -11,   -74,
   -81,   -12,   -70,   -71,   -63,   -56,   -53,   -81,   -81,   -50,
   -81,   -81,   -55,   -81,   -64,   -48 ]

racc_goto_table = [
    15,    39,    30,    32,    82,    67,    52,    54,    88,    74,
    29,    55,    83,   117,    83,    44,    32,    86,    50,    56,
    94,   107,    69,    29,    81,    98,    60,    58,    49,    32,
    65,    34,    42,    92,    45,    96,    29,    57,   106,    85,
    84,    32,    68,    97,    34,    88,    83,    66,    29,    62,
   117,    83,    14,   nil,   109,   nil,   nil,    34,    61,   nil,
   nil,    52,    54,   nil,   122,   nil,    55,   104,    32,    34,
   103,   127,   129,   115,    56,    29,   nil,   nil,    83,   113,
   nil,   nil,   nil,   114,    32,   132,   nil,   nil,   nil,    39,
   nil,    29,    57,    83,   123,    32,    34,   nil,   125,    32,
   nil,    68,    29,   nil,   nil,   nil,    29,   nil,   nil,   nil,
   nil,   nil,    34,    61,   nil,   nil,   nil,    39,   nil,    39,
   131,   nil,   nil,    34,   nil,   nil,   nil,    34,   133 ]

racc_goto_check = [
     2,     3,    22,     4,    33,    39,    18,    19,    31,    25,
    10,    20,    26,    23,    26,    22,     4,    29,    16,    21,
    14,    34,    37,    10,    32,    14,    13,    11,    22,     4,
    13,    15,    35,    12,    24,    36,    10,    10,    33,    28,
    22,     4,    10,    37,    15,    31,    26,    38,    10,    35,
    23,    26,     1,   nil,    29,   nil,   nil,    15,    15,   nil,
   nil,    18,    19,   nil,    39,   nil,    20,    22,     4,    15,
     2,    25,    31,    16,    21,    10,   nil,   nil,    26,    13,
   nil,   nil,   nil,    22,     4,    33,   nil,   nil,   nil,     3,
   nil,    10,    10,    26,    22,     4,    15,   nil,    22,     4,
   nil,    10,    10,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,    15,    15,   nil,   nil,   nil,     3,   nil,     3,
     2,   nil,   nil,    15,   nil,   nil,   nil,    15,     2 ]

racc_goto_pointer = [
   nil,    52,     0,   -14,    -6,   nil,   nil,   nil,   nil,   nil,
     1,    -9,   -25,   -10,   -40,    22,   -18,   nil,   -30,   -29,
   -25,   -17,    -7,   -80,    12,   -36,   -34,   nil,    -9,   -31,
   nil,   -40,   -22,   -42,   -59,    12,   -27,   -19,     6,   -36 ]

racc_goto_default = [
   nil,   nil,   nil,    16,    18,     1,     3,     6,     8,    10,
    12,   nil,   nil,   nil,   nil,    17,   nil,    51,    23,    25,
    26,    28,   nil,    59,   nil,   nil,    33,    21,   nil,   nil,
    87,    78,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :QTEXT => 3,
 :RBRACK => 4,
 :LBRACE => 5,
 :RBRACE => 6,
 :SYMBOL => 7,
 :FARROW => 8,
 :COMMA => 9,
 :TRUE => 10,
 :FALSE => 11,
 :EQUALS => 12,
 :QMARK => 13,
 :LPAREN => 14,
 :RPAREN => 15,
 :ISEQUAL => 16,
 :GREATEREQUAL => 17,
 :GREATERTHAN => 18,
 :LESSTHAN => 19,
 :LESSEQUAL => 20,
 :NOTEQUAL => 21,
 :IF => 22,
 :ELSE => 23,
 :IMPORT => 24,
 :DEFINE => 25,
 :ELSIF => 26,
 :VARIABLE => 27,
 :CLASS => 28,
 :INHERITS => 29,
 :NODE => 30,
 :BOOLEAN => 31,
 :DOT => 32,
 :COLON => 33,
 :TYPE => 34,
 :NAME => 35,
 :SEMIC => 36,
 :CASE => 37,
 :DEFAULT => 38 }

racc_use_result_var = true

racc_nt_base = 39

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'QTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'LESSEQUAL',
'NOTEQUAL',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'DOT',
'COLON',
'TYPE',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'$start',
'program',
'statements',
'statement',
'object',
'assignment',
'casestatement',
'import',
'definition',
'hostclass',
'name',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'quotedtext',
'selector',
'variable',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'nothing',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 40
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end

    # this is mainly so we can test the parser separately from the
    # interpreter
    if Puppet[:parseonly]
        begin
            if Puppet[:debug]
                puts result.tree(0)
            end
        rescue NoMethodError => detail
            Puppet.err detail
            #exit(78)
        end
        #require 'puppet/parser/interpreter'
        #result = Puppet::Server.new(result)
    end
   result
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'grammar.ra', 54
  def _reduce_3( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

module_eval <<'.,.,', 'grammar.ra', 93
  def _reduce_10( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.is_a?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.is_a?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 116
  def _reduce_11( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type

    # make a unique name for bookkeeping purposes
    name = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => [val[0].value, "-", val[0].object_id].join('')
    )

    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => name,
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 129
  def _reduce_12( val, _values, result )
    # a template setting for a type
    if val[0].is_a?(AST::ASTArray)
        Puppet.notice "invalid type"
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 137
  def _reduce_13( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 14 omitted

module_eval <<'.,.,', 'grammar.ra', 151
  def _reduce_15( val, _values, result )
    if val[0].is_a?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 162
  def _reduce_18( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 170
  def _reduce_19( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 20 omitted

 # reduce 21 omitted

 # reduce 22 omitted

 # reduce 23 omitted

 # reduce 24 omitted

 # reduce 25 omitted

module_eval <<'.,.,', 'grammar.ra', 193
  def _reduce_26( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 202
  def _reduce_27( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 202
  def _reduce_28( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 215
  def _reduce_29( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 230
  def _reduce_30( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 31 omitted

module_eval <<'.,.,', 'grammar.ra', 243
  def _reduce_32( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 33 omitted

 # reduce 34 omitted

 # reduce 35 omitted

 # reduce 36 omitted

 # reduce 37 omitted

 # reduce 38 omitted

 # reduce 39 omitted

 # reduce 40 omitted

 # reduce 41 omitted

module_eval <<'.,.,', 'grammar.ra', 261
  def _reduce_42( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 269
  def _reduce_43( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 279
  def _reduce_44( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 296
  def _reduce_45( val, _values, result )
    options = val[3]
    unless options.is_a?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => val[3],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 46 omitted

module_eval <<'.,.,', 'grammar.ra', 310
  def _reduce_47( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 320
  def _reduce_48( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

 # reduce 49 omitted

module_eval <<'.,.,', 'grammar.ra', 334
  def _reduce_50( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 344
  def _reduce_51( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 52 omitted

module_eval <<'.,.,', 'grammar.ra', 346
  def _reduce_53( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 54 omitted

module_eval <<'.,.,', 'grammar.ra', 361
  def _reduce_55( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 371
  def _reduce_56( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 379
  def _reduce_57( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 386
  def _reduce_58( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 393
  def _reduce_59( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 400
  def _reduce_60( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 61 omitted

module_eval <<'.,.,', 'grammar.ra', 433
  def _reduce_62( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    Dir.chdir(dir) {
        Dir.glob(val[1]).each { |file|
            parser = Puppet::Parser::Parser.new()
            parser.stack = self.stack
            Puppet.debug("importing '%s'" % file)
            begin
                parser.file = file
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                result = AST::ASTArray.new(
                    :file => @lexer.file,
                    :line => @lexer.line
                )
                next
            end
            result = parser.parse
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 443
  def _reduce_63( val, _values, result )
    result = AST::CompDef.new(
        :name => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 454
  def _reduce_64( val, _values, result )
    result = AST::ClassDef.new(
        :name => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :parentclass => val[3],
        :file => @lexer.file,
        :line => @lexer.line,
        :code => val[5]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 469
  def _reduce_65( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 66 omitted

module_eval <<'.,.,', 'grammar.ra', 474
  def _reduce_67( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 485
  def _reduce_68( val, _values, result )
    if val[1].is_a?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0]]
        )
    end
   result
  end
.,.,

 # reduce 69 omitted

module_eval <<'.,.,', 'grammar.ra', 499
  def _reduce_70( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 507
  def _reduce_71( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 514
  def _reduce_72( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 73 omitted

module_eval <<'.,.,', 'grammar.ra', 523
  def _reduce_74( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 532
  def _reduce_75( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 541
  def _reduce_76( val, _values, result )
    if val[1].is_a?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new
        result.push val[1]
    end
   result
  end
.,.,

 # reduce 77 omitted

 # reduce 78 omitted

 # reduce 79 omitted

module_eval <<'.,.,', 'grammar.ra', 546
  def _reduce_80( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
