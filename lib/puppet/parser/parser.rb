#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parsedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..id2a60afd493', 'grammar.ra', 775
require 'puppet/parser/functions'

attr_reader :file
attr_accessor :files

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = AST::ASTArray.new(
            :children => args
        )
    end

    return result
end

def file=(file)
    unless FileTest.exists?(file)
        unless file =~ /\.pp$/
            file = file + ".pp"
        end
        unless FileTest.exists?(file)
            raise Puppet::Error, "Could not find file %s" % file
        end
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::ParsedFile.new(file)
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
    #if Puppet[:debug]
    #    @yydebug = true
    #end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def reparse?
    @files.detect { |file|
        file.changed?
    }
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..id2a60afd493

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 45, :_reduce_1,
 1, 45, :_reduce_none,
 1, 46, :_reduce_none,
 2, 46, :_reduce_4,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 1, 48, :_reduce_none,
 4, 55, :_reduce_15,
 2, 55, :_reduce_16,
 1, 59, :_reduce_none,
 3, 59, :_reduce_18,
 1, 60, :_reduce_none,
 1, 60, :_reduce_none,
 5, 49, :_reduce_21,
 5, 49, :_reduce_22,
 5, 49, :_reduce_23,
 2, 50, :_reduce_24,
 3, 51, :_reduce_25,
 4, 68, :_reduce_26,
 1, 63, :_reduce_none,
 3, 63, :_reduce_28,
 0, 64, :_reduce_none,
 1, 64, :_reduce_none,
 1, 61, :_reduce_31,
 1, 67, :_reduce_32,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 3, 52, :_reduce_39,
 0, 65, :_reduce_40,
 1, 65, :_reduce_41,
 3, 65, :_reduce_42,
 3, 74, :_reduce_43,
 1, 75, :_reduce_none,
 3, 75, :_reduce_45,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 1, 73, :_reduce_none,
 4, 79, :_reduce_56,
 1, 70, :_reduce_57,
 1, 70, :_reduce_58,
 1, 77, :_reduce_59,
 4, 78, :_reduce_60,
 5, 53, :_reduce_61,
 1, 80, :_reduce_none,
 2, 80, :_reduce_63,
 5, 81, :_reduce_64,
 4, 81, :_reduce_65,
 1, 82, :_reduce_none,
 3, 82, :_reduce_67,
 3, 71, :_reduce_68,
 1, 84, :_reduce_none,
 3, 84, :_reduce_70,
 1, 86, :_reduce_none,
 3, 86, :_reduce_72,
 3, 85, :_reduce_73,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_none,
 1, 83, :_reduce_80,
 2, 54, :_reduce_81,
 6, 56, :_reduce_82,
 5, 56, :_reduce_83,
 6, 57, :_reduce_84,
 5, 57, :_reduce_85,
 6, 58, :_reduce_86,
 5, 58, :_reduce_87,
 1, 89, :_reduce_none,
 3, 89, :_reduce_89,
 1, 90, :_reduce_90,
 1, 90, :_reduce_91,
 0, 47, :_reduce_92,
 1, 87, :_reduce_none,
 3, 87, :_reduce_94,
 3, 87, :_reduce_95,
 1, 91, :_reduce_none,
 3, 91, :_reduce_97,
 3, 92, :_reduce_98,
 1, 92, :_reduce_99,
 1, 88, :_reduce_none,
 2, 88, :_reduce_101,
 1, 62, :_reduce_102,
 3, 72, :_reduce_103,
 1, 76, :_reduce_none,
 1, 76, :_reduce_none,
 0, 66, :_reduce_none,
 1, 66, :_reduce_107 ]

racc_reduce_n = 108

racc_shift_n = 179

racc_action_table = [
    37,    40,    41,    69,    30,    18,    37,    40,    41,    61,
    30,    54,    37,    40,    41,    77,    18,    31,    95,    54,
    52,   104,    18,     8,   150,     8,    66,   125,    18,    52,
   -75,   149,   -74,    38,     8,    52,    29,    45,    50,    38,
     8,    52,    29,    45,    50,    38,     8,    55,   -76,    45,
    50,    37,    40,    41,   -74,    97,   -77,    37,    40,    41,
   156,    97,   126,    37,    40,    41,   151,    18,    40,    41,
   107,   157,   135,    18,   108,   109,    52,    52,    52,    18,
    52,     8,     8,     8,    38,     8,    52,   106,    45,    50,
    38,    84,    52,     8,    45,    50,    38,     8,   133,    93,
    45,    50,    37,    40,    41,   106,   136,    78,    37,    40,
    41,   104,   140,    70,    37,    40,    41,   166,    18,   108,
   109,    76,   143,   -76,    18,   146,   -78,   -75,   102,    70,
    18,    52,   -79,   154,   155,    38,     8,    52,   101,    45,
    50,    38,     8,    52,   158,    45,    50,    38,     8,   159,
    66,    45,    50,    37,    40,    41,    40,    41,    70,    65,
   148,    64,    79,   168,    97,   106,    40,    41,     8,    18,
    54,    18,    56,   -77,    32,    31,    73,   nil,   nil,   nil,
   nil,    18,    52,   nil,    52,   nil,    38,     8,    38,     8,
    45,    50,    45,    50,    52,   nil,   nil,   nil,    38,     8,
   nil,   nil,    45,    50,    40,    41,   nil,   115,   nil,   nil,
    40,    41,   nil,   nil,   nil,   nil,    40,    41,   nil,    18,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,    18,    52,   nil,   nil,   nil,    38,     8,    52,   nil,
    45,    50,    38,     8,    52,   nil,    45,    50,    38,     8,
    40,    41,    45,    50,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   164,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,    18,
   nil,   nil,    38,     8,   nil,   161,    45,    50,   nil,    14,
    17,   nil,    23,    25,   nil,     2,    18,     8,   nil,    12,
   173,    19,    21,   nil,   nil,   nil,    14,    17,   nil,    23,
    25,    18,     2,   nil,     8,   174,    12,   nil,    19,    21,
   nil,    14,    17,   nil,    23,    25,    18,     2,   nil,     8,
   177,    12,   nil,    19,    21,   nil,    14,    17,   nil,    23,
    25,    18,     2,   nil,     8,   178,    12,   nil,    19,    21,
   nil,    14,    17,   nil,    23,    25,    18,     2,   nil,     8,
   138,    12,   nil,    19,    21,   nil,    14,    17,   nil,    23,
    25,    18,     2,   nil,     8,   163,    12,   nil,    19,    21,
   nil,    14,    17,   nil,    23,    25,    18,     2,   nil,     8,
   nil,    12,   nil,    19,    21,   nil,    14,    17,   nil,    23,
    25,    18,     2,   nil,     8,   nil,    12,   nil,    19,    21,
   nil,    14,    17,   nil,    23,    25,    18,     2,   nil,     8,
   nil,    12,   nil,    19,    21,   nil,    14,    17,   nil,    23,
    25,   nil,     2,   nil,     8,   nil,    12,   nil,    19,    21 ]

racc_action_check = [
   126,   126,   126,    27,    69,    21,   104,   104,   104,    19,
     2,    15,   110,   110,   110,    48,   126,    36,    56,    48,
    19,    84,   104,    21,   122,    19,    27,    85,   110,   126,
    36,   122,    48,   126,   126,   104,    69,   126,   126,   104,
   104,   110,     2,   104,   104,   110,   110,    15,    86,   110,
   110,    64,    64,    64,    89,   124,    90,    54,    54,    54,
   129,    98,    91,    12,    12,    12,   124,    64,    14,    14,
    75,   129,    98,    54,    75,    75,    79,    97,    61,    12,
    64,    79,    97,    61,    64,    64,    54,    92,    64,    64,
    54,    54,    12,    95,    54,    54,    12,    12,    96,    55,
    12,    12,    77,    77,    77,    72,   100,    49,    37,    37,
    37,    70,   105,   106,   143,   143,   143,   145,    77,   145,
   145,    46,   114,    42,    37,   119,    39,    81,    67,   125,
   143,    77,    34,   127,   128,    77,    77,    37,    66,    77,
    77,    37,    37,   143,   130,    37,    37,   143,   143,   132,
    65,   143,   143,   159,   159,   159,   120,   120,    31,    25,
   120,    23,    50,   149,    57,   152,   150,   150,   156,   159,
    63,   120,    17,    51,     5,     3,    32,   nil,   nil,   nil,
   nil,   150,   159,   nil,   120,   nil,   159,   159,   120,   120,
   159,   159,   120,   120,   150,   nil,   nil,   nil,   150,   150,
   nil,   nil,   150,   150,    76,    76,   nil,    76,   nil,   nil,
   115,   115,   nil,   nil,   nil,   nil,   167,   167,   nil,    76,
   nil,   nil,   nil,   nil,   nil,   115,   nil,   nil,   nil,   nil,
   nil,   167,    76,   nil,   nil,   nil,    76,    76,   115,   nil,
    76,    76,   115,   115,   167,   nil,   115,   115,   167,   167,
    78,    78,   167,   167,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    78,   nil,   nil,   137,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    78,   137,
   nil,   nil,    78,    78,   nil,   133,    78,    78,   nil,   137,
   137,   nil,   137,   137,   nil,   137,   133,   137,   nil,   137,
   160,   137,   137,   nil,   nil,   nil,   133,   133,   nil,   133,
   133,   160,   133,   nil,   133,   162,   133,   nil,   133,   133,
   nil,   160,   160,   nil,   160,   160,   162,   160,   nil,   160,
   168,   160,   nil,   160,   160,   nil,   162,   162,   nil,   162,
   162,   168,   162,   nil,   162,   176,   162,   nil,   162,   162,
   nil,   168,   168,   nil,   168,   168,   176,   168,   nil,   168,
   102,   168,   nil,   168,   168,   nil,   176,   176,   nil,   176,
   176,   102,   176,   nil,   176,   136,   176,   nil,   176,   176,
   nil,   102,   102,   nil,   102,   102,   136,   102,   nil,   102,
   nil,   102,   nil,   102,   102,   nil,   136,   136,   nil,   136,
   136,     7,   136,   nil,   136,   nil,   136,   nil,   136,   136,
   nil,     7,     7,   nil,     7,     7,     0,     7,   nil,     7,
   nil,     7,   nil,     7,     7,   nil,     0,     0,   nil,     0,
     0,   nil,     0,   nil,     0,   nil,     0,   nil,     0,     0 ]

racc_action_pointer = [
   398,   nil,     6,   169,   nil,   174,   nil,   383,   nil,   nil,
   nil,   nil,    61,   nil,    65,     5,   nil,   136,   nil,   -11,
   nil,   -13,   nil,   148,   nil,   123,   nil,    -7,   nil,   nil,
   nil,   122,   176,   nil,   113,   nil,    11,   106,   nil,   107,
   nil,   nil,   104,   nil,   nil,   nil,   102,   nil,    13,   101,
   142,   154,   nil,   nil,    55,    56,    -2,   154,   nil,   nil,
   nil,    47,   nil,   164,    49,   117,   102,   122,   nil,     0,
   102,   nil,    95,   nil,   nil,    65,   201,   100,   247,    45,
   nil,   108,   nil,   nil,    12,    10,    29,   nil,   nil,    35,
    37,    25,    77,   nil,   nil,    57,    92,    46,    51,   nil,
   100,   nil,   353,   nil,     4,   105,    77,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   113,   207,   nil,   nil,   nil,   120,
   153,   nil,    14,   nil,    45,    93,    -2,   126,   127,    50,
   123,   nil,   136,   278,   nil,   nil,   368,   261,   nil,   nil,
   nil,   nil,   nil,   112,   nil,   110,   nil,   nil,   nil,   157,
   163,   nil,   155,   nil,   nil,   nil,   132,   nil,   nil,   151,
   293,   nil,   308,   nil,   nil,   nil,   nil,   213,   323,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   338,   nil,   nil ]

racc_action_default = [
   -92,   -11,  -108,  -108,   -12,  -108,   -13,    -1,   -31,   -14,
    -2,    -3,  -108,    -5,  -108,  -108,    -6,  -108,   -32,  -108,
    -7,  -108,    -8,  -108,    -9,  -108,   -10,   -92,   -88,   -90,
   -91,   -40,  -108,    -4,   -49,   -54,   -48,  -108,   -59,   -55,
   -57,   -58,   -46,   -51,   -50,   -80,  -108,   -53,   -47,  -108,
  -108,   -52,  -102,   -81,   -40,  -108,   -92,   -16,   -17,   -19,
   -20,  -108,   -24,  -108,  -108,   -92,  -108,  -108,  -100,  -108,
  -108,   -41,  -106,   179,   -44,  -108,  -108,  -108,  -108,  -108,
   -79,   -35,   -78,   -27,   -31,  -108,   -33,   -36,   -38,   -34,
   -37,   -29,  -106,   -25,   -93,   -92,  -108,  -108,  -108,   -39,
  -108,  -101,  -108,   -89,  -108,  -108,  -107,  -103,  -104,  -105,
  -108,   -75,   -76,   -74,  -108,  -108,   -77,   -68,   -69,  -108,
  -108,   -62,  -108,   -66,  -108,   -40,   -30,  -108,  -108,  -108,
  -108,   -96,   -99,  -108,   -18,   -15,  -108,  -108,   -87,   -43,
   -23,   -42,   -45,  -108,   -71,  -108,   -60,   -63,   -61,  -108,
  -108,   -56,  -106,   -28,   -21,   -22,  -108,   -95,   -94,  -108,
  -108,   -83,  -108,   -85,   -86,   -73,   -70,  -108,  -108,   -67,
   -26,   -97,   -98,   -82,   -84,   -72,  -108,   -65,   -64 ]

racc_goto_table = [
    33,    49,     7,    48,    72,   118,    83,    10,    87,    88,
    59,   105,    63,   131,   110,    28,   121,    57,   114,   134,
   123,    53,    75,    91,   117,   120,    74,    92,    48,   145,
    96,   128,   127,    67,    27,   141,   129,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   144,    89,   nil,   nil,    36,   nil,
   nil,    43,    59,    99,   nil,    48,   nil,   114,   147,    98,
    62,    86,   123,    94,   nil,    82,   119,   113,    48,   113,
    59,   100,   nil,    36,   171,   nil,    43,   124,   153,   nil,
    87,    88,   103,   112,   167,   112,   132,    82,    59,    82,
    81,   170,   169,   139,   nil,    48,   175,   nil,   152,   142,
    36,    48,   130,    43,   137,   nil,   113,   nil,   nil,   114,
   nil,   113,   111,    36,   111,   nil,    43,    89,   nil,   nil,
   nil,   nil,   112,   nil,    60,   nil,    82,   112,   nil,   nil,
    33,    82,   165,    86,    48,   160,   nil,    82,   162,   nil,
    36,   113,   nil,    43,   nil,   nil,    36,   132,   172,    43,
    48,   111,   nil,    33,   nil,    33,   111,   112,   113,    90,
   nil,    82,    81,    80,   nil,   nil,    60,   nil,   nil,    33,
   176,   nil,   nil,   nil,   112,   nil,   nil,   nil,    82,    36,
   nil,   116,    43,   116,    60,    80,   111,    80,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,    43,   nil,
   nil,   nil,    60,   111,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   116,   nil,   nil,   nil,    80,   116,   nil,   nil,   nil,    80,
   nil,    90,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   116,   nil,   nil,   nil,    80,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   116,   nil,   nil,   nil,    80 ]

racc_goto_check = [
     4,    29,     2,    17,    21,    41,    24,     3,    27,    28,
    17,    22,    17,    48,    32,    46,    37,    15,    39,    16,
    39,    26,    31,    19,    40,    36,    29,    21,    17,    42,
    43,    22,    20,    44,    45,    30,    47,     1,   nil,   nil,
   nil,   nil,   nil,   nil,    41,    17,   nil,   nil,    23,   nil,
   nil,     5,    17,    29,   nil,    17,   nil,    39,    37,    15,
     5,    26,    39,     3,   nil,    35,    29,    17,    17,    17,
    17,    44,   nil,    23,    48,   nil,     5,    15,    24,   nil,
    27,    28,    46,    26,    32,    26,    17,    35,    17,    35,
    23,    22,    39,    29,   nil,    17,    41,   nil,    21,    29,
    23,    17,     3,     5,     2,   nil,    17,   nil,   nil,    39,
   nil,    17,    23,    23,    23,   nil,     5,    17,   nil,   nil,
   nil,   nil,    26,   nil,    18,   nil,    35,    26,   nil,   nil,
     4,    35,    29,    26,    17,     2,   nil,    35,     2,   nil,
    23,    17,   nil,     5,   nil,   nil,    23,    17,    29,     5,
    17,    23,   nil,     4,   nil,     4,    23,    26,    17,    18,
   nil,    35,    23,    33,   nil,   nil,    18,   nil,   nil,     4,
     2,   nil,   nil,   nil,    26,   nil,   nil,   nil,    35,    23,
   nil,    18,     5,    18,    18,    33,    23,    33,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,     5,   nil,
   nil,   nil,    18,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,   nil,   nil,    33,    18,   nil,   nil,   nil,    33,
   nil,    18,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,    33 ]

racc_goto_pointer = [
   nil,    37,     2,     7,    -7,    39,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    -2,   -78,    -9,   105,   -31,
   -59,   -27,   -61,    36,   -48,   nil,     7,   -46,   -45,   -11,
   -71,   -15,   -61,   109,   nil,    11,   -53,   -62,   nil,   -58,
   -52,   -71,   -86,   -26,     6,    32,    13,   -59,   -82 ]

racc_goto_default = [
   nil,   nil,   nil,    68,    11,    13,    16,    20,    22,    24,
    26,     1,     4,     6,     9,   nil,    58,    15,    51,   nil,
   nil,   nil,   nil,     3,   nil,    85,    42,    44,    47,   nil,
    71,   nil,   nil,    34,    35,    39,   nil,   nil,   122,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :LESSEQUAL => 14,
 :NOTEQUAL => 15,
 :DOT => 16,
 :COLON => 17,
 :TYPE => 18,
 :QMARK => 19,
 :LPAREN => 20,
 :RPAREN => 21,
 :ISEQUAL => 22,
 :GREATEREQUAL => 23,
 :GREATERTHAN => 24,
 :LESSTHAN => 25,
 :IF => 26,
 :ELSE => 27,
 :IMPORT => 28,
 :DEFINE => 29,
 :ELSIF => 30,
 :VARIABLE => 31,
 :CLASS => 32,
 :INHERITS => 33,
 :NODE => 34,
 :BOOLEAN => 35,
 :NAME => 36,
 :SEMIC => 37,
 :CASE => 38,
 :DEFAULT => 39,
 :FUNCTION => 40,
 :AT => 41,
 :LCOLLECT => 42,
 :RCOLLECT => 43 }

racc_use_result_var = true

racc_nt_base = 44

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'TYPE',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'FUNCTION',
'AT',
'LCOLLECT',
'RCOLLECT',
'$start',
'program',
'statements',
'nothing',
'statement',
'object',
'collectable',
'collection',
'assignment',
'casestatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'classnames',
'classname',
'name',
'variable',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'quotedtext',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'funcrvalue',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'hostnames',
'hostname',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 26
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 41
  def _reduce_4( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

module_eval <<'.,.,', 'grammar.ra', 64
  def _reduce_15( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 74
  def _reduce_16( val, _values, result )
    args = aryfy(val[1])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 93
  def _reduce_18( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 19 omitted

 # reduce 20 omitted

module_eval <<'.,.,', 'grammar.ra', 127
  def _reduce_21( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.instance_of?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 141
  def _reduce_22( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type
    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 153
  def _reduce_23( val, _values, result )
    # a template setting for a type
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 176
  def _reduce_24( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end

    if val[1].is_a? AST::TypeDefaults
        raise Puppet::ParseError, "Defaults are not collectable"
    end

    # Just mark our objects as collectable and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.collectable = true
        end
    else
        val[1].collectable = true
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 189
  def _reduce_25( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end
    result = AST::Collection.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 197
  def _reduce_26( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 27 omitted

module_eval <<'.,.,', 'grammar.ra', 211
  def _reduce_28( val, _values, result )
    if val[0].instance_of?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 29 omitted

 # reduce 30 omitted

module_eval <<'.,.,', 'grammar.ra', 222
  def _reduce_31( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 230
  def _reduce_32( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 33 omitted

 # reduce 34 omitted

 # reduce 35 omitted

 # reduce 36 omitted

 # reduce 37 omitted

 # reduce 38 omitted

module_eval <<'.,.,', 'grammar.ra', 253
  def _reduce_39( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 262
  def _reduce_40( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 262
  def _reduce_41( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 275
  def _reduce_42( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 290
  def _reduce_43( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 44 omitted

module_eval <<'.,.,', 'grammar.ra', 303
  def _reduce_45( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 46 omitted

 # reduce 47 omitted

 # reduce 48 omitted

 # reduce 49 omitted

 # reduce 50 omitted

 # reduce 51 omitted

 # reduce 52 omitted

 # reduce 53 omitted

 # reduce 54 omitted

 # reduce 55 omitted

module_eval <<'.,.,', 'grammar.ra', 326
  def _reduce_56( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :rvalue
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 334
  def _reduce_57( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 340
  def _reduce_58( val, _values, result )
    result = AST::FlatString.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 348
  def _reduce_59( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 358
  def _reduce_60( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 375
  def _reduce_61( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => options,
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 62 omitted

module_eval <<'.,.,', 'grammar.ra', 389
  def _reduce_63( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 399
  def _reduce_64( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 411
  def _reduce_65( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

 # reduce 66 omitted

module_eval <<'.,.,', 'grammar.ra', 425
  def _reduce_67( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 435
  def _reduce_68( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :values => val[2]
    )
   result
  end
.,.,

 # reduce 69 omitted

module_eval <<'.,.,', 'grammar.ra', 437
  def _reduce_70( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 71 omitted

module_eval <<'.,.,', 'grammar.ra', 452
  def _reduce_72( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 462
  def _reduce_73( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 74 omitted

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

 # reduce 78 omitted

 # reduce 79 omitted

module_eval <<'.,.,', 'grammar.ra', 476
  def _reduce_80( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 535
  def _reduce_81( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = AST::ASTArray.new(
        :file => @lexer.file,
        :line => @lexer.line
    )

    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end
        files = Dir.glob(pat)
        if files.size == 0
            files = Dir.glob(pat + ".pp")
            if files.size == 0
                raise Puppet::ImportError.new("No file(s) found for import " + 
                                              "of '#{pat}'")
            end
        end

        files.each { |file|
            parser = Puppet::Parser::Parser.new()
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)

            unless file =~ /^#{File::SEPARATOR}/
                file = File.join(dir, file)
            end
            begin
                parser.file = file
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                next
            end
            # push the results into the main result array
            parser.parse.each do |child|
                result.push child
            end
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 546
  def _reduce_82( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 559
  def _reduce_83( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 576
  def _reduce_84( val, _values, result )
        #:args => val[2],
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 593
  def _reduce_85( val, _values, result )
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 614
  def _reduce_86( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :names => val[1],
        :keyword => val[0],
        :code => val[4]
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 637
  def _reduce_87( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :names => val[1],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

 # reduce 88 omitted

module_eval <<'.,.,', 'grammar.ra', 652
  def _reduce_89( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0]
        result.push val[2]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 660
  def _reduce_90( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 666
  def _reduce_91( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 674
  def _reduce_92( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 93 omitted

module_eval <<'.,.,', 'grammar.ra', 679
  def _reduce_94( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 690
  def _reduce_95( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 96 omitted

module_eval <<'.,.,', 'grammar.ra', 704
  def _reduce_97( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 712
  def _reduce_98( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 719
  def _reduce_99( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 100 omitted

module_eval <<'.,.,', 'grammar.ra', 728
  def _reduce_101( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 737
  def _reduce_102( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 749
  def _reduce_103( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 104 omitted

 # reduce 105 omitted

 # reduce 106 omitted

module_eval <<'.,.,', 'grammar.ra', 754
  def _reduce_107( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
