---
inMenu: true
title: Configuration Reference
orderInfo: 40
---
# Puppet Configuration Reference

## Specifying Configuration Parameters

Every Puppet executable (with the exception of ``puppetdoc``) accepts all of
the arguments below, but not all of the arguments make sense for every executable.
Each argument has a section listed with it in parentheses; often, that section
will map to an executable (e.g., ``puppetd``), in which case it probably only
makes sense for that one executable.  If ``puppet`` is listed as the section,
it is most likely an option that is valid for everyone.

This will not always be the case.  I have tried to be as thorough as possible
in the descriptions of the arguments, so it should be obvious whether an
argument is appropriate or not.

These arguments can be supplied to the executables either as command-line 
arugments or in the configuration file for the appropriate executable.  For 
instance, the command-line invocation below would set the configuration directory
to /private/puppet
  
    $ puppetd --confdir=/private/puppet
  
Note that boolean options are turned on and off with a slightly different syntax
on the command line:

    $ puppetd --storeconfigs
      
    $ puppetd --no-storeconfigs

The invocations above will enable and disable, respectively, the storage of 
the client configuration.

As mentioned above, the configuration parameters can also be stored in a 
configuration file located in the configuration directory (`/etc/puppet` 
by default).  The file is named for the executable it is intended for, for
example `/etc/puppetd.conf` is the configuration file for `puppetd`.

The file, which follows INI-style formatting, should contain a bracketed
heading named for the executable, followed by pairs of parameters with their
values.  Here is an example of a very simple `puppetd.conf` file:

    [puppetd]
        confdir = /private/puppet
        storeconfigs = true
    
Note that boolean parameters must be explicitly specified as `true` or
`false` as seen above.

If you're starting out with a fresh configuration, you may wish to let
the executable generate a template configuration file for you by invoking
the executable in question with the `--genconfig` command.  The executable
will print a template configuration to standard output, which can be
redirected to a file like so:

    $ puppetd --genconfig > /etc/puppet/puppetd.conf
  
Note that this invocation will "clobber" (throw away) the contents of any
pre-existing `puppetd.conf` file, so make a backup of your present config
if it contains valuable information.
  
Like the `--genconfig` argument, the executables also accept a `--genmanifest`
argument, which will generate a manifest that can be used to manage all of 
Puppet's directories and files and prints it to standard output.  This can
likewise be redirected to a file:

    $ puppetd --genmanifest > /etc/puppet/manifests/site.pp

Puppet can also create user and group accounts for itself (one `puppet` group
and one `puppet` user) if it is invoked as `root` with the `--mkusers` argument:

    $ puppetd --mkusers
  
## Signals

The `puppetd` and `puppetmasterd` executables catch some signals for special 
handling.  Both daemons catch (`SIGHUP`), which forces the server to restart 
tself.  Predictably, interrupt and terminate (`SIGINT` and `SIGHUP`) will shut 
down the server, whether it be an instance of `puppetd` or `puppetmasterd`.

Sending the `SIGUSR1` signal to an instance of `puppetd` will cause it to 
immediately begin a new configuration transaction with the server.  This 
signal has no effect on `puppetmasterd`.


## Configuration Parameter Reference

Below is a list of all documented parameters.  Any default values are in ``block type`` at the end of the description.


#### <a name="authconfig">authconfig</a> (<em>puppet</em>)

The configuration file that defines the rights to the different namespaces and methods.  This can be used as a coarse-grained authorization system for both ``puppetd`` and ``puppetmasterd``.  ``/etc/puppet/namespaceauth.conf``

#### <a name="autoflush">autoflush</a> (<em>puppet</em>)

Whether log files should always flush to disk.

#### <a name="autosign">autosign</a> (<em>ca</em>)

Whether to enable autosign.  Valid values are true (which autosigns any key request, and is a very bad idea), false (which never autosigns any key request), and the path to a file, which uses that configuration file to determine which keys to sign.  ``/etc/puppet/autosign.conf``

#### <a name="bucketdir">bucketdir</a> (<em>puppetmasterd</em>)

Where FileBucket files are stored.  ``/var/puppet/bucket``

#### <a name="ca_days">ca_days</a> (<em>ca</em>)

How long a certificate should be valid.  This parameter is deprecated, use ca_ttl instead

#### <a name="ca_md">ca_md</a> (<em>ca</em>)

The type of hash used in certificates.  ``md5``

#### <a name="ca_ttl">ca_ttl</a> (<em>ca</em>)

The default TTL for new certificates; valid values  must be an integer, optionally followed by one of the units  'y' (years of 365 days), 'd' (days), 'h' (hours), or  's' (seconds). The unit defaults to seconds. If this parameter is set, ca_days is ignored. Examples are '3600' (one hour)  and '1825d', which is the same as '5y' (5 years)   ``5y``

#### <a name="cacert">cacert</a> (<em>ca</em>)

The CA certificate.  ``/etc/puppet/ssl/ca/ca_crt.pem``

#### <a name="cacrl">cacrl</a> (<em>ca</em>)

The certificate revocation list (CRL) for the CA. Set this to 'none' if you do not want to use a CRL.  ``/etc/puppet/ssl/ca/ca_crl.pem``

#### <a name="cadir">cadir</a> (<em>ca</em>)

The root directory for the certificate authority.  ``/etc/puppet/ssl/ca``

#### <a name="cakey">cakey</a> (<em>ca</em>)

The CA private key.  ``/etc/puppet/ssl/ca/ca_key.pem``

#### <a name="capass">capass</a> (<em>ca</em>)

Where the CA stores the password for the private key  ``/etc/puppet/ssl/ca/private/ca.pass``

#### <a name="caprivatedir">caprivatedir</a> (<em>ca</em>)

Where the CA stores private certificate information.  ``/etc/puppet/ssl/ca/private``

#### <a name="capub">capub</a> (<em>ca</em>)

The CA public key.  ``/etc/puppet/ssl/ca/ca_pub.pem``

#### <a name="casesensitive">casesensitive</a> (<em>puppet</em>)

Whether matching in case statements and selectors should be case-sensitive.  Case insensitivity is handled by downcasing all values before comparison.

#### <a name="cert_inventory">cert_inventory</a> (<em>ca</em>)

A Complete listing of all certificates  ``/etc/puppet/ssl/ca/inventory.txt``

#### <a name="certdir">certdir</a> (<em>certificates</em>)

The certificate directory.  ``/etc/puppet/ssl/certs``

#### <a name="classfile">classfile</a> (<em>puppetd</em>)

The file in which puppetd stores a list of the classes associated with the retrieved configuratiion.  Can be loaded in the separate ``puppet`` executable using the ``--loadclasses`` option.  ``/etc/puppet/classes.txt``

#### <a name="clientbucketdir">clientbucketdir</a> (<em>filebucket</em>)

Where FileBucket files are stored locally.  ``/var/puppet/clientbucket``

#### <a name="color">color</a> (<em>puppet</em>)

Whether to use colors when logging to the console. Valid values are ``ansi`` (equivalent to ``true``), ``html`` (mostly used during testing with TextMate), and ``false``, which produces no color.  ``ansi``

#### <a name="confdir">confdir</a> (<em>puppet</em>)

The main Puppet configuration directory.  ``/etc/puppet``

#### <a name="config">config</a> (<em>puppetdoc</em>)

The configuration file for puppetdoc.  ``/etc/puppet/puppetdoc.conf``

#### <a name="configprint">configprint</a> (<em>puppet</em>)

Print the value of a specific configuration parameter.  If a parameter is provided for this, then the value is printed and puppet exits.  Comma-separate multiple values.  For a list of all values, specify 'all'.  This feature is only available in Puppet versions higher than 0.18.4.

#### <a name="configtimeout">configtimeout</a> (<em>puppetd</em>)

How long the client should wait for the configuration to be retrieved before considering it a failure.  This can help reduce flapping if too many clients contact the server at one time.  ``30``

#### <a name="csrdir">csrdir</a> (<em>ca</em>)

Where the CA stores certificate requests  ``/etc/puppet/ssl/ca/requests``

#### <a name="dbadapter">dbadapter</a> (<em>puppetmaster</em>)

The type of database to use.  ``sqlite3``

#### <a name="dblocation">dblocation</a> (<em>puppetmaster</em>)

The database cache for client configurations.  Used for querying within the language.  ``/var/puppet/state/clientconfigs.sqlite3``

#### <a name="dbmigrate">dbmigrate</a> (<em>puppetmaster</em>)

Whether to automatically migrate the database.

#### <a name="dbname">dbname</a> (<em>puppetmaster</em>)

The name of the database to use.  ``puppet``

#### <a name="dbpassword">dbpassword</a> (<em>puppetmaster</em>)

The database password for Client caching. Only used when networked databases are used.  ``puppet``

#### <a name="dbserver">dbserver</a> (<em>puppetmaster</em>)

The database server for Client caching. Only used when networked databases are used.  ``localhost``

#### <a name="dbuser">dbuser</a> (<em>puppetmaster</em>)

The database user for Client caching. Only used when networked databases are used.  ``puppet``

#### <a name="downcasefacts">downcasefacts</a> (<em>puppetd</em>)

Whether facts should be made all lowercase when sent to the server.

#### <a name="evaltrace">evaltrace</a> (<em>transaction</em>)

Whether each resource should log when it is being evaluated.  This allows you to interactively see exactly what is being done.

#### <a name="external_nodes">external_nodes</a> (<em>puppet</em>)

An external command that can produce node information.  The first line of output must be either the parent node or blank, and if there is a second line of output it should be a list of whitespace-separated classes to include on that node.  This command makes it straightforward to store your node mapping information in other data sources like databases. For unknown nodes, the commands should exit with an exit code of 1.  ``none``

#### <a name="factdest">factdest</a> (<em>puppet</em>)

Where Puppet should store facts that it pulls down from the central server.  ``/var/puppet/facts``

#### <a name="factpath">factpath</a> (<em>puppet</em>)

Where Puppet should look for facts.  Multiple directories should be colon-separated, like normal PATH variables.  ``/var/puppet/facts``

#### <a name="factsignore">factsignore</a> (<em>puppet</em>)

What files to ignore when pulling down facts.  ``.svn CVS``

#### <a name="factsource">factsource</a> (<em>puppet</em>)

From where to retrieve facts.  The standard Puppet ``file`` type is used for retrieval, so anything that is a valid file source can be used here.  ``puppet://puppet/facts``

#### <a name="factsync">factsync</a> (<em>puppet</em>)

Whether facts should be synced with the central server.

#### <a name="fileserverconfig">fileserverconfig</a> (<em>fileserver</em>)

Where the fileserver configuration is stored.  ``/etc/puppet/fileserver.conf``

#### <a name="filetimeout">filetimeout</a> (<em>puppet</em>)

The minimum time to wait between checking for updates in configuration files.  ``15``

#### <a name="genconfig">genconfig</a> (<em>puppet</em>)

Whether to just print a configuration to stdout and exit.  Only makes sense when used interactively.  Takes into account arguments specified on the CLI.

#### <a name="genmanifest">genmanifest</a> (<em>puppet</em>)

Whether to just print a manifest to stdout and exit.  Only makes sense when used interactively.  Takes into account arguments specified on the CLI.

#### <a name="graph">graph</a> (<em>puppet</em>)

Whether to create dot graph files for the different configuration graphs.  These dot files can be interpreted by tools like OmniGraffle or dot (which is part of ImageMagick).

#### <a name="graphdir">graphdir</a> (<em>puppet</em>)

Where to store dot-outputted graphs.  ``/var/puppet/state/graphs``

#### <a name="group">group</a> (<em>puppetmasterd</em>)

The group puppetmasterd should run as.  ``puppet``

#### <a name="hostcert">hostcert</a> (<em>certificates</em>)

Where individual hosts store and look for their certificates.  ``/etc/puppet/ssl/certs/culain.madstop.com.pem``

#### <a name="hostprivkey">hostprivkey</a> (<em>certificates</em>)

Where individual hosts store and look for their private key.  ``/etc/puppet/ssl/private_keys/culain.madstop.com.pem``

#### <a name="hostpubkey">hostpubkey</a> (<em>certificates</em>)

Where individual hosts store and look for their public key.  ``/etc/puppet/ssl/public_keys/culain.madstop.com.pem``

#### <a name="httplog">httplog</a> (<em>puppetd</em>)

Where the puppetd web server logs.  ``/var/puppet/log/http.log``

#### <a name="ignoreschedules">ignoreschedules</a> (<em>puppetd</em>)

Boolean; whether puppetd should ignore schedules.  This is useful for initial puppetd runs.

#### <a name="keylength">keylength</a> (<em>ca</em>)

The bit length of keys.  ``1024``

#### <a name="ldapattrs">ldapattrs</a> (<em>ldap</em>)

The LDAP attributes to use to define Puppet classes.  Values should be comma-separated.  ``puppetclass``

#### <a name="ldapbase">ldapbase</a> (<em>ldap</em>)

The search base for LDAP searches.  It's impossible to provide a meaningful default here, although the LDAP libraries might have one already set.  Generally, it should be the 'ou=Hosts' branch under your main directory.

#### <a name="ldapnodes">ldapnodes</a> (<em>ldap</em>)

Whether to search for node configurations in LDAP.

#### <a name="ldapparentattr">ldapparentattr</a> (<em>ldap</em>)

The attribute to use to define the parent node.  ``parentnode``

#### <a name="ldappassword">ldappassword</a> (<em>ldap</em>)

The password to use to connect to LDAP.

#### <a name="ldapport">ldapport</a> (<em>ldap</em>)

The LDAP port.  Only used if ``ldapnodes`` is enabled.  ``389``

#### <a name="ldapserver">ldapserver</a> (<em>ldap</em>)

The LDAP server.  Only used if ``ldapnodes`` is enabled.  ``ldap``

#### <a name="ldapssl">ldapssl</a> (<em>ldap</em>)

Whether SSL should be used when searching for nodes. Defaults to false because SSL usually requires certificates to be set up on the client side.

#### <a name="ldapstring">ldapstring</a> (<em>ldap</em>)

The search string used to find an LDAP node.  ``(&(objectclass=puppetClient)(cn=%s))``

#### <a name="ldaptls">ldaptls</a> (<em>ldap</em>)

Whether TLS should be used when searching for nodes. Defaults to false because TLS usually requires certificates to be set up on the client side.

#### <a name="ldapuser">ldapuser</a> (<em>ldap</em>)

The user to use to connect to LDAP.  Must be specified as a full DN.

#### <a name="lexical">lexical</a> (<em>puppet</em>)

Whether to use lexical scoping (vs. dynamic).

#### <a name="listen">listen</a> (<em>puppetd</em>)

Whether puppetd should listen for connections.  If this is true, then by default only the ``runner`` server is started, which allows remote authorized and authenticated nodes to connect and trigger ``puppetd`` runs.

#### <a name="localcacert">localcacert</a> (<em>certificates</em>)

Where each client stores the CA certificate.  ``/etc/puppet/ssl/certs/ca.pem``

#### <a name="localconfig">localconfig</a> (<em>puppetd</em>)

Where puppetd caches the local configuration.  An extension indicating the cache format is added automatically.  ``/etc/puppet/localconfig``

#### <a name="logdir">logdir</a> (<em>puppet</em>)

The Puppet log directory.  ``/var/puppet/log``

#### <a name="manifest">manifest</a> (<em>puppetmasterd</em>)

The entry-point manifest for puppetmasterd.  ``/etc/puppet/manifests/site.pp``

#### <a name="manifestdir">manifestdir</a> (<em>puppetmasterd</em>)

Where puppetmasterd looks for its manifests.  ``/etc/puppet/manifests``

#### <a name="masterhttplog">masterhttplog</a> (<em>puppetmasterd</em>)

Where the puppetmasterd web server logs.  ``/var/puppet/log/masterhttp.log``

#### <a name="masterlog">masterlog</a> (<em>puppetmasterd</em>)

Where puppetmasterd logs.  This is generally not used, since syslog is the default log destination.  ``/var/puppet/log/puppetmaster.log``

#### <a name="masterport">masterport</a> (<em>puppetmasterd</em>)

Which port puppetmasterd listens on.  ``8140``

#### <a name="mkusers">mkusers</a> (<em>puppet</em>)

Whether to create the necessary user and group that puppetd will run as.

#### <a name="node_name">node_name</a> (<em>puppetmasterd</em>)

How the puppetmaster determines the client's identity  and sets the 'hostname' fact for use in the manifest, in particular  for determining which 'node' statement applies to the client.  Possible values are 'cert' (use the subject's CN in the client's  certificate) and 'facter' (use the hostname that the client  reported in its facts)  ``cert``

#### <a name="noop">noop</a> (<em>puppetd</em>)

Whether puppetd should be run in noop mode.

#### <a name="paramcheck">paramcheck</a> (<em>ast</em>)

Whether to validate parameters during parsing.  ``true``

#### <a name="parseonly">parseonly</a> (<em>puppetmasterd</em>)

Just check the syntax of the manifests.

#### <a name="passfile">passfile</a> (<em>certificates</em>)

Where puppetd stores the password for its private key. Generally unused.  ``/etc/puppet/ssl/private/password``

#### <a name="path">path</a> (<em>puppet</em>)

The shell search path.  Defaults to whatever is inherited from the parent process.  ``none``

#### <a name="plugindest">plugindest</a> (<em>puppet</em>)

Where Puppet should store plugins that it pulls down from the central server.  ``/var/puppet/plugins``

#### <a name="pluginpath">pluginpath</a> (<em>puppet</em>)

Where Puppet should look for plugins.  Multiple directories should be colon-separated, like normal PATH variables.  ``/var/puppet/plugins``

#### <a name="pluginsignore">pluginsignore</a> (<em>puppet</em>)

What files to ignore when pulling down plugins.  ``.svn CVS``

#### <a name="pluginsource">pluginsource</a> (<em>puppet</em>)

From where to retrieve plugins.  The standard Puppet ``file`` type is used for retrieval, so anything that is a valid file source can be used here.  ``puppet://puppet/plugins``

#### <a name="pluginsync">pluginsync</a> (<em>puppet</em>)

Whether plugins should be synced with the central server.

#### <a name="privatedir">privatedir</a> (<em>certificates</em>)

Where the client stores private certificate information.  ``/etc/puppet/ssl/private``

#### <a name="privatekeydir">privatekeydir</a> (<em>certificates</em>)

The private key directory.  ``/etc/puppet/ssl/private_keys``

#### <a name="publickeydir">publickeydir</a> (<em>certificates</em>)

The public key directory.  ``/etc/puppet/ssl/public_keys``

#### <a name="puppetdlockfile">puppetdlockfile</a> (<em>puppetd</em>)

A lock file to temporarily stop puppetd from doing anything.  ``/var/puppet/state/puppetdlock``

#### <a name="puppetdlog">puppetdlog</a> (<em>puppetd</em>)

The log file for puppetd.  This is generally not used.  ``/var/puppet/log/puppetd.log``

#### <a name="puppetport">puppetport</a> (<em>puppetd</em>)

Which port puppetd listens on.  ``8139``

#### <a name="railslog">railslog</a> (<em>puppetmaster</em>)

Where Rails-specific logs are sent  ``/var/puppet/log/rails.log``

#### <a name="report">report</a> (<em>puppetd</em>)

Whether to send reports after every transaction.

#### <a name="reportdir">reportdir</a> (<em>reporting</em>)

The directory in which to store reports received from the client.  Each client gets a separate subdirectory.  ``/var/puppet/reports``

#### <a name="reports">reports</a> (<em>reporting</em>)

The list of reports to generate.  All reports are looked for in puppet/reports/<name>.rb, and multiple report names should be comma-separated (whitespace is okay).  ``store``

#### <a name="reportserver">reportserver</a> (<em>puppetd</em>)

The server to which to send transaction reports.  ``puppet``

#### <a name="req_bits">req_bits</a> (<em>ca</em>)

The bit length of the certificates.  ``2048``

#### <a name="rrddir">rrddir</a> (<em>metrics</em>)

The directory where RRD database files are stored. Directories for each reporting host will be created under this directory.  ``/var/puppet/rrd``

#### <a name="rrdgraph">rrdgraph</a> (<em>metrics</em>)

Whether RRD information should be graphed.

#### <a name="rrdinterval">rrdinterval</a> (<em>metrics</em>)

How often RRD should expect data. This should match how often the hosts report back to the server.  ``1800``

#### <a name="rundir">rundir</a> (<em>puppet</em>)

Where Puppet PID files are kept.  ``/var/run/puppet``

#### <a name="runinterval">runinterval</a> (<em>puppetd</em>)

How often puppetd applies the client configuration; in seconds  ``1800``

#### <a name="serial">serial</a> (<em>ca</em>)

Where the serial number for certificates is stored.  ``/etc/puppet/ssl/ca/serial``

#### <a name="server">server</a> (<em>puppetd</em>)

The server to which server puppetd should connect  ``puppet``

#### <a name="setpidfile">setpidfile</a> (<em>puppet</em>)

Whether to store a PID file for the daemon.  ``true``

#### <a name="signeddir">signeddir</a> (<em>ca</em>)

Where the CA stores signed certificates.  ``/etc/puppet/ssl/ca/signed``

#### <a name="ssldir">ssldir</a> (<em>puppet</em>)

Where SSL certificates are kept.  ``/etc/puppet/ssl``

#### <a name="statedir">statedir</a> (<em>puppet</em>)

The directory where Puppet state is stored.  Generally, this directory can be removed without causing harm (although it might result in spurious service restarts).  ``/var/puppet/state``

#### <a name="statefile">statefile</a> (<em>puppet</em>)

Where puppetd and puppetmasterd store state associated with the running configuration.  In the case of puppetmasterd, this file reflects the state discovered through interacting with clients.  ``/var/puppet/state/state.yaml``

#### <a name="storeconfigs">storeconfigs</a> (<em>puppetmaster</em>)

Whether to store each client's configuration.  This requires ActiveRecord from Ruby on Rails.

#### <a name="syslogfacility">syslogfacility</a> (<em>puppet</em>)

What syslog facility to use when logging to syslog.  Syslog has a fixed list of valid facilities, and you must choose one of those; you cannot just make one up.  ``daemon``

#### <a name="tags">tags</a> (<em>transaction</em>)

Tags to use to find resources.  If this is set, then only resources tagged with the specified tags will be applied. Values must be comma-separated.

#### <a name="templatedir">templatedir</a> (<em>puppet</em>)

Where Puppet looks for template files.  ``/var/puppet/templates``

#### <a name="trace">trace</a> (<em>puppet</em>)

Whether to print stack traces on some errors

#### <a name="typecheck">typecheck</a> (<em>ast</em>)

Whether to validate types during parsing.  ``true``

#### <a name="usecacheonfailure">usecacheonfailure</a> (<em>puppetd</em>)

Whether to use the cached configuration when the remote configuration will not compile.  This option is useful for testing new configurations, where you want to fix the broken configuration rather than reverting to a known-good one.  ``true``

#### <a name="user">user</a> (<em>puppetmasterd</em>)

The user puppetmasterd should run as.  ``puppet``

#### <a name="vardir">vardir</a> (<em>puppet</em>)

Where Puppet stores dynamic and growing data.  ``/var/puppet``



----------------


*This page autogenerated on Fri Jan 26 16:40:43 CST 2007*
