---
inMenu: true
orderInfo: 10
---
Puppet supports templating via
[ERB](http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/), which is part of the
Ruby standard library and is used for many other projects including Ruby on
Rails.  Templates are evaluated via a simple function:

    $value = template("mytemplate.erb")

You can specify the full path to your template, or you can put all your
templates in Puppet's ``templatedir``, which usually defaults to
``/var/puppet/templates`` (you can find out what it is on your system by
running ``puppet --configprint templatedir``). 

Templates are always evaluated by the parser, not by the client.  This means
that if you are using ``puppetmasterd``, then the templates only need to be on
the server, and you never need to download them to the client.  There's
no difference to the client between using a template and specifying
all of the text as a string.

Templating is pretty simple:  You can reference any variables within your
template that are defined within the enclosing scope.  This is especially
useful for generating complete files; here is how I generate the Apache
configuration for my [Trac](http://trac.edgewall.org/) sites:

<pre><code>
    define tracsite($cgidir, $tracdir) {
        file { "trac-$name":
            path =&gt; "/etc/apache2/trac/$name.conf",
            owner =&gt; root,
            group =&gt; root,
            mode =&gt; 644,
            require =&gt; file[apacheconf],
            content =&gt; template("tracsite.erb"),
            notify =&gt; service[apache2]
        }

        symlink { "tracsym-$name":
            path =&gt; "$cgidir/$name.cgi",
            ensure =&gt; "/usr/share/trac/cgi-bin/trac.cgi"
        }
    }
</code></pre>

And then here's my template:

<pre><code>
    &lt;Location "/cgi-bin/<%= name %&gt;.cgi"&gt;
        SetEnv TRAC_ENV "/export/svn/trac/<%= name %&gt;"
    &lt;/Location&gt; 
            
    # You need something like this to authenticate users
    &lt;Location "/cgi-bin/<%= name %&gt;.cgi/login"&gt;
        AuthType Basic 
        AuthName "Trac" 
        AuthUserFile /etc/apache2/auth/svn
        Require valid-user
    &lt;/Location&gt;
</code></pre>

You can see that I put each Trac configuration into a separate file, and then
I just tell Apache to load all of these files:

    Include /etc/apache2/trac/[^.#]*

The above template is quite simple, in that it only uses the Puppet-defined
``name`` variable, but it provides a clean separation between the format of
the configuration file and how I generate it.

## Iteration

Puppet's templates also support iteration.  If the variable you are accessing
is an array, you can iterate over it.  Given Puppet code like this:

    $values = [val1, val2, otherval]

You could have a template like this:

<pre><code>
    &lt;% values.each do |val| %&gt; Some stuff with <%= val %&gt; <% end%&gt;
</code></pre>

This would produce:

    Some stuff with val1
    Some stuff with val2
    Some stuff with otherval

Note that ERB template lines that just have code on them get translated into
blank lines, so if you were to split the above code into three lines, you
would get two blank lines between each line of output.

Internally, Puppet's values get translated to real Ruby values, including
``true`` and ``false``, so you can be pretty confident that variables will
behave as you might expect.

*$Id$*
