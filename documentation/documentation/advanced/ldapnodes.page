---
inMenu: true
title: Storing Configs in LDAP
orderInfo: 50
---
# Storing Configs in LDAP

By default, ``puppetmasterd`` looks for nodes in its normal manifests, but you
can instead have it look in LDAP.  This works especially well if you are
already storing your host/IP information in LDAP.

I've only used [OpenLDAP](http://www.openldap.org/) to do this, but it should
work just as well with
[Fedora Directory Server](http://directory.fedora.redhat.com/wiki/Features) or
[Sun's Directory Server](http://www.sun.com/software/products/directory_srvr/home_directory.xml),
although you'll have to translate the schema to work with them.

This guide will go through what it takes to modify an existing OpenLDAP setup;
please check 
[their documentation](http://www.openldap.org/doc/admin/quickstart.html)
to get to that point.

## Modifying your LDAP Schema

You first have to provide the Puppet schema to your LDAP server.  You can find
the Puppet schema
[in subversion](https://reductivelabs.com/cgi-bin/puppet.cgi/browser/trunk/ext/ldap/puppet.schema).
Stick this schema in your schema directory (I'm writing this guide on Debian,
so I'll be using their paths for examples; modify according to your site),
which will be something like ``/etc/ldap/schema``; I recommend keeping the
``puppet.schema`` name.

With the schema file in place, modify your ``slapd.conf`` to load this schema;
just add it to the list of schema files loaded:

    include         /etc/ldap/schema/core.schema
    include         /etc/ldap/schema/cosine.schema
    include         /etc/ldap/schema/nis.schema
    include         /etc/ldap/schema/inetorgperson.schema
    include         /etc/ldap/schema/puppet.schema
    ...

Restart your server, making sure it comes back up, and you're all set.

## Loading Nodes Into LDAP

In my opinion, the LDAP tool space is still depressingly spare.  I generally
use my own [ldapsh](/projects/ldapsh/) tool to manage LDAP, but that does not
work well for data loading.  However you decide to load the data, you need to
create host entries (usually ``device`` entries, probably with ``ipHost`` as
an auxiliary class) and then add the Puppet data.  This is what my workstation
definition looks like in LDAP:

    dn: cn=culain,ou=Hosts,dc=madstop,dc=com
    objectClass: device
    objectClass: ipHost
    objectClass: puppetClient
    objectClass: top
    objectClass: enHost
    cn: culain
    ipHostNumber: 192.168.0.3
    hardwareModel: i686
    puppetclass: webserver
    puppetclass: puppetserver
    puppetclass: mailserver
    parentnode: basenode

The DN I'm using for my host follows the model that I recommend for all LDAP
repositories.  This will work well if you decide to start using LDAP as an
nsswitch source.  It doesn't really matter to Puppet, though; it just does a
query against the search base you specify, it doesn't try to guess your DN.

## Configuring Puppet to use LDAP

Once you have your data in LDAP, you just need to configure Puppet to look
there.  It's pretty much always ``puppetmasterd`` that will be looking in LDAP
(unless you're using ``puppet`` and setting ``--use-nodes``), so you need to
modify (or create) your ``puppetmasterd.conf`` file.  There are only two
required settings: ``ldapnodes`` to indicate you want to look for nodes in
LDAP and ``ldapbase`` for where to search for LDAP nodes.  You'll probably
also want to specify ``ldapserver``, since the default is ``ldap``, which
likely won't work for most people.  This is what the relevant portion of my
``puppetmasterd.conf`` file looks like:

    [ldap]
    ldapnodes = true
    ldapserver = culain.madstop.com
    ldapbase = dc=madstop,dc=com

In other words, enable searching for nodes in LDAP by setting ``ldapnodes``
to true, and then provide the information necessary to make it work.  It's a
good idea to actually specify the Hosts tree as your search base (e.g.,
``ldapbase = ou=Hosts,dc=madstop,dc=com``), but my database is small enough
that it doesn't matter.

You'll need to restart the daemon (I'm working on automatically reloading
config files, but I'm not there yet), but then you should have LDAP node
lookup working.  You'll be able to keep all of your node definitions in LDAP
and your class definitions in your manifests.

## Default Nodes

Note that Puppet also supports default node definitions, named (imaginatively)
``default``.  You can use this to provide a minimal configuration for new
nodes until you get around to configuring each node.  Without a default node
configuration, unconfigured nodes will fail.

*$Id$
