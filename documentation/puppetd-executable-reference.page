---
inMenu: true
title: Executable Reference
---
# Puppet Executable Reference

Every Puppet executable (with the exception of ``puppetdoc``) accepts all of
these arguments, but not all of the arguments make sense for every executable.
Each argument has a section listed with it in parentheses; often, that section
will map to an executable (e.g., ``puppetd``), in which case it probably only
makes sense for that one executable.  If ``puppet`` is listed as the section,
it is most likely an option that is valid for everyone.

This will not always be the case.  I have tried to be as thorough as possible
in the descriptions of the arguments, so it should be obvious whether an
argument is approprite or not.

Any default values are in ``block type`` at the end of the description.

#### authconfig (<em>puppet</em>)

The configuration file that defines the rights to the different namespaces and methods.  This can be used as a coarse-grained authorization system for both ``puppetd`` and ``puppetmasterd``.  ``/etc/puppet/namespaceauth.conf``

#### autosign (<em>ca</em>)

Whether to enable autosign.  Valid values are true (which autosigns any key request, and is a very bad idea), false (which never autosigns any key request), and the path to a file, which uses that configuration file to determine which keys to sign.  ``/etc/puppet/autosign.conf``

#### bucketdir (<em>filebucket</em>)

Where FileBucket files are stored.  ``/var/puppet/bucket``

#### ca_days (<em>ca</em>)

How long a certificate should be valid.  ``1825``

#### ca_md (<em>ca</em>)

The type of hash used in certificates.  ``md5``

#### cacert (<em>ca</em>)

The CA certificate.  ``/etc/puppet/ssl/ca/ca_crt.pem``

#### cadir (<em>ca</em>)

The root directory for the certificate authority.  ``/etc/puppet/ssl/ca``

#### cakey (<em>ca</em>)

The CA private key.  ``/etc/puppet/ssl/ca/ca_key.pem``

#### capass (<em>ca</em>)

Where the CA stores the password for the private key  ``/etc/puppet/ssl/ca/private/ca.pass``

#### caprivatedir (<em>ca</em>)

Where the CA stores private certificate information.  ``/etc/puppet/ssl/ca/private``

#### capub (<em>ca</em>)

The CA public key.  ``/etc/puppet/ssl/ca/ca_pub.pem``

#### certdir (<em>certificates</em>)

The certificate directory.  ``/etc/puppet/ssl/certs``

#### classfile (<em>puppetd</em>)

The file in which puppetd stores a list of the classes associated with the retrieved configuratiion.  Can be loaded in the separate ``puppet`` executable using the ``--loadclasses`` option.  ``/etc/puppet/classes.txt``

#### color (<em>puppet</em>)

Whether to use ANSI colors when logging to the console.  ``true``

#### confdir (<em>puppet</em>)

The main Puppet configuration directory.  ``/etc/puppet``

#### config (<em>puppetdoc</em>)

The configuration file for puppetdoc.  ``/etc/puppet/puppetdoc.conf``

#### csrdir (<em>ca</em>)

Where the CA stores certificate requests  ``/etc/puppet/ssl/ca/requests``

#### dbadapter (<em>puppetmaster</em>)

The type of database to use.  ``sqlite3``

#### dblocation (<em>puppetmaster</em>)

The database cache for client configurations.  Used for querying within the language.  ``/var/puppet/state/clientconfigs.sqlite3``

#### dbname (<em>puppetmaster</em>)

The name of the database to use.  ``puppet``

#### dbpassword (<em>puppetmaster</em>)

The database password for Client caching. Only used when networked databases are used.  ``puppet``

#### dbserver (<em>puppetmaster</em>)

The database server for Client caching. Only used when networked databases are used.  ``puppet``

#### dbuser (<em>puppetmaster</em>)

The database user for Client caching. Only used when networked databases are used.  ``puppet``

#### fileserverconfig (<em>fileserver</em>)

Where the fileserver configuration is stored.  ``/etc/puppet/fileserver.conf``

#### genconfig (<em>puppet</em>)

Whether to just print a configuration to stdout and exit.  Only makes sense when used interactively.  Takes into account arguments specified on the CLI.

#### genmanifest (<em>puppet</em>)

Whether to just print a manifest to stdout and exit.  Only makes sense when used interactively.  Takes into account arguments specified on the CLI.

#### group (<em>puppetmasterd</em>)

The group puppetmasterd should run as.  ``puppet``

#### httplog (<em>puppetd</em>)

Where the puppetd web server logs.  ``/var/puppet/log/http.log``

#### ignoreschedules (<em>puppetd</em>)

Boolean; whether puppetd should ignore schedules.  This is useful for initial puppetd runs.

#### keylength (<em>ca</em>)

The bit length of keys.  ``1024``

#### ldapattrs (<em>ldap</em>)

The LDAP attributes to use to define Puppet classes.  Values should be comma-separated.  ``puppetclass``

#### ldapbase (<em>ldap</em>)

The search base for LDAP searches.  It's impossible to provide a meaningful default here, although the LDAP libraries might have one already set.  Generally, it should be the 'ou=Hosts' branch under your main directory.

#### ldapnodes (<em>ldap</em>)

Whether to search for node configurations in LDAP.

#### ldapparentattr (<em>ldap</em>)

The attribute to use to define the parent node.  ``parentnode``

#### ldappassword (<em>ldap</em>)

The password to use to connect to LDAP.

#### ldapport (<em>ldap</em>)

The LDAP port.  Only used if ``ldapnodes`` is enabled.  ``389``

#### ldapserver (<em>ldap</em>)

The LDAP server.  Only used if ``ldapnodes`` is enabled.  ``ldap``

#### ldapssl (<em>ldap</em>)

Whether SSL should be used when searching for nodes. Defaults to false because SSL usually requires certificates to be set up on the client side.

#### ldapstring (<em>ldap</em>)

The search string used to find an LDAP node.  ``(&(objectclass=puppetClient)(cn=%s))``

#### ldaptls (<em>ldap</em>)

Whether TLS should be used when searching for nodes. Defaults to false because TLS usually requires certificates to be set up on the client side.

#### ldapuser (<em>ldap</em>)

The user to use to connect to LDAP.  Must be specified as a full DN.

#### lexical (<em>puppet</em>)

Whether to use lexical scoping (vs. dynamic).

#### listen (<em>puppetd</em>)

Whether puppetd should listen for connections.  If this is true, then by default only the ``runner`` server is started, which allows remote authorized and authenticated nodes to connect and trigger ``puppetd`` runs.

#### localconfig (<em>puppetd</em>)

Where puppetd caches the local configuration.  An extension indicating the cache format is added automatically.  ``/etc/puppet/localconfig``

#### lockdir (<em>puppet</em>)

Where lock files are kept.  ``/var/puppet/locks``

#### logdir (<em>puppet</em>)

The Puppet log directory.  ``/var/puppet/log``

#### manifest (<em>puppetmasterd</em>)

The entry-point manifest for puppetmasterd.  ``/etc/puppet/manifests/site.pp``

#### manifestdir (<em>puppetmasterd</em>)

Where puppetmasterd looks for its manifests.  ``/etc/puppet/manifests``

#### masterhttplog (<em>puppetmasterd</em>)

Where the puppetmasterd web server logs.  ``/var/puppet/log/masterhttp.log``

#### masterlog (<em>puppetmasterd</em>)

Where puppetmasterd logs.  This is generally not used, since syslog is the default log destination.  ``/var/puppet/log/puppetmaster.log``

#### masterport (<em>puppetmasterd</em>)

Which port puppetmasterd listens on.  ``8140``

#### mkusers (<em>puppet</em>)

Whether to create the necessary user and group that puppetd will run as.

#### noop (<em>puppetd</em>)

Whether puppetd should be run in noop mode.

#### paramcheck (<em>ast</em>)

Whether to validate parameters during parsing.  ``true``

#### parseonly (<em>puppetmasterd</em>)

Just check the syntax of the manifests.

#### passfile (<em>certificates</em>)

Where puppetd stores the password for its private key. Generally unused.  ``/etc/puppet/ssl/private/password``

#### plugindest (<em>puppet</em>)

Where Puppet should store plugins that it pulls down from the central server.  ``/var/puppet/plugins``

#### pluginpath (<em>puppet</em>)

Where Puppet should look for plugins.  Multiple directories should be colon-separated, like normal PATH variables.  ``/var/puppet/plugins``

#### pluginsignore (<em>puppet</em>)

What files to ignore when pulling down plugins..  ``.svn CVS``

#### pluginsource (<em>puppet</em>)

From where to retrieve plugins.  The standard Puppet ``file`` type is used for retrieval, so anything that is a valid file source can be used here.  ``puppet://puppet/plugins``

#### pluginsync (<em>puppet</em>)

Whether plugins should be synced with the central server.

#### privatedir (<em>certificates</em>)

Where the client stores private certificate information.  ``/etc/puppet/ssl/private``

#### privatekeydir (<em>certificates</em>)

The private key directory.  ``/etc/puppet/ssl/private_keys``

#### publickeydir (<em>certificates</em>)

The public key directory.  ``/etc/puppet/ssl/public_keys``

#### puppetdlockfile (<em>puppetd</em>)

A lock file to temporarily stop puppetd from doing anything.  ``/var/puppet/state/puppetdlock``

#### puppetdlog (<em>puppetd</em>)

The log file for puppetd.  This is generally not used.  ``/var/puppet/log/puppetd.log``

#### puppetport (<em>puppetd</em>)

Which port puppetd listens on.  ``8139``

#### railslog (<em>puppetmaster</em>)

Where Rails-specific logs are sent  ``/var/puppet/log/puppetrails.log``

#### report (<em>puppetd</em>)

Whether to send reports after every transaction.

#### reportdirectory (<em>reporting</em>)

The directory in which to store reports received from the client.  Each client gets a separate subdirectory.  ``/var/puppet/reports``

#### reports (<em>reporting</em>)

The list of reports to generate.  All reports are looked for in puppet/reports/<name>.rb, and multiple report names should be comma-separated (whitespace is okay).  ``none``

#### reportserver (<em>puppetd</em>)

The server to which to send transaction reports.  ``puppet``

#### req_bits (<em>ca</em>)

The bit length of the certificates.  ``2048``

#### rrddir (<em>metrics</em>)

The directory where RRD database files are stored.  ``/var/puppet/rrd``

#### rrdgraph (<em>metrics</em>)

Whether RRD information should be graphed.

#### rundir (<em>puppet</em>)

Where Puppet PID files are kept.  ``/var/puppet/run``

#### runinterval (<em>puppetd</em>)

How often puppetd applies the client configuration; in seconds  ``1800``

#### serial (<em>ca</em>)

Where the serial number for certificates is stored.  ``/etc/puppet/ssl/ca/serial``

#### server (<em>puppetd</em>)

The server to which server puppetd should connect  ``puppet``

#### setpidfile (<em>puppet</em>)

Whether to store a PID file for the daemon.  ``true``

#### signeddir (<em>ca</em>)

Where the CA stores signed certificates.  ``/etc/puppet/ssl/ca/signed``

#### ssldir (<em>puppet</em>)

Where SSL certificates are kept.  ``/etc/puppet/ssl``

#### statedir (<em>puppet</em>)

The directory where Puppet state is stored.  Generally, this directory can be removed without causing harm (although it might result in spurious service restarts).  ``/var/puppet/state``

#### statefile (<em>puppet</em>)

Where puppetd and puppetmasterd store state associated with the running configuration.  In the case of puppetmasterd, this file reflects the state discovered through interacting with clients.  ``/var/puppet/state/state.yaml``

#### storeconfigs (<em>puppetmaster</em>)

Whether to store each client's configuration.  This requires ActiveRecord from Ruby on Rails.

#### tags (<em>transaction</em>)

Tags to use to find objects.  If this is set, then only objects tagged with the specified tags will be applied. Values must be comma-separated.

#### templatedir (<em>puppet</em>)

Where Puppet looks for template files.  ``/var/puppet/templates``

#### typecheck (<em>ast</em>)

Whether to validate types during parsing.  ``true``

#### usecacheonfailure (<em>puppetd</em>)

Whether to use the cached configuration when the remote configuration will not compile.  This option is useful for testing new configurations, where you want to fix the broken configuration rather than reverting to a known-good one.  ``true``

#### user (<em>puppetmasterd</em>)

The user puppetmasterd should run as.  ``puppet``

#### vardir (<em>puppet</em>)

Where Puppet stores dynamic and growing data.  ``/var/puppet``



----------------


*This page autogenerated on Wed Jul 05 23:33:28 CDT 2006*
