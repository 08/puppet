#!/usr/local/bin/ruby -w

# $Id$

require 'blink'
require 'facter'

# collect enough information to make some simple decisions
begin
    facts = Facter.retrieve('OperatingSystem','OperatingSystemRelease','Hostname')
rescue => error
    puts "Could not retrieve facts: %s" % error
    exit(47)
end

# set up how our environment will behave
args = Hash.new

args[:debug] = 1

args[:depthfirst] = 1
args[:opinstances] = 1

Blink.init(args)

# and now build a simple component, consisting of a process
# that depends on a file
component = Blink::Component.new(:name => "sleeper")

# add our testing directory to the search path for services
Blink::Objects::Service.addpath(
    File.expand_path("~/svn/blink/examples/root/etc/init.d")
)

# here's the process itself
sleeper = Blink::Objects::Service.new(
	:running => 1,
	:name => "sleeper"
)

# add it to the component
component.push(sleeper)

#groupselector = Blink::Selector.new(
 #   proc { facts['Hostname'] == 'culain' } => 'luke',
  #  proc { facts['Hostname'] == 'kirby' } => 'sysadmin'
#)

# and the file that our component depends on
configfile = Blink::Objects::BFile.new(
	:path => File.expand_path("~/svn/blink/examples/root/etc/configfile"),
	:owner => "luke",
	:group => "sysadmin",
	:mode => 0644
)
	#:check => "md5"

component.push(configfile)

# i guess i should call subscribe on the object triggering the event,
# not the one responding....
# except that really, the one responding is merely listening to events
# that pass through it...
# XXX okay, i need to decide whether i use generic components and lose
# the actual dependency information, or whether i use literal dependency
# information
configfile.subscribe(
	:event => :inode_changed,
	:object => sleeper
) { |me,object,event|
	puts "#{me} restarting because of #{event} from #{object}"
	me.callop("stop")
	me.callop("start")
}

component.retrieve()

#unless component.insync?
#    component.sync()
#end

puts sleeper.insync?()
sleeper.sync()
sleeper.retrieve()
puts sleeper.insync?()

#other.contains(test)

#Blink.run
