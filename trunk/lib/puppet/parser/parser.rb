#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "grammar.ra".
#

require 'racc/parser'


require 'puppet'
require 'puppet/parsedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'
#require 'puppet/parser/interpreter'

module Puppet
    class ParseError < Puppet::Error; end

    class ImportError < Racc::ParseError; end
end

Puppet[:typecheck] = true
Puppet[:paramcheck] = true


module Puppet

  module Parser

    class Parser < Racc::Parser

module_eval <<'..end grammar.ra modeval..idced991013a', 'grammar.ra', 788
require 'puppet/parser/functions'

attr_reader :file
attr_accessor :files

# Create an AST array out of all of the args
def aryfy(*args)
    if args[0].instance_of?(AST::ASTArray)
        result = args.shift
        args.each { |arg|
            result.push arg
        }
    else
        result = AST::ASTArray.new(
            :children => args
        )
    end

    return result
end

def file=(file)
    unless FileTest.exists?(file)
        unless file =~ /\.pp$/
            file = file + ".pp"
        end
        unless FileTest.exists?(file)
            raise Puppet::Error, "Could not find file %s" % file
        end
    end
    if @files.detect { |f| f.file == file }
        raise Puppet::ImportError.new("Import loop detected")
    else
        @files << Puppet::ParsedFile.new(file)
        @lexer.file = file
    end
end

def initialize
    @lexer = Puppet::Parser::Lexer.new()
    @files = []
    #if Puppet[:debug]
    #    @yydebug = true
    #end
end

def on_error(token,value,stack)
    #on '%s' at '%s' in\n'%s'" % [token,value,stack]
    #error = "line %s: parse error after '%s'" %
    #    [@lexer.line,@lexer.last]
    error = "Syntax error at '%s'" % [value]

    #if Puppet[:debug]
        #puts stack.inspect
        #puts stack.class
    #end
    #if @lexer.file
    #    error += (" in '%s'" % @lexer.file)
    #end

    except = Puppet::ParseError.new(error)
    except.line = @lexer.line
    if @lexer.file
        except.file = @lexer.file
    end

    raise except
end

# how should I do error handling here?
def parse
    begin
        yyparse(@lexer,:scan)
    rescue Racc::ParseError => except
        error = Puppet::ParseError.new(except)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        raise error
    rescue Puppet::ParseError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        raise except
    rescue Puppet::Error => except
        # and this is a framework error
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue Puppet::DevError => except
        except.line ||= @lexer.line
        except.file ||= @lexer.file
        #if Puppet[:debug]
        #    puts except.stack
        #end
        raise except
    rescue => except
        error = Puppet::DevError.new(except.message)
        error.line = @lexer.line
        error.file = @lexer.file
        error.backtrace = except.backtrace
        #if Puppet[:debug]
        #    puts caller
        #end
        raise error
    end
end

def reparse?
    @files.detect { |file|
        file.changed?
    }
end

def string=(string)
    @lexer.string = string
end

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$

..end grammar.ra modeval..idced991013a

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 44, :_reduce_1,
 1, 44, :_reduce_none,
 1, 45, :_reduce_none,
 2, 45, :_reduce_4,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 1, 47, :_reduce_none,
 4, 54, :_reduce_15,
 2, 54, :_reduce_16,
 1, 58, :_reduce_none,
 3, 58, :_reduce_18,
 1, 59, :_reduce_none,
 1, 59, :_reduce_none,
 1, 59, :_reduce_none,
 5, 48, :_reduce_22,
 5, 48, :_reduce_23,
 5, 48, :_reduce_24,
 2, 49, :_reduce_25,
 3, 50, :_reduce_26,
 4, 68, :_reduce_27,
 1, 63, :_reduce_none,
 3, 63, :_reduce_29,
 0, 64, :_reduce_none,
 1, 64, :_reduce_none,
 1, 60, :_reduce_32,
 1, 67, :_reduce_33,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 1, 69, :_reduce_none,
 3, 51, :_reduce_40,
 0, 65, :_reduce_41,
 1, 65, :_reduce_42,
 3, 65, :_reduce_43,
 3, 73, :_reduce_44,
 1, 74, :_reduce_none,
 3, 74, :_reduce_46,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 1, 72, :_reduce_none,
 4, 78, :_reduce_57,
 1, 62, :_reduce_58,
 1, 62, :_reduce_59,
 1, 76, :_reduce_60,
 4, 77, :_reduce_61,
 5, 52, :_reduce_62,
 1, 79, :_reduce_none,
 2, 79, :_reduce_64,
 5, 80, :_reduce_65,
 4, 80, :_reduce_66,
 1, 81, :_reduce_none,
 3, 81, :_reduce_68,
 3, 70, :_reduce_69,
 1, 83, :_reduce_none,
 3, 83, :_reduce_71,
 1, 85, :_reduce_none,
 3, 85, :_reduce_73,
 3, 84, :_reduce_74,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_none,
 1, 82, :_reduce_81,
 2, 53, :_reduce_82,
 6, 55, :_reduce_83,
 5, 55, :_reduce_84,
 6, 56, :_reduce_85,
 5, 56, :_reduce_86,
 6, 57, :_reduce_87,
 5, 57, :_reduce_88,
 1, 88, :_reduce_none,
 3, 88, :_reduce_90,
 1, 89, :_reduce_91,
 1, 89, :_reduce_92,
 1, 89, :_reduce_93,
 0, 46, :_reduce_94,
 1, 86, :_reduce_none,
 3, 86, :_reduce_96,
 3, 86, :_reduce_97,
 1, 90, :_reduce_none,
 3, 90, :_reduce_99,
 3, 91, :_reduce_100,
 1, 91, :_reduce_101,
 1, 87, :_reduce_none,
 2, 87, :_reduce_103,
 1, 61, :_reduce_104,
 3, 71, :_reduce_105,
 2, 71, :_reduce_106,
 1, 75, :_reduce_none,
 1, 75, :_reduce_none,
 0, 66, :_reduce_none,
 1, 66, :_reduce_110 ]

racc_reduce_n = 111

racc_shift_n = 182

racc_action_table = [
    47,    34,    37,   154,    32,    18,    47,    34,    37,    60,
   153,    81,    47,    34,    37,    78,    18,   -76,   -76,    71,
    34,    37,    18,    35,    34,    37,    34,    37,    18,    42,
   100,   130,   -75,    48,    49,    42,    30,    55,    30,    48,
    49,    42,    69,    55,    61,    48,    49,   -78,    42,    55,
    47,    34,    37,    35,    42,   -77,    47,    34,    37,    35,
   131,   109,    47,    34,    37,    83,    18,    35,    29,    60,
    29,    31,    18,    31,   138,    76,   139,   107,    18,    42,
   -78,   159,   -75,    48,    49,    42,   146,    55,    81,    48,
    88,    42,   160,    55,    76,    48,    49,    34,    37,    55,
    47,    34,    37,    34,    37,   111,    47,    34,    37,    84,
   143,    73,    47,    34,    37,   169,    18,   113,   115,   112,
    43,    60,    18,   113,   115,    42,   109,   147,    18,    42,
    35,    42,    82,    48,    49,    42,    35,    55,   150,    48,
    49,    42,   -77,    55,   107,    48,    49,    73,   -79,    55,
    47,    34,    37,    34,    37,   157,   158,   106,   161,   162,
    34,    37,    34,    37,    76,   121,    18,    73,    18,    68,
    67,   -80,   171,    66,   109,    18,    35,    18,    69,    42,
    63,    42,    98,    48,    49,    48,    49,    55,    42,    55,
    42,    32,    48,    49,    48,    49,    55,    26,    55,    34,
    37,    34,    37,   104,   nil,   152,   nil,   nil,    34,    37,
   nil,   nil,   nil,   nil,    18,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,    18,   nil,   nil,   nil,    42,   164,    42,
   nil,    48,    49,    48,    49,    55,    42,    55,   nil,    18,
    48,    49,   nil,   166,    55,   nil,   nil,   nil,   nil,    15,
    17,   nil,    22,    24,    18,     3,   nil,     9,   181,    12,
   nil,    19,   nil,   nil,    15,    17,   nil,    22,    24,    18,
     3,   nil,     9,   167,    12,   nil,    19,   nil,   nil,    15,
    17,   nil,    22,    24,    18,     3,   nil,     9,   176,    12,
   nil,    19,   nil,   nil,    15,    17,   nil,    22,    24,    18,
     3,   nil,     9,   141,    12,   nil,    19,   nil,   nil,    15,
    17,   nil,    22,    24,    18,     3,   nil,     9,   180,    12,
   nil,    19,   nil,   nil,    15,    17,   nil,    22,    24,    18,
     3,   nil,     9,   177,    12,   nil,    19,   nil,   nil,    15,
    17,   nil,    22,    24,    18,     3,   nil,     9,   nil,    12,
   nil,    19,   nil,   nil,    15,    17,   nil,    22,    24,    18,
     3,   nil,     9,   nil,    12,   nil,    19,   nil,   nil,    15,
    17,   nil,    22,    24,    18,     3,   nil,     9,   nil,    12,
   nil,    19,   nil,   nil,    15,    17,   nil,    22,    24,   nil,
     3,   nil,     9,   nil,    12,   nil,    19 ]

racc_action_check = [
    66,    66,    66,   128,    46,    19,   131,   131,   131,    13,
   128,    49,    47,    47,    47,    47,    66,    46,    86,    27,
    43,    43,   131,    19,    15,    15,    81,    81,    47,    66,
    63,    89,    92,    66,    66,   131,     3,    66,    71,   131,
   131,    47,    27,   131,    13,    47,    47,    93,    43,    47,
   114,   114,   114,    43,    81,    94,    60,    60,    60,    81,
    95,    97,    83,    83,    83,    54,   114,   100,     3,    54,
    71,     3,    60,    71,   101,   116,   103,    88,    83,   114,
    57,   134,    54,   114,   114,    60,   116,   114,    88,    60,
    60,    83,   134,    60,    77,    83,    83,    76,    76,    83,
    12,    12,    12,     9,     9,    77,   147,   147,   147,    56,
   108,   109,   162,   162,   162,   149,    12,   149,   149,    80,
     9,    65,   147,    80,    80,    76,    75,   119,   162,    12,
    76,     9,    52,    12,    12,   147,     9,    12,   125,   147,
   147,   162,    58,   147,    73,   162,   162,   130,    45,   162,
   107,   107,   107,    84,    84,   132,   133,    72,   135,   137,
   154,   154,    82,    82,    36,    82,   107,    32,    84,    26,
    24,    59,   153,    22,   155,   154,   159,    82,    67,   107,
    17,    84,    61,   107,   107,    84,    84,   107,   154,    84,
    82,     4,   154,   154,    82,    82,   154,     2,    82,   170,
   170,   126,   126,    69,   nil,   126,   nil,   nil,   121,   121,
   nil,   nil,   nil,   nil,   170,   nil,   126,   nil,   nil,   nil,
   nil,   nil,   nil,   121,   nil,   nil,   nil,   170,   138,   126,
   nil,   170,   170,   126,   126,   170,   121,   126,   nil,   138,
   121,   121,   nil,   139,   121,   nil,   nil,   nil,   nil,   138,
   138,   nil,   138,   138,   139,   138,   nil,   138,   179,   138,
   nil,   138,   nil,   nil,   139,   139,   nil,   139,   139,   179,
   139,   nil,   139,   140,   139,   nil,   139,   nil,   nil,   179,
   179,   nil,   179,   179,   140,   179,   nil,   179,   163,   179,
   nil,   179,   nil,   nil,   140,   140,   nil,   140,   140,   163,
   140,   nil,   140,   106,   140,   nil,   140,   nil,   nil,   163,
   163,   nil,   163,   163,   106,   163,   nil,   163,   171,   163,
   nil,   163,   nil,   nil,   106,   106,   nil,   106,   106,   171,
   106,   nil,   106,   165,   106,   nil,   106,   nil,   nil,   171,
   171,   nil,   171,   171,   165,   171,   nil,   171,   nil,   171,
   nil,   171,   nil,   nil,   165,   165,   nil,   165,   165,     6,
   165,   nil,   165,   nil,   165,   nil,   165,   nil,   nil,     6,
     6,   nil,     6,     6,     0,     6,   nil,     6,   nil,     6,
   nil,     6,   nil,   nil,     0,     0,   nil,     0,     0,   nil,
     0,   nil,     0,   nil,     0,   nil,     0 ]

racc_action_pointer = [
   356,   nil,   197,    32,   185,   nil,   341,   nil,   nil,   100,
   nil,   nil,    98,     3,   nil,    21,   nil,   144,   nil,   -13,
   nil,   nil,   160,   nil,   134,   nil,   169,     9,   nil,   nil,
   nil,   nil,   131,   nil,   nil,   nil,   154,   nil,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   129,    -2,    10,   nil,    -9,
   nil,   nil,   113,   nil,    63,   nil,   103,    61,   123,   152,
    54,   140,   nil,    10,   nil,   115,    -2,   145,   nil,   167,
   nil,    34,   151,   135,   nil,   116,    94,    84,   nil,   nil,
   114,    23,   159,    60,   150,   nil,    -1,   nil,    68,    14,
   nil,   nil,    13,    28,    36,    23,   nil,    51,   nil,   nil,
    31,    68,   nil,    70,   nil,   nil,   296,   148,   103,    75,
   nil,   nil,   nil,   nil,    48,   nil,    65,   nil,   nil,   118,
   nil,   205,   nil,   nil,   nil,   133,   198,   nil,    -7,   nil,
   111,     4,   148,   149,    71,   137,   nil,   146,   221,   236,
   266,   nil,   nil,   nil,   nil,   nil,   nil,   104,   nil,   108,
   nil,   nil,   nil,   166,   157,   164,   nil,   nil,   nil,   140,
   nil,   nil,   110,   281,   nil,   326,   nil,   nil,   nil,   nil,
   196,   311,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   251,
   nil,   nil ]

racc_action_default = [
   -94,   -12,  -111,  -111,  -111,   -13,    -1,   -14,    -2,   -32,
    -3,    -5,  -111,  -111,    -6,  -111,    -7,  -111,   -33,  -111,
    -8,    -9,  -111,   -10,  -111,   -11,  -111,   -94,   -89,   -91,
   -92,   -93,   -41,    -4,   -58,   -32,   -16,   -59,   -17,   -19,
   -20,   -21,  -104,  -111,   -55,   -56,   -49,  -111,   -60,   -32,
   -52,   -51,  -111,   -54,   -48,   -81,  -111,   -53,   -47,   -50,
   -41,  -111,   -82,   -94,   -25,  -111,  -111,   -94,   182,  -111,
  -102,  -111,  -111,  -111,   -42,  -109,  -111,  -111,  -106,   -45,
  -111,  -111,  -111,  -111,  -111,   -79,   -36,   -28,   -32,  -111,
   -37,   -39,   -35,   -38,   -34,   -30,   -80,  -109,   -26,   -95,
   -94,  -111,   -40,  -111,  -103,   -90,  -111,  -111,  -111,  -110,
   -18,   -15,  -105,  -107,  -111,  -108,  -111,   -76,   -75,  -111,
   -78,  -111,   -69,   -77,   -70,  -111,  -111,   -63,  -111,   -67,
   -41,   -31,  -111,  -111,  -111,  -111,   -98,  -101,  -111,  -111,
  -111,   -88,   -44,   -24,   -43,   -46,   -57,  -111,   -72,  -111,
   -61,   -64,   -62,  -111,  -111,  -109,   -29,   -22,   -23,  -111,
   -97,   -96,  -111,  -111,   -84,  -111,   -86,   -87,   -74,   -71,
  -111,  -111,   -68,   -27,   -99,  -100,   -83,   -85,   -73,  -111,
   -66,   -65 ]

racc_goto_table = [
    33,     6,    40,     8,    75,   124,    41,   108,   119,   127,
   129,    36,    62,   114,    50,    90,    72,    91,   149,    87,
    80,    64,   132,    28,   122,    95,   126,   101,   144,   133,
    56,    27,    97,   136,   110,   134,    40,     2,    39,   nil,
    41,    54,   nil,   nil,   148,    77,   nil,   119,    65,    50,
   nil,   151,   129,    93,   nil,   nil,   103,    94,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    79,    99,   nil,    50,    40,
   nil,   nil,    39,    41,    40,   120,    54,   120,    41,   123,
   172,   123,   170,   116,   102,    50,    90,   173,    91,    92,
   156,   105,   174,   178,   nil,    54,   119,   nil,    46,   nil,
   nil,   125,   155,   135,   nil,    39,   nil,   140,   nil,    50,
    39,   118,    54,   118,   120,   nil,    50,   nil,   123,   120,
   nil,   nil,   nil,   123,    93,   142,   nil,   nil,    94,   137,
   nil,   nil,   145,    46,    33,   nil,    54,   nil,   nil,   163,
   165,   nil,   nil,    54,   nil,   nil,    86,   120,   nil,    50,
   118,   123,    46,    85,   nil,   118,   nil,    33,   nil,    33,
    92,   nil,   nil,   120,    50,   168,   nil,   123,   117,    46,
   117,   nil,   179,    33,   nil,    85,    54,    85,   nil,   nil,
   175,   nil,   nil,   118,    96,   nil,   nil,   nil,   137,   nil,
   nil,    54,   nil,    46,   nil,   nil,   nil,   nil,   nil,   118,
    46,   nil,   nil,   nil,   nil,   nil,    96,   117,    96,   nil,
   nil,   nil,   117,   nil,    85,   nil,   nil,    86,   nil,    85,
   nil,   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   117,   nil,   nil,   nil,   nil,    96,   nil,    85,    46,   nil,
    96,   nil,   nil,   nil,   nil,    96,   117,   nil,   nil,   nil,
   nil,   nil,   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    96,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    96 ]

racc_goto_check = [
     4,     2,    18,     3,    22,    41,    19,    23,    39,    37,
    39,    15,    19,    32,     5,    27,    44,    28,    42,    25,
    31,     5,    21,    46,    40,    20,    36,    43,    30,    23,
    29,    45,    22,    48,    16,    47,    18,     1,    17,   nil,
    19,    17,   nil,   nil,    41,    15,   nil,    39,    17,     5,
   nil,    37,    39,    18,   nil,   nil,    44,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    29,     3,   nil,     5,    18,
   nil,   nil,    17,    19,    18,    18,    17,    18,    19,    19,
    39,    19,    32,    15,    29,     5,    27,    23,    28,    17,
    25,    46,    48,    41,   nil,    17,    39,   nil,    24,   nil,
   nil,    29,    22,     3,   nil,    17,   nil,     2,   nil,     5,
    17,    17,    17,    17,    18,   nil,     5,   nil,    19,    18,
   nil,   nil,   nil,    19,    18,    29,   nil,   nil,    19,    17,
   nil,   nil,    29,    24,     4,   nil,    17,   nil,   nil,     2,
     2,   nil,   nil,    17,   nil,   nil,    24,    18,   nil,     5,
    17,    19,    24,    35,   nil,    17,   nil,     4,   nil,     4,
    17,   nil,   nil,    18,     5,    29,   nil,    19,    24,    24,
    24,   nil,     2,     4,   nil,    35,    17,    35,   nil,   nil,
    29,   nil,   nil,    17,    33,   nil,   nil,   nil,    17,   nil,
   nil,    17,   nil,    24,   nil,   nil,   nil,   nil,   nil,    17,
    24,   nil,   nil,   nil,   nil,   nil,    33,    24,    33,   nil,
   nil,   nil,    24,   nil,    35,   nil,   nil,    24,   nil,    35,
   nil,   nil,   nil,   nil,    35,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,   nil,   nil,   nil,    33,   nil,    35,    24,   nil,
    33,   nil,   nil,   nil,   nil,    33,    24,   nil,   nil,   nil,
   nil,   nil,   nil,    35,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33 ]

racc_goto_pointer = [
   nil,    37,     1,     3,    -6,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   -42,    29,    -7,    -3,
   -35,   -73,   -28,   -68,    86,   -41,   nil,   -45,   -43,    18,
   -81,   -27,   -67,   124,   nil,    93,   -58,   -75,   nil,   -74,
   -58,   -77,  -103,   -36,   -11,    28,    20,   -65,   -67 ]

racc_goto_default = [
   nil,   nil,   nil,    70,    10,    11,    14,    16,    20,    21,
    23,    25,     1,     5,     7,   nil,    38,    13,    57,    58,
   nil,   nil,   nil,   nil,     4,   nil,    89,    51,    53,   nil,
    74,   nil,   nil,    59,    44,    45,   nil,   nil,   128,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :LBRACK => 2,
 :DQTEXT => 3,
 :SQTEXT => 4,
 :RBRACK => 5,
 :LBRACE => 6,
 :RBRACE => 7,
 :SYMBOL => 8,
 :FARROW => 9,
 :COMMA => 10,
 :TRUE => 11,
 :FALSE => 12,
 :EQUALS => 13,
 :LESSEQUAL => 14,
 :NOTEQUAL => 15,
 :DOT => 16,
 :COLON => 17,
 :TYPE => 18,
 :QMARK => 19,
 :LPAREN => 20,
 :RPAREN => 21,
 :ISEQUAL => 22,
 :GREATEREQUAL => 23,
 :GREATERTHAN => 24,
 :LESSTHAN => 25,
 :IF => 26,
 :ELSE => 27,
 :IMPORT => 28,
 :DEFINE => 29,
 :ELSIF => 30,
 :VARIABLE => 31,
 :CLASS => 32,
 :INHERITS => 33,
 :NODE => 34,
 :BOOLEAN => 35,
 :NAME => 36,
 :SEMIC => 37,
 :CASE => 38,
 :DEFAULT => 39,
 :AT => 40,
 :LCOLLECT => 41,
 :RCOLLECT => 42 }

racc_use_result_var = true

racc_nt_base = 43

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'LBRACK',
'DQTEXT',
'SQTEXT',
'RBRACK',
'LBRACE',
'RBRACE',
'SYMBOL',
'FARROW',
'COMMA',
'TRUE',
'FALSE',
'EQUALS',
'LESSEQUAL',
'NOTEQUAL',
'DOT',
'COLON',
'TYPE',
'QMARK',
'LPAREN',
'RPAREN',
'ISEQUAL',
'GREATEREQUAL',
'GREATERTHAN',
'LESSTHAN',
'IF',
'ELSE',
'IMPORT',
'DEFINE',
'ELSIF',
'VARIABLE',
'CLASS',
'INHERITS',
'NODE',
'BOOLEAN',
'NAME',
'SEMIC',
'CASE',
'DEFAULT',
'AT',
'LCOLLECT',
'RCOLLECT',
'$start',
'program',
'statements',
'nothing',
'statement',
'object',
'collectable',
'collection',
'assignment',
'casestatement',
'import',
'fstatement',
'definition',
'hostclass',
'nodedef',
'classnames',
'classname',
'name',
'variable',
'quotedtext',
'objectinstances',
'endsemi',
'params',
'endcomma',
'type',
'objectinst',
'objectname',
'selector',
'array',
'rvalue',
'param',
'rvalues',
'comma',
'boolean',
'objectref',
'funcrvalue',
'caseopts',
'caseopt',
'casevalues',
'selectlhand',
'svalues',
'selectval',
'sintvalues',
'argumentlist',
'parent',
'hostnames',
'hostname',
'arguments',
'argument']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.ra', 26
  def _reduce_1( val, _values, result )
    if val[0].is_a?(AST::ASTArray)
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :children => [val[0]]
        )
    end
   result
  end
.,.,

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'grammar.ra', 41
  def _reduce_4( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[1])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :file => @lexer.file,
            :line => @lexer.line,
            :children => [val[0],val[1]]
        )
    end
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

module_eval <<'.,.,', 'grammar.ra', 64
  def _reduce_15( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 74
  def _reduce_16( val, _values, result )
    args = aryfy(val[1])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :statement
    )
   result
  end
.,.,

 # reduce 17 omitted

module_eval <<'.,.,', 'grammar.ra', 93
  def _reduce_18( val, _values, result )
    result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file
   result
  end
.,.,

 # reduce 19 omitted

 # reduce 20 omitted

 # reduce 21 omitted

module_eval <<'.,.,', 'grammar.ra', 128
  def _reduce_22( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid name"
    end
    array = val[2]
    if array.instance_of?(AST::ObjectInst)
        array = [array]
    end
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file
    )
    # this iterates across each specified objectinstance
    array.each { |instance|
        unless instance.instance_of?(AST::ObjectInst)
            raise Puppet::Dev, "Got something that isn't an instance"
        end
        # now, i need to somehow differentiate between those things with
        # arrays in their names, and normal things
        result.push AST::ObjectDef.new(
            :pin => "{}",
            :line => @lexer.line,
            :file => @lexer.file,
            :type => val[0],
            :name => instance[0],
            :params => instance[1]
        )
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 142
  def _reduce_23( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        Puppet.notice "invalid name"
        raise Puppet::ParseError, "Invalid name"
    end
    # an object but without a name
    # this cannot be an instance of a library type
    result = AST::ObjectDef.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 154
  def _reduce_24( val, _values, result )
    # a template setting for a type
    if val[0].instance_of?(AST::ASTArray)
        raise Puppet::ParseError, "Invalid type"
    end
    result = AST::TypeDefaults.new(
        :pin => "{}",
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :params => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 177
  def _reduce_25( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end

    if val[1].is_a? AST::TypeDefaults
        raise Puppet::ParseError, "Defaults are not collectable"
    end

    # Just mark our objects as collectable and pass them through.
    if val[1].instance_of?(AST::ASTArray)
        val[1].each do |obj|
            obj.collectable = true
        end
    else
        val[1].collectable = true
    end

    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 190
  def _reduce_26( val, _values, result )
    unless Puppet[:storeconfigs]
        raise Puppet::ParseError, "You cannot collect without storeconfigs being set"
    end
    result = AST::Collection.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 198
  def _reduce_27( val, _values, result )
    result = AST::ObjectInst.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

 # reduce 28 omitted

module_eval <<'.,.,', 'grammar.ra', 212
  def _reduce_29( val, _values, result )
    if val[0].instance_of?(AST::ObjectInst)
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    else
        val[0].push val[2]
        result = val[0]
    end
   result
  end
.,.,

 # reduce 30 omitted

 # reduce 31 omitted

module_eval <<'.,.,', 'grammar.ra', 223
  def _reduce_32( val, _values, result )
    result = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 231
  def _reduce_33( val, _values, result )
    result = AST::Type.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

 # reduce 34 omitted

 # reduce 35 omitted

 # reduce 36 omitted

 # reduce 37 omitted

 # reduce 38 omitted

 # reduce 39 omitted

module_eval <<'.,.,', 'grammar.ra', 254
  def _reduce_40( val, _values, result )
    # this is distinct from referencing a variable
    variable = AST::Name.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0].sub(/^\$/,'')
    )
    result = AST::VarDef.new(
        :pin => "=",
        :line => @lexer.line,
        :file => @lexer.file,
        :name => variable,
        :value => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 263
  def _reduce_41( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 263
  def _reduce_42( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 276
  def _reduce_43( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 291
  def _reduce_44( val, _values, result )
    leaf = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => leaf,
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 45 omitted

module_eval <<'.,.,', 'grammar.ra', 304
  def _reduce_46( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0].push(val[2])
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

 # reduce 47 omitted

 # reduce 48 omitted

 # reduce 49 omitted

 # reduce 50 omitted

 # reduce 51 omitted

 # reduce 52 omitted

 # reduce 53 omitted

 # reduce 54 omitted

 # reduce 55 omitted

 # reduce 56 omitted

module_eval <<'.,.,', 'grammar.ra', 327
  def _reduce_57( val, _values, result )
    args = aryfy(val[2])
    result = AST::Function.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :name => val[0],
        :arguments => args,
        :ftype => :rvalue
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 335
  def _reduce_58( val, _values, result )
    result = AST::String.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 341
  def _reduce_59( val, _values, result )
    result = AST::FlatString.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 349
  def _reduce_60( val, _values, result )
    result = AST::Boolean.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 359
  def _reduce_61( val, _values, result )
    result = AST::ObjectRef.new(
        :pin => '[]',
        :line => @lexer.line,
        :file => @lexer.file,
        :type => val[0],
        :name => val[2]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 376
  def _reduce_62( val, _values, result )
    options = val[3]
    unless options.instance_of?(AST::ASTArray)
        options = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[3]]
        )
    end
    result = AST::CaseStatement.new(
        :test => val[1],
        :options => options,
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

 # reduce 63 omitted

module_eval <<'.,.,', 'grammar.ra', 390
  def _reduce_64( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push val[1]
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 400
  def _reduce_65( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => val[3]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 412
  def _reduce_66( val, _values, result )
    result = AST::CaseOpt.new(
        :pin => ":",
        :value => val[0],
        :file => @lexer.file,
        :line => @lexer.line,
        :statements => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

 # reduce 67 omitted

module_eval <<'.,.,', 'grammar.ra', 426
  def _reduce_68( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 436
  def _reduce_69( val, _values, result )
    result = AST::Selector.new(
        :pin => "?",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :values => val[2]
    )
   result
  end
.,.,

 # reduce 70 omitted

module_eval <<'.,.,', 'grammar.ra', 438
  def _reduce_71( val, _values, result )
 result = val[1]
   result
  end
.,.,

 # reduce 72 omitted

module_eval <<'.,.,', 'grammar.ra', 453
  def _reduce_73( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 463
  def _reduce_74( val, _values, result )
    result = AST::ObjectParam.new(
        :pin => "=>",
        :line => @lexer.line,
        :file => @lexer.file,
        :param => val[0],
        :value => val[2]
    )
   result
  end
.,.,

 # reduce 75 omitted

 # reduce 76 omitted

 # reduce 77 omitted

 # reduce 78 omitted

 # reduce 79 omitted

 # reduce 80 omitted

module_eval <<'.,.,', 'grammar.ra', 477
  def _reduce_81( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 536
  def _reduce_82( val, _values, result )
    # importing files
    # yuk, i hate keywords
    # we'll probably have to have some kind of search path eventually
    # but for now, just use a path relative to the file doing the importing
    dir = @lexer.file.sub(%r{[^/]+$},'').sub(/\/$/, '')
    if dir == ""
        dir = "."
    end
    result = AST::ASTArray.new(
        :file => @lexer.file,
        :line => @lexer.line
    )

    Dir.chdir(dir) {
        # We can't interpolate at this point since we don't have any 
        # scopes set up. Warn the user if they use a variable reference
        pat = val[1].value
        if pat.index("$")
             Puppet.warning(
                 "The import of #{pat} contains a variable reference;" +
                 " variables are not interpolated for imports " +
                 "in file #{@lexer.file} at line #{@lexer.line}"
             )
        end
        files = Dir.glob(pat)
        if files.size == 0
            files = Dir.glob(pat + ".pp")
            if files.size == 0
                raise Puppet::ImportError.new("No file(s) found for import " + 
                                              "of '#{pat}'")
            end
        end

        files.each { |file|
            parser = Puppet::Parser::Parser.new()
            parser.files = self.files
            Puppet.debug("importing '%s'" % file)

            unless file =~ /^#{File::SEPARATOR}/
                file = File.join(dir, file)
            end
            begin
                parser.file = file
            rescue Puppet::ImportError
                Puppet.warning(
                    "Importing %s would result in an import loop" %
                        File.join(dir, file)
                )
                next
            end
            # push the results into the main result array
            parser.parse.each do |child|
                result.push child
            end
        }
    }
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 547
  def _reduce_83( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 560
  def _reduce_84( val, _values, result )
    result = AST::CompDef.new(
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :args => val[2],
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 577
  def _reduce_85( val, _values, result )
        #:args => val[2],
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => val[4]
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 594
  def _reduce_86( val, _values, result )
    args = {
        :type => AST::Name.new(:value => val[1], :line => @lexer.line),
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    # It'll be an ASTArray if we didn't get a parent
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::ClassDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 615
  def _reduce_87( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :names => val[1],
        :keyword => val[0],
        :code => val[4]
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 638
  def _reduce_88( val, _values, result )
    unless val[1].instance_of?(AST::ASTArray)
        val[1] = AST::ASTArray.new(
            :line => val[1].line,
            :file => val[1].file,
            :children => [val[1]]
        )
    end
    args = {
        :file => @lexer.file,
        :line => @lexer.line,
        :keyword => val[0],
        :names => val[1],
        :code => AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => []
        )
    }
    if val[2].instance_of?(AST::Name)
        args[:parentclass] = val[2]
    end
    result = AST::NodeDef.new(args)
   result
  end
.,.,

 # reduce 89 omitted

module_eval <<'.,.,', 'grammar.ra', 653
  def _reduce_90( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        result = val[0]
        result.push val[2]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0], val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 661
  def _reduce_91( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 667
  def _reduce_92( val, _values, result )
   result = AST::HostName.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 673
  def _reduce_93( val, _values, result )
    result = AST::Default.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => val[0]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 681
  def _reduce_94( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 95 omitted

module_eval <<'.,.,', 'grammar.ra', 686
  def _reduce_96( val, _values, result )
    result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 697
  def _reduce_97( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

 # reduce 98 omitted

module_eval <<'.,.,', 'grammar.ra', 711
  def _reduce_99( val, _values, result )
    if val[0].instance_of?(AST::ASTArray)
        val[0].push(val[2])
        result = val[0]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[0],val[2]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 719
  def _reduce_100( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0],val[2]]
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 726
  def _reduce_101( val, _values, result )
    result = AST::CompArgument.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => [val[0]]
    )
   result
  end
.,.,

 # reduce 102 omitted

module_eval <<'.,.,', 'grammar.ra', 735
  def _reduce_103( val, _values, result )
    result = AST::Name.new(
        :value => val[1],
        :file => @lexer.file,
        :line => @lexer.line
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 744
  def _reduce_104( val, _values, result )
    name = val[0].sub(/^\$/,'')
    result = AST::Variable.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :value => name
    )
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 756
  def _reduce_105( val, _values, result )
    if val[1].instance_of?(AST::ASTArray)
        result = val[1]
    else
        result = AST::ASTArray.new(
            :line => @lexer.line,
            :file => @lexer.file,
            :children => [val[1]]
        )
    end
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.ra', 762
  def _reduce_106( val, _values, result )
    result = AST::ASTArray.new(
        :line => @lexer.line,
        :file => @lexer.file,
        :children => []
    )
   result
  end
.,.,

 # reduce 107 omitted

 # reduce 108 omitted

 # reduce 109 omitted

module_eval <<'.,.,', 'grammar.ra', 767
  def _reduce_110( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class Parser

  end   # module Parser

end   # module Puppet
