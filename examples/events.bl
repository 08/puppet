load(trigger);

trigger {
	onchange => {
		/etc/inetd.conf => process(restart => inetd),
		/etc/syslog.conf => process(restart => syslogd),
		/etc/syslog-ng.conf => process(restart => syslog-ng),
	},
};

load(process);

process::inetd.binary("/usr/sbin/inetd");
process::inetd.pattern("inetd");
process::inetd.arguments("-s -t");
process::inetd.config("/etc/inet/inetd.conf");

# crap, does this get interpreted at run time, set time, or execution time?
# ugh
# and how the hell do I pass that back in to the process?
# basically, the arguments need to be parsed, and then passed to the
# method, but it's the method that knows it's dealing with its own object
process::inetd.start($_.binary, " ",  $_.arguments);
process::inetd.restart("/usr/bin/pkill -HUP ", $_.pattern);

# this is a system-level notification, isn't it? notifies that
# process is now subscribed to this event
# we could have both parts do something; the system is responsible
# for registering the subscription, and the process module is responsible
# for actually dealing with it

# what i'm trying to say here is "reload inetd if this file changes"
process::inetd.event(filechange($_.config) => $_.restart);
process::inetd.subscribe(filechange.{$_.config} => {$_.restart});

*sycamore:: { process(inetd)++ }
